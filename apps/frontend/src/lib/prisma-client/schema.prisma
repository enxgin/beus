generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "darwin-arm64"]
}

generator client_frontend {
  provider      = "prisma-client-js"
  output        = "../../../apps/frontend/src/lib/prisma-client"
  binaryTargets = ["native", "windows", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  password            String
  name                String
  role                UserRole
  branchId            String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  appointments        Appointment[]     @relation("StaffAppointments")
  cashRegisterActions CashRegisterLog[]
  commissions         StaffCommission[]
  commissionRules     CommissionRule[] // Personele özel kurallar
  services            StaffService[]
  branch              Branch?           @relation(fields: [branchId], references: [id], onDelete: Restrict)
  workHours           WorkHour[]
}

model WorkHour {
  id        String   @id @default(cuid())
  staffId   String
  branchId  String
  dayOfWeek Int // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime String // Format "HH:mm"
  endTime   String // Format "HH:mm"
  isOff     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staff  User   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([staffId, branchId, dayOfWeek])
}

model Branch {
  id                String            @id @default(cuid())
  name              String
  address           String?
  phone             String?
  description       String?
  parentBranchId    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  appointments      Appointment[]
  parentBranch      Branch?           @relation("SubBranches", fields: [parentBranchId], references: [id], onDelete: Restrict)
  subBranches       Branch[]          @relation("SubBranches")
  cashRegisterLogs  CashRegisterLog[]
  customers         Customer[]
  invoices          Invoice[]
  packages          Package[]
  services          Service[]
  serviceCategories ServiceCategory[]
  users             User[]
  workHours         WorkHour[]
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  color     String        @default("#000000")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  customers CustomerTag[]
}

model CustomerTag {
  customerId String
  tagId      String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([customerId, tagId])
}

model Customer {
  id               String            @id @default(cuid())
  name             String
  phone            String            @unique
  email            String?
  notes            String?
  discountRate     Float             @default(0)
  creditBalance    Float             @default(0)
  branchId         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  appointments     Appointment[]
  branch           Branch            @relation(fields: [branchId], references: [id], onDelete: Cascade)
  customerPackages CustomerPackage[]
  tags             CustomerTag[]
  invoices         Invoice[]
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  branchId    String?
  services    Service[]
  branch      Branch?   @relation(fields: [branchId], references: [id])
}

model Service {
  id              String      @id @default(cuid())
  name            String
  description     String?
  duration        Int
  price           Float
  isActive        Boolean     @default(true)
  type            ServiceType @default(TIME_BASED)
  maxCapacity     Int
  unitCount       Int?
  commissionFixed Float?
  commissionRate  Float?
  categoryId      String
  branchId        String

  // İlişkiler
  branch       Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  category     ServiceCategory  @relation(fields: [categoryId], references: [id])
  appointments Appointment[]    @relation("ServiceAppointments")
  packages     PackageService[]
  staff        StaffService[]

  // Komisyon ilişkileri
  commissionRules CommissionRule[] // Hizmete özel kurallar
  commissions     StaffCommission[] // Hizmet için verilen primler

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffService {
  userId    String
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, serviceId])
}

model Package {
  id               String            @id @default(cuid())
  name             String
  price            Float
  validityDays     Int
  commissionRate   Float?
  commissionFixed  Float?
  branchId         String?
  createdAt        DateTime          @default(now())
  description      String?
  totalMinutes     Int?
  totalSessions    Int?
  type             PackageType       @default(SESSION)
  updatedAt        DateTime          @updatedAt
  customerPackages CustomerPackage[]
  branch           Branch?           @relation(fields: [branchId], references: [id])
  services         PackageService[]
}

model PackageService {
  packageId String
  serviceId String
  quantity  Int
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([packageId, serviceId])
}

model CustomerPackage {
  id                String                @id @default(cuid())
  purchaseDate      DateTime              @default(now())
  expiryDate        DateTime
  remainingSessions Json
  salesCode         String? // Satış kodu (opsiyonel)
  notes             String? // Notlar (opsiyonel)
  customerId        String
  packageId         String
  customer          Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  package           Package               @relation(fields: [packageId], references: [id])
  appointments      Appointment[] // Paketi kullanan randevular
  usageHistory      PackageUsageHistory[]
}

model PackageUsageHistory {
  id                String          @id @default(cuid())
  usedAt            DateTime        @default(now())
  customerPackageId String
  appointmentId     String          @unique
  appointment       Appointment     @relation(fields: [appointmentId], references: [id])
  customerPackage   CustomerPackage @relation(fields: [customerPackageId], references: [id], onDelete: Cascade)
}

model Appointment {
  id                String               @id @default(cuid())
  startTime         DateTime
  endTime           DateTime
  duration          Int?
  status            AppointmentStatus    @default(CONFIRMED)
  notes             String?
  customerId        String
  staffId           String
  branchId          String
  serviceId         String
  customerPackageId String? // Müşteri paket ID'si (paket hizmeti kullanımında)
  packageServiceId  String? // Paket içindeki hizmet ID'si (paket hizmeti kullanımında)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branch            Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  customer          Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service           Service              @relation("ServiceAppointments", fields: [serviceId], references: [id])
  staff             User                 @relation("StaffAppointments", fields: [staffId], references: [id])
  customerPackage   CustomerPackage?     @relation(fields: [customerPackageId], references: [id])
  invoice           Invoice?
  packageUsage      PackageUsageHistory?
}

model Invoice {
  id            String           @id @default(cuid())
  totalAmount   Float
  amountPaid    Float            @default(0)
  debt          Float
  status        PaymentStatus    @default(UNPAID)
  customerId    String
  branchId      String
  appointmentId String?          @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  appointment   Appointment?     @relation(fields: [appointmentId], references: [id])
  branch        Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  customer      Customer         @relation(fields: [customerId], references: [id])
  payments      Payment[]
  commission    StaffCommission?
}

model Payment {
  id                String           @id @default(cuid())
  amount            Float
  method            PaymentMethod
  paymentDate       DateTime         @default(now())
  invoiceId         String
  cashRegisterLogId String?
  cashRegisterLog   CashRegisterLog? @relation(fields: [cashRegisterLogId], references: [id])
  invoice           Invoice          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Prim Tipleri için enum
enum CommissionType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Prim Durumları için enum
enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELED
}

// Prim Kuralları tablosu
model CommissionRule {
  id          String         @id @default(cuid())
  type        CommissionType
  value       Float // Yüzdelik değer veya sabit tutar
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // İlişkisel alanlar - kural tiplerine göre
  isGlobal  Boolean @default(false) // Genel kural mı?
  serviceId String? // Hizmete özel kural için
  userId    String? // Personele özel kural için

  // İlişkiler
  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Bir kural birden fazla komisyonu tetikleyebilir
  commissions StaffCommission[]

  @@index([userId, serviceId, isGlobal]) // Performans için indeks
}

model StaffCommission {
  id            String           @id @default(cuid())
  amount        Float // Hesaplanan prim tutarı
  status        CommissionStatus @default(PENDING)
  isReversed    Boolean          @default(false) // Geriye dönük uyumluluk için
  appliedRuleId String? // Uygulanan kuralın ID'si
  staffId       String // Primi alan personelin ID'si
  serviceId     String? // İlgili hizmetin ID'si
  invoiceId     String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // İlişkiler
  appliedRule CommissionRule? @relation(fields: [appliedRuleId], references: [id], onDelete: SetNull)
  staff       User            @relation(fields: [staffId], references: [id])
  service     Service?        @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  invoice     Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([staffId, serviceId, status])
}

model CashRegisterLog {
  id          String      @id @default(cuid())
  type        CashLogType
  amount      Float
  description String?
  branchId    String
  userId      String
  createdAt   DateTime    @default(now())
  branch      Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])
  payments    Payment[]
}

enum UserRole {
  ADMIN
  SUPER_BRANCH_MANAGER
  BRANCH_MANAGER
  RECEPTION
  STAFF
  CUSTOMER
}

enum ServiceType {
  TIME_BASED
  UNIT_BASED
}

enum PackageType {
  SESSION
  TIME
}

enum AppointmentStatus {
  SCHEDULED
  ARRIVED
  CANCELED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIALLY_PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  CUSTOMER_CREDIT
}

enum CashLogType {
  OPENING
  CLOSING
  INCOME
  OUTCOME
  MANUAL_IN
  MANUAL_OUT
}
