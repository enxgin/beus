
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WorkHour
 * 
 */
export type WorkHour = $Result.DefaultSelection<Prisma.$WorkHourPayload>
/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model CustomerTag
 * 
 */
export type CustomerTag = $Result.DefaultSelection<Prisma.$CustomerTagPayload>
/**
 * Model ServiceCategory
 * 
 */
export type ServiceCategory = $Result.DefaultSelection<Prisma.$ServiceCategoryPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model StaffService
 * 
 */
export type StaffService = $Result.DefaultSelection<Prisma.$StaffServicePayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model PackageService
 * 
 */
export type PackageService = $Result.DefaultSelection<Prisma.$PackageServicePayload>
/**
 * Model CustomerPackage
 * 
 */
export type CustomerPackage = $Result.DefaultSelection<Prisma.$CustomerPackagePayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model CommissionRule
 * 
 */
export type CommissionRule = $Result.DefaultSelection<Prisma.$CommissionRulePayload>
/**
 * Model CommissionItem
 * 
 */
export type CommissionItem = $Result.DefaultSelection<Prisma.$CommissionItemPayload>
/**
 * Model StaffCommission
 * 
 */
export type StaffCommission = $Result.DefaultSelection<Prisma.$StaffCommissionPayload>
/**
 * Model CashRegisterLog
 * 
 */
export type CashRegisterLog = $Result.DefaultSelection<Prisma.$CashRegisterLogPayload>
/**
 * Model NotificationProvider
 * 
 */
export type NotificationProvider = $Result.DefaultSelection<Prisma.$NotificationProviderPayload>
/**
 * Model NotificationTemplate
 * 
 */
export type NotificationTemplate = $Result.DefaultSelection<Prisma.$NotificationTemplatePayload>
/**
 * Model NotificationTrigger
 * 
 */
export type NotificationTrigger = $Result.DefaultSelection<Prisma.$NotificationTriggerPayload>
/**
 * Model NotificationQueue
 * 
 */
export type NotificationQueue = $Result.DefaultSelection<Prisma.$NotificationQueuePayload>
/**
 * Model NotificationHistory
 * 
 */
export type NotificationHistory = $Result.DefaultSelection<Prisma.$NotificationHistoryPayload>
/**
 * Model NotificationSettings
 * 
 */
export type NotificationSettings = $Result.DefaultSelection<Prisma.$NotificationSettingsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CommissionRuleType: {
  GENERAL: 'GENERAL',
  SERVICE_SPECIFIC: 'SERVICE_SPECIFIC',
  STAFF_SPECIFIC: 'STAFF_SPECIFIC'
};

export type CommissionRuleType = (typeof CommissionRuleType)[keyof typeof CommissionRuleType]


export const CommissionType: {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT'
};

export type CommissionType = (typeof CommissionType)[keyof typeof CommissionType]


export const CommissionStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  CANCELED: 'CANCELED'
};

export type CommissionStatus = (typeof CommissionStatus)[keyof typeof CommissionStatus]


export const PackageType: {
  SESSION: 'SESSION',
  TIME: 'TIME'
};

export type PackageType = (typeof PackageType)[keyof typeof PackageType]


export const AppointmentStatus: {
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW',
  SCHEDULED: 'SCHEDULED',
  ARRIVED: 'ARRIVED',
  CANCELED: 'CANCELED'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const PaymentStatus: {
  PAID: 'PAID',
  UNPAID: 'UNPAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const PaymentMethod: {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CUSTOMER_CREDIT: 'CUSTOMER_CREDIT'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const UserRole: {
  ADMIN: 'ADMIN',
  SUPER_BRANCH_MANAGER: 'SUPER_BRANCH_MANAGER',
  BRANCH_MANAGER: 'BRANCH_MANAGER',
  RECEPTION: 'RECEPTION',
  STAFF: 'STAFF',
  CUSTOMER: 'CUSTOMER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CashLogType: {
  OPENING: 'OPENING',
  CLOSING: 'CLOSING',
  INCOME: 'INCOME',
  OUTCOME: 'OUTCOME',
  MANUAL_IN: 'MANUAL_IN',
  MANUAL_OUT: 'MANUAL_OUT',
  INVOICE_PAYMENT: 'INVOICE_PAYMENT'
};

export type CashLogType = (typeof CashLogType)[keyof typeof CashLogType]


export const CashMovementCategory: {
  RENT: 'RENT',
  UTILITIES: 'UTILITIES',
  SUPPLIES: 'SUPPLIES',
  STAFF_ADVANCE: 'STAFF_ADVANCE',
  MAINTENANCE: 'MAINTENANCE',
  MARKETING: 'MARKETING',
  OTHER_EXPENSE: 'OTHER_EXPENSE',
  OTHER_INCOME: 'OTHER_INCOME'
};

export type CashMovementCategory = (typeof CashMovementCategory)[keyof typeof CashMovementCategory]


export const NotificationType: {
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  EMAIL: 'EMAIL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationEventType: {
  APPOINTMENT_REMINDER: 'APPOINTMENT_REMINDER',
  APPOINTMENT_CONFIRMATION: 'APPOINTMENT_CONFIRMATION',
  BIRTHDAY: 'BIRTHDAY',
  PACKAGE_EXPIRY: 'PACKAGE_EXPIRY',
  PAYMENT_REMINDER: 'PAYMENT_REMINDER',
  WELCOME_MESSAGE: 'WELCOME_MESSAGE',
  CUSTOM: 'CUSTOM'
};

export type NotificationEventType = (typeof NotificationEventType)[keyof typeof NotificationEventType]


export const NotificationStatus: {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus]


export const NotificationDeliveryStatus: {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  READ: 'READ'
};

export type NotificationDeliveryStatus = (typeof NotificationDeliveryStatus)[keyof typeof NotificationDeliveryStatus]

}

export type CommissionRuleType = $Enums.CommissionRuleType

export const CommissionRuleType: typeof $Enums.CommissionRuleType

export type CommissionType = $Enums.CommissionType

export const CommissionType: typeof $Enums.CommissionType

export type CommissionStatus = $Enums.CommissionStatus

export const CommissionStatus: typeof $Enums.CommissionStatus

export type PackageType = $Enums.PackageType

export const PackageType: typeof $Enums.PackageType

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CashLogType = $Enums.CashLogType

export const CashLogType: typeof $Enums.CashLogType

export type CashMovementCategory = $Enums.CashMovementCategory

export const CashMovementCategory: typeof $Enums.CashMovementCategory

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationEventType = $Enums.NotificationEventType

export const NotificationEventType: typeof $Enums.NotificationEventType

export type NotificationStatus = $Enums.NotificationStatus

export const NotificationStatus: typeof $Enums.NotificationStatus

export type NotificationDeliveryStatus = $Enums.NotificationDeliveryStatus

export const NotificationDeliveryStatus: typeof $Enums.NotificationDeliveryStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workHour`: Exposes CRUD operations for the **WorkHour** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkHours
    * const workHours = await prisma.workHour.findMany()
    * ```
    */
  get workHour(): Prisma.WorkHourDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerTag`: Exposes CRUD operations for the **CustomerTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerTags
    * const customerTags = await prisma.customerTag.findMany()
    * ```
    */
  get customerTag(): Prisma.CustomerTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceCategory`: Exposes CRUD operations for the **ServiceCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceCategories
    * const serviceCategories = await prisma.serviceCategory.findMany()
    * ```
    */
  get serviceCategory(): Prisma.ServiceCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffService`: Exposes CRUD operations for the **StaffService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffServices
    * const staffServices = await prisma.staffService.findMany()
    * ```
    */
  get staffService(): Prisma.StaffServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.packageService`: Exposes CRUD operations for the **PackageService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackageServices
    * const packageServices = await prisma.packageService.findMany()
    * ```
    */
  get packageService(): Prisma.PackageServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerPackage`: Exposes CRUD operations for the **CustomerPackage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerPackages
    * const customerPackages = await prisma.customerPackage.findMany()
    * ```
    */
  get customerPackage(): Prisma.CustomerPackageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commissionRule`: Exposes CRUD operations for the **CommissionRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommissionRules
    * const commissionRules = await prisma.commissionRule.findMany()
    * ```
    */
  get commissionRule(): Prisma.CommissionRuleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commissionItem`: Exposes CRUD operations for the **CommissionItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommissionItems
    * const commissionItems = await prisma.commissionItem.findMany()
    * ```
    */
  get commissionItem(): Prisma.CommissionItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffCommission`: Exposes CRUD operations for the **StaffCommission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffCommissions
    * const staffCommissions = await prisma.staffCommission.findMany()
    * ```
    */
  get staffCommission(): Prisma.StaffCommissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cashRegisterLog`: Exposes CRUD operations for the **CashRegisterLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashRegisterLogs
    * const cashRegisterLogs = await prisma.cashRegisterLog.findMany()
    * ```
    */
  get cashRegisterLog(): Prisma.CashRegisterLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationProvider`: Exposes CRUD operations for the **NotificationProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationProviders
    * const notificationProviders = await prisma.notificationProvider.findMany()
    * ```
    */
  get notificationProvider(): Prisma.NotificationProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationTemplate`: Exposes CRUD operations for the **NotificationTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationTemplates
    * const notificationTemplates = await prisma.notificationTemplate.findMany()
    * ```
    */
  get notificationTemplate(): Prisma.NotificationTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationTrigger`: Exposes CRUD operations for the **NotificationTrigger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationTriggers
    * const notificationTriggers = await prisma.notificationTrigger.findMany()
    * ```
    */
  get notificationTrigger(): Prisma.NotificationTriggerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationQueue`: Exposes CRUD operations for the **NotificationQueue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationQueues
    * const notificationQueues = await prisma.notificationQueue.findMany()
    * ```
    */
  get notificationQueue(): Prisma.NotificationQueueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationHistory`: Exposes CRUD operations for the **NotificationHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationHistories
    * const notificationHistories = await prisma.notificationHistory.findMany()
    * ```
    */
  get notificationHistory(): Prisma.NotificationHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationSettings`: Exposes CRUD operations for the **NotificationSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationSettings
    * const notificationSettings = await prisma.notificationSettings.findMany()
    * ```
    */
  get notificationSettings(): Prisma.NotificationSettingsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    WorkHour: 'WorkHour',
    Branch: 'Branch',
    Customer: 'Customer',
    Tag: 'Tag',
    CustomerTag: 'CustomerTag',
    ServiceCategory: 'ServiceCategory',
    Service: 'Service',
    StaffService: 'StaffService',
    Appointment: 'Appointment',
    Package: 'Package',
    PackageService: 'PackageService',
    CustomerPackage: 'CustomerPackage',
    Invoice: 'Invoice',
    Payment: 'Payment',
    CommissionRule: 'CommissionRule',
    CommissionItem: 'CommissionItem',
    StaffCommission: 'StaffCommission',
    CashRegisterLog: 'CashRegisterLog',
    NotificationProvider: 'NotificationProvider',
    NotificationTemplate: 'NotificationTemplate',
    NotificationTrigger: 'NotificationTrigger',
    NotificationQueue: 'NotificationQueue',
    NotificationHistory: 'NotificationHistory',
    NotificationSettings: 'NotificationSettings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "workHour" | "branch" | "customer" | "tag" | "customerTag" | "serviceCategory" | "service" | "staffService" | "appointment" | "package" | "packageService" | "customerPackage" | "invoice" | "payment" | "commissionRule" | "commissionItem" | "staffCommission" | "cashRegisterLog" | "notificationProvider" | "notificationTemplate" | "notificationTrigger" | "notificationQueue" | "notificationHistory" | "notificationSettings"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WorkHour: {
        payload: Prisma.$WorkHourPayload<ExtArgs>
        fields: Prisma.WorkHourFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkHourFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkHourFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>
          }
          findFirst: {
            args: Prisma.WorkHourFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkHourFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>
          }
          findMany: {
            args: Prisma.WorkHourFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>[]
          }
          create: {
            args: Prisma.WorkHourCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>
          }
          createMany: {
            args: Prisma.WorkHourCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkHourCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>[]
          }
          delete: {
            args: Prisma.WorkHourDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>
          }
          update: {
            args: Prisma.WorkHourUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>
          }
          deleteMany: {
            args: Prisma.WorkHourDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkHourUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkHourUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>[]
          }
          upsert: {
            args: Prisma.WorkHourUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHourPayload>
          }
          aggregate: {
            args: Prisma.WorkHourAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkHour>
          }
          groupBy: {
            args: Prisma.WorkHourGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkHourGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkHourCountArgs<ExtArgs>
            result: $Utils.Optional<WorkHourCountAggregateOutputType> | number
          }
        }
      }
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BranchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BranchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      CustomerTag: {
        payload: Prisma.$CustomerTagPayload<ExtArgs>
        fields: Prisma.CustomerTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>
          }
          findFirst: {
            args: Prisma.CustomerTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>
          }
          findMany: {
            args: Prisma.CustomerTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>[]
          }
          create: {
            args: Prisma.CustomerTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>
          }
          createMany: {
            args: Prisma.CustomerTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>[]
          }
          delete: {
            args: Prisma.CustomerTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>
          }
          update: {
            args: Prisma.CustomerTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>
          }
          deleteMany: {
            args: Prisma.CustomerTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>[]
          }
          upsert: {
            args: Prisma.CustomerTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTagPayload>
          }
          aggregate: {
            args: Prisma.CustomerTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerTag>
          }
          groupBy: {
            args: Prisma.CustomerTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerTagCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerTagCountAggregateOutputType> | number
          }
        }
      }
      ServiceCategory: {
        payload: Prisma.$ServiceCategoryPayload<ExtArgs>
        fields: Prisma.ServiceCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          findFirst: {
            args: Prisma.ServiceCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          findMany: {
            args: Prisma.ServiceCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          create: {
            args: Prisma.ServiceCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          createMany: {
            args: Prisma.ServiceCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          delete: {
            args: Prisma.ServiceCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          update: {
            args: Prisma.ServiceCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ServiceCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ServiceCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          aggregate: {
            args: Prisma.ServiceCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceCategory>
          }
          groupBy: {
            args: Prisma.ServiceCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCategoryCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      StaffService: {
        payload: Prisma.$StaffServicePayload<ExtArgs>
        fields: Prisma.StaffServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>
          }
          findFirst: {
            args: Prisma.StaffServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>
          }
          findMany: {
            args: Prisma.StaffServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>[]
          }
          create: {
            args: Prisma.StaffServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>
          }
          createMany: {
            args: Prisma.StaffServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>[]
          }
          delete: {
            args: Prisma.StaffServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>
          }
          update: {
            args: Prisma.StaffServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>
          }
          deleteMany: {
            args: Prisma.StaffServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>[]
          }
          upsert: {
            args: Prisma.StaffServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffServicePayload>
          }
          aggregate: {
            args: Prisma.StaffServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffService>
          }
          groupBy: {
            args: Prisma.StaffServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffServiceCountArgs<ExtArgs>
            result: $Utils.Optional<StaffServiceCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      PackageService: {
        payload: Prisma.$PackageServicePayload<ExtArgs>
        fields: Prisma.PackageServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>
          }
          findFirst: {
            args: Prisma.PackageServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>
          }
          findMany: {
            args: Prisma.PackageServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>[]
          }
          create: {
            args: Prisma.PackageServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>
          }
          createMany: {
            args: Prisma.PackageServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>[]
          }
          delete: {
            args: Prisma.PackageServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>
          }
          update: {
            args: Prisma.PackageServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>
          }
          deleteMany: {
            args: Prisma.PackageServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackageServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>[]
          }
          upsert: {
            args: Prisma.PackageServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageServicePayload>
          }
          aggregate: {
            args: Prisma.PackageServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackageService>
          }
          groupBy: {
            args: Prisma.PackageServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageServiceCountArgs<ExtArgs>
            result: $Utils.Optional<PackageServiceCountAggregateOutputType> | number
          }
        }
      }
      CustomerPackage: {
        payload: Prisma.$CustomerPackagePayload<ExtArgs>
        fields: Prisma.CustomerPackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerPackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerPackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>
          }
          findFirst: {
            args: Prisma.CustomerPackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerPackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>
          }
          findMany: {
            args: Prisma.CustomerPackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>[]
          }
          create: {
            args: Prisma.CustomerPackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>
          }
          createMany: {
            args: Prisma.CustomerPackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerPackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>[]
          }
          delete: {
            args: Prisma.CustomerPackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>
          }
          update: {
            args: Prisma.CustomerPackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>
          }
          deleteMany: {
            args: Prisma.CustomerPackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerPackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerPackageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>[]
          }
          upsert: {
            args: Prisma.CustomerPackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPackagePayload>
          }
          aggregate: {
            args: Prisma.CustomerPackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerPackage>
          }
          groupBy: {
            args: Prisma.CustomerPackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerPackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerPackageCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerPackageCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      CommissionRule: {
        payload: Prisma.$CommissionRulePayload<ExtArgs>
        fields: Prisma.CommissionRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommissionRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommissionRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>
          }
          findFirst: {
            args: Prisma.CommissionRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommissionRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>
          }
          findMany: {
            args: Prisma.CommissionRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>[]
          }
          create: {
            args: Prisma.CommissionRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>
          }
          createMany: {
            args: Prisma.CommissionRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommissionRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>[]
          }
          delete: {
            args: Prisma.CommissionRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>
          }
          update: {
            args: Prisma.CommissionRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>
          }
          deleteMany: {
            args: Prisma.CommissionRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommissionRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommissionRuleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>[]
          }
          upsert: {
            args: Prisma.CommissionRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionRulePayload>
          }
          aggregate: {
            args: Prisma.CommissionRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommissionRule>
          }
          groupBy: {
            args: Prisma.CommissionRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommissionRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommissionRuleCountArgs<ExtArgs>
            result: $Utils.Optional<CommissionRuleCountAggregateOutputType> | number
          }
        }
      }
      CommissionItem: {
        payload: Prisma.$CommissionItemPayload<ExtArgs>
        fields: Prisma.CommissionItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommissionItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommissionItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>
          }
          findFirst: {
            args: Prisma.CommissionItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommissionItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>
          }
          findMany: {
            args: Prisma.CommissionItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>[]
          }
          create: {
            args: Prisma.CommissionItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>
          }
          createMany: {
            args: Prisma.CommissionItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommissionItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>[]
          }
          delete: {
            args: Prisma.CommissionItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>
          }
          update: {
            args: Prisma.CommissionItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>
          }
          deleteMany: {
            args: Prisma.CommissionItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommissionItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommissionItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>[]
          }
          upsert: {
            args: Prisma.CommissionItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommissionItemPayload>
          }
          aggregate: {
            args: Prisma.CommissionItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommissionItem>
          }
          groupBy: {
            args: Prisma.CommissionItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommissionItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommissionItemCountArgs<ExtArgs>
            result: $Utils.Optional<CommissionItemCountAggregateOutputType> | number
          }
        }
      }
      StaffCommission: {
        payload: Prisma.$StaffCommissionPayload<ExtArgs>
        fields: Prisma.StaffCommissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffCommissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffCommissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>
          }
          findFirst: {
            args: Prisma.StaffCommissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffCommissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>
          }
          findMany: {
            args: Prisma.StaffCommissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>[]
          }
          create: {
            args: Prisma.StaffCommissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>
          }
          createMany: {
            args: Prisma.StaffCommissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffCommissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>[]
          }
          delete: {
            args: Prisma.StaffCommissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>
          }
          update: {
            args: Prisma.StaffCommissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>
          }
          deleteMany: {
            args: Prisma.StaffCommissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffCommissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffCommissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>[]
          }
          upsert: {
            args: Prisma.StaffCommissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffCommissionPayload>
          }
          aggregate: {
            args: Prisma.StaffCommissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffCommission>
          }
          groupBy: {
            args: Prisma.StaffCommissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffCommissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCommissionCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCommissionCountAggregateOutputType> | number
          }
        }
      }
      CashRegisterLog: {
        payload: Prisma.$CashRegisterLogPayload<ExtArgs>
        fields: Prisma.CashRegisterLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashRegisterLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashRegisterLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>
          }
          findFirst: {
            args: Prisma.CashRegisterLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashRegisterLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>
          }
          findMany: {
            args: Prisma.CashRegisterLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>[]
          }
          create: {
            args: Prisma.CashRegisterLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>
          }
          createMany: {
            args: Prisma.CashRegisterLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CashRegisterLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>[]
          }
          delete: {
            args: Prisma.CashRegisterLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>
          }
          update: {
            args: Prisma.CashRegisterLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>
          }
          deleteMany: {
            args: Prisma.CashRegisterLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashRegisterLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CashRegisterLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>[]
          }
          upsert: {
            args: Prisma.CashRegisterLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashRegisterLogPayload>
          }
          aggregate: {
            args: Prisma.CashRegisterLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashRegisterLog>
          }
          groupBy: {
            args: Prisma.CashRegisterLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashRegisterLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashRegisterLogCountArgs<ExtArgs>
            result: $Utils.Optional<CashRegisterLogCountAggregateOutputType> | number
          }
        }
      }
      NotificationProvider: {
        payload: Prisma.$NotificationProviderPayload<ExtArgs>
        fields: Prisma.NotificationProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>
          }
          findFirst: {
            args: Prisma.NotificationProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>
          }
          findMany: {
            args: Prisma.NotificationProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>[]
          }
          create: {
            args: Prisma.NotificationProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>
          }
          createMany: {
            args: Prisma.NotificationProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>[]
          }
          delete: {
            args: Prisma.NotificationProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>
          }
          update: {
            args: Prisma.NotificationProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>
          }
          deleteMany: {
            args: Prisma.NotificationProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>[]
          }
          upsert: {
            args: Prisma.NotificationProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationProviderPayload>
          }
          aggregate: {
            args: Prisma.NotificationProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationProvider>
          }
          groupBy: {
            args: Prisma.NotificationProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationProviderCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationProviderCountAggregateOutputType> | number
          }
        }
      }
      NotificationTemplate: {
        payload: Prisma.$NotificationTemplatePayload<ExtArgs>
        fields: Prisma.NotificationTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>
          }
          findFirst: {
            args: Prisma.NotificationTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>
          }
          findMany: {
            args: Prisma.NotificationTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>[]
          }
          create: {
            args: Prisma.NotificationTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>
          }
          createMany: {
            args: Prisma.NotificationTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>[]
          }
          delete: {
            args: Prisma.NotificationTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>
          }
          update: {
            args: Prisma.NotificationTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>
          }
          deleteMany: {
            args: Prisma.NotificationTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>[]
          }
          upsert: {
            args: Prisma.NotificationTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTemplatePayload>
          }
          aggregate: {
            args: Prisma.NotificationTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationTemplate>
          }
          groupBy: {
            args: Prisma.NotificationTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationTemplateCountAggregateOutputType> | number
          }
        }
      }
      NotificationTrigger: {
        payload: Prisma.$NotificationTriggerPayload<ExtArgs>
        fields: Prisma.NotificationTriggerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationTriggerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationTriggerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>
          }
          findFirst: {
            args: Prisma.NotificationTriggerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationTriggerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>
          }
          findMany: {
            args: Prisma.NotificationTriggerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>[]
          }
          create: {
            args: Prisma.NotificationTriggerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>
          }
          createMany: {
            args: Prisma.NotificationTriggerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationTriggerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>[]
          }
          delete: {
            args: Prisma.NotificationTriggerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>
          }
          update: {
            args: Prisma.NotificationTriggerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>
          }
          deleteMany: {
            args: Prisma.NotificationTriggerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationTriggerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationTriggerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>[]
          }
          upsert: {
            args: Prisma.NotificationTriggerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTriggerPayload>
          }
          aggregate: {
            args: Prisma.NotificationTriggerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationTrigger>
          }
          groupBy: {
            args: Prisma.NotificationTriggerGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationTriggerGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationTriggerCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationTriggerCountAggregateOutputType> | number
          }
        }
      }
      NotificationQueue: {
        payload: Prisma.$NotificationQueuePayload<ExtArgs>
        fields: Prisma.NotificationQueueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationQueueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationQueueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>
          }
          findFirst: {
            args: Prisma.NotificationQueueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationQueueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>
          }
          findMany: {
            args: Prisma.NotificationQueueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>[]
          }
          create: {
            args: Prisma.NotificationQueueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>
          }
          createMany: {
            args: Prisma.NotificationQueueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationQueueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>[]
          }
          delete: {
            args: Prisma.NotificationQueueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>
          }
          update: {
            args: Prisma.NotificationQueueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>
          }
          deleteMany: {
            args: Prisma.NotificationQueueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationQueueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationQueueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>[]
          }
          upsert: {
            args: Prisma.NotificationQueueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationQueuePayload>
          }
          aggregate: {
            args: Prisma.NotificationQueueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationQueue>
          }
          groupBy: {
            args: Prisma.NotificationQueueGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationQueueGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationQueueCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationQueueCountAggregateOutputType> | number
          }
        }
      }
      NotificationHistory: {
        payload: Prisma.$NotificationHistoryPayload<ExtArgs>
        fields: Prisma.NotificationHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>
          }
          findFirst: {
            args: Prisma.NotificationHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>
          }
          findMany: {
            args: Prisma.NotificationHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>[]
          }
          create: {
            args: Prisma.NotificationHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>
          }
          createMany: {
            args: Prisma.NotificationHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>[]
          }
          delete: {
            args: Prisma.NotificationHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>
          }
          update: {
            args: Prisma.NotificationHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>
          }
          deleteMany: {
            args: Prisma.NotificationHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>[]
          }
          upsert: {
            args: Prisma.NotificationHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationHistoryPayload>
          }
          aggregate: {
            args: Prisma.NotificationHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationHistory>
          }
          groupBy: {
            args: Prisma.NotificationHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationHistoryCountAggregateOutputType> | number
          }
        }
      }
      NotificationSettings: {
        payload: Prisma.$NotificationSettingsPayload<ExtArgs>
        fields: Prisma.NotificationSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findFirst: {
            args: Prisma.NotificationSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findMany: {
            args: Prisma.NotificationSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          create: {
            args: Prisma.NotificationSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          createMany: {
            args: Prisma.NotificationSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          delete: {
            args: Prisma.NotificationSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          update: {
            args: Prisma.NotificationSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          upsert: {
            args: Prisma.NotificationSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          aggregate: {
            args: Prisma.NotificationSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationSettings>
          }
          groupBy: {
            args: Prisma.NotificationSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    workHour?: WorkHourOmit
    branch?: BranchOmit
    customer?: CustomerOmit
    tag?: TagOmit
    customerTag?: CustomerTagOmit
    serviceCategory?: ServiceCategoryOmit
    service?: ServiceOmit
    staffService?: StaffServiceOmit
    appointment?: AppointmentOmit
    package?: PackageOmit
    packageService?: PackageServiceOmit
    customerPackage?: CustomerPackageOmit
    invoice?: InvoiceOmit
    payment?: PaymentOmit
    commissionRule?: CommissionRuleOmit
    commissionItem?: CommissionItemOmit
    staffCommission?: StaffCommissionOmit
    cashRegisterLog?: CashRegisterLogOmit
    notificationProvider?: NotificationProviderOmit
    notificationTemplate?: NotificationTemplateOmit
    notificationTrigger?: NotificationTriggerOmit
    notificationQueue?: NotificationQueueOmit
    notificationHistory?: NotificationHistoryOmit
    notificationSettings?: NotificationSettingsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    appointments: number
    CashRegisterLog: number
    staffCommissionRules: number
    commissions: number
    services: number
    workHours: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    CashRegisterLog?: boolean | UserCountOutputTypeCountCashRegisterLogArgs
    staffCommissionRules?: boolean | UserCountOutputTypeCountStaffCommissionRulesArgs
    commissions?: boolean | UserCountOutputTypeCountCommissionsArgs
    services?: boolean | UserCountOutputTypeCountServicesArgs
    workHours?: boolean | UserCountOutputTypeCountWorkHoursArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCashRegisterLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashRegisterLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStaffCommissionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionRuleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffCommissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffServiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkHourWhereInput
  }


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    appointments: number
    subBranches: number
    users: number
    services: number
    packages: number
    invoices: number
    customers: number
    workHours: number
    CashRegisterLog: number
    commissionRules: number
    serviceCategories: number
    notificationProviders: number
    notificationTemplates: number
    notificationTriggers: number
    notificationQueue: number
    notificationHistory: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | BranchCountOutputTypeCountAppointmentsArgs
    subBranches?: boolean | BranchCountOutputTypeCountSubBranchesArgs
    users?: boolean | BranchCountOutputTypeCountUsersArgs
    services?: boolean | BranchCountOutputTypeCountServicesArgs
    packages?: boolean | BranchCountOutputTypeCountPackagesArgs
    invoices?: boolean | BranchCountOutputTypeCountInvoicesArgs
    customers?: boolean | BranchCountOutputTypeCountCustomersArgs
    workHours?: boolean | BranchCountOutputTypeCountWorkHoursArgs
    CashRegisterLog?: boolean | BranchCountOutputTypeCountCashRegisterLogArgs
    commissionRules?: boolean | BranchCountOutputTypeCountCommissionRulesArgs
    serviceCategories?: boolean | BranchCountOutputTypeCountServiceCategoriesArgs
    notificationProviders?: boolean | BranchCountOutputTypeCountNotificationProvidersArgs
    notificationTemplates?: boolean | BranchCountOutputTypeCountNotificationTemplatesArgs
    notificationTriggers?: boolean | BranchCountOutputTypeCountNotificationTriggersArgs
    notificationQueue?: boolean | BranchCountOutputTypeCountNotificationQueueArgs
    notificationHistory?: boolean | BranchCountOutputTypeCountNotificationHistoryArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountSubBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountWorkHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkHourWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountCashRegisterLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashRegisterLogWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountCommissionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionRuleWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountServiceCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceCategoryWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNotificationProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationProviderWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNotificationTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTemplateWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNotificationTriggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTriggerWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNotificationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationQueueWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountNotificationHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationHistoryWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    appointments: number
    packages: number
    invoices: number
    tags: number
    notificationQueue: number
    notificationHistory: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | CustomerCountOutputTypeCountAppointmentsArgs
    packages?: boolean | CustomerCountOutputTypeCountPackagesArgs
    invoices?: boolean | CustomerCountOutputTypeCountInvoicesArgs
    tags?: boolean | CustomerCountOutputTypeCountTagsArgs
    notificationQueue?: boolean | CustomerCountOutputTypeCountNotificationQueueArgs
    notificationHistory?: boolean | CustomerCountOutputTypeCountNotificationHistoryArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerPackageWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerTagWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountNotificationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationQueueWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountNotificationHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationHistoryWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    customers: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customers?: boolean | TagCountOutputTypeCountCustomersArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerTagWhereInput
  }


  /**
   * Count Type ServiceCategoryCountOutputType
   */

  export type ServiceCategoryCountOutputType = {
    services: number
  }

  export type ServiceCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ServiceCategoryCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes
  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategoryCountOutputType
     */
    select?: ServiceCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    appointments: number
    staff: number
    packages: number
    commissionItems: number
    StaffCommission: number
    commissionRules: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | ServiceCountOutputTypeCountAppointmentsArgs
    staff?: boolean | ServiceCountOutputTypeCountStaffArgs
    packages?: boolean | ServiceCountOutputTypeCountPackagesArgs
    commissionItems?: boolean | ServiceCountOutputTypeCountCommissionItemsArgs
    StaffCommission?: boolean | ServiceCountOutputTypeCountStaffCommissionArgs
    commissionRules?: boolean | ServiceCountOutputTypeCountCommissionRulesArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffServiceWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageServiceWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountCommissionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionItemWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountStaffCommissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffCommissionWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountCommissionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionRuleWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    services: number
    customerPackages: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | PackageCountOutputTypeCountServicesArgs
    customerPackages?: boolean | PackageCountOutputTypeCountCustomerPackagesArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageServiceWhereInput
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountCustomerPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerPackageWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    payments: number
    commissionItems: number
    StaffCommission: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | InvoiceCountOutputTypeCountPaymentsArgs
    commissionItems?: boolean | InvoiceCountOutputTypeCountCommissionItemsArgs
    StaffCommission?: boolean | InvoiceCountOutputTypeCountStaffCommissionArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountCommissionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionItemWhereInput
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountStaffCommissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffCommissionWhereInput
  }


  /**
   * Count Type CommissionRuleCountOutputType
   */

  export type CommissionRuleCountOutputType = {
    commissionItems: number
  }

  export type CommissionRuleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commissionItems?: boolean | CommissionRuleCountOutputTypeCountCommissionItemsArgs
  }

  // Custom InputTypes
  /**
   * CommissionRuleCountOutputType without action
   */
  export type CommissionRuleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRuleCountOutputType
     */
    select?: CommissionRuleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommissionRuleCountOutputType without action
   */
  export type CommissionRuleCountOutputTypeCountCommissionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionItemWhereInput
  }


  /**
   * Count Type CommissionItemCountOutputType
   */

  export type CommissionItemCountOutputType = {
    commissions: number
  }

  export type CommissionItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commissions?: boolean | CommissionItemCountOutputTypeCountCommissionsArgs
  }

  // Custom InputTypes
  /**
   * CommissionItemCountOutputType without action
   */
  export type CommissionItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItemCountOutputType
     */
    select?: CommissionItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommissionItemCountOutputType without action
   */
  export type CommissionItemCountOutputTypeCountCommissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffCommissionWhereInput
  }


  /**
   * Count Type CashRegisterLogCountOutputType
   */

  export type CashRegisterLogCountOutputType = {
    payments: number
  }

  export type CashRegisterLogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | CashRegisterLogCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * CashRegisterLogCountOutputType without action
   */
  export type CashRegisterLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLogCountOutputType
     */
    select?: CashRegisterLogCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CashRegisterLogCountOutputType without action
   */
  export type CashRegisterLogCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type NotificationTemplateCountOutputType
   */

  export type NotificationTemplateCountOutputType = {
    triggers: number
    queue: number
    history: number
  }

  export type NotificationTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggers?: boolean | NotificationTemplateCountOutputTypeCountTriggersArgs
    queue?: boolean | NotificationTemplateCountOutputTypeCountQueueArgs
    history?: boolean | NotificationTemplateCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * NotificationTemplateCountOutputType without action
   */
  export type NotificationTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplateCountOutputType
     */
    select?: NotificationTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationTemplateCountOutputType without action
   */
  export type NotificationTemplateCountOutputTypeCountTriggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTriggerWhereInput
  }

  /**
   * NotificationTemplateCountOutputType without action
   */
  export type NotificationTemplateCountOutputTypeCountQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationQueueWhereInput
  }

  /**
   * NotificationTemplateCountOutputType without action
   */
  export type NotificationTemplateCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationHistoryWhereInput
  }


  /**
   * Count Type NotificationTriggerCountOutputType
   */

  export type NotificationTriggerCountOutputType = {
    queue: number
    history: number
  }

  export type NotificationTriggerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    queue?: boolean | NotificationTriggerCountOutputTypeCountQueueArgs
    history?: boolean | NotificationTriggerCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * NotificationTriggerCountOutputType without action
   */
  export type NotificationTriggerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTriggerCountOutputType
     */
    select?: NotificationTriggerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationTriggerCountOutputType without action
   */
  export type NotificationTriggerCountOutputTypeCountQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationQueueWhereInput
  }

  /**
   * NotificationTriggerCountOutputType without action
   */
  export type NotificationTriggerCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    branchId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    CashRegisterLog?: boolean | User$CashRegisterLogArgs<ExtArgs>
    staffCommissionRules?: boolean | User$staffCommissionRulesArgs<ExtArgs>
    commissions?: boolean | User$commissionsArgs<ExtArgs>
    services?: boolean | User$servicesArgs<ExtArgs>
    branch?: boolean | User$branchArgs<ExtArgs>
    workHours?: boolean | User$workHoursArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | User$branchArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | User$branchArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "role" | "branchId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    CashRegisterLog?: boolean | User$CashRegisterLogArgs<ExtArgs>
    staffCommissionRules?: boolean | User$staffCommissionRulesArgs<ExtArgs>
    commissions?: boolean | User$commissionsArgs<ExtArgs>
    services?: boolean | User$servicesArgs<ExtArgs>
    branch?: boolean | User$branchArgs<ExtArgs>
    workHours?: boolean | User$workHoursArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | User$branchArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | User$branchArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      CashRegisterLog: Prisma.$CashRegisterLogPayload<ExtArgs>[]
      staffCommissionRules: Prisma.$CommissionRulePayload<ExtArgs>[]
      commissions: Prisma.$StaffCommissionPayload<ExtArgs>[]
      services: Prisma.$StaffServicePayload<ExtArgs>[]
      branch: Prisma.$BranchPayload<ExtArgs> | null
      workHours: Prisma.$WorkHourPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      role: $Enums.UserRole
      branchId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CashRegisterLog<T extends User$CashRegisterLogArgs<ExtArgs> = {}>(args?: Subset<T, User$CashRegisterLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staffCommissionRules<T extends User$staffCommissionRulesArgs<ExtArgs> = {}>(args?: Subset<T, User$staffCommissionRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commissions<T extends User$commissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$commissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    services<T extends User$servicesArgs<ExtArgs> = {}>(args?: Subset<T, User$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    branch<T extends User$branchArgs<ExtArgs> = {}>(args?: Subset<T, User$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workHours<T extends User$workHoursArgs<ExtArgs> = {}>(args?: Subset<T, User$workHoursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly branchId: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.CashRegisterLog
   */
  export type User$CashRegisterLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    where?: CashRegisterLogWhereInput
    orderBy?: CashRegisterLogOrderByWithRelationInput | CashRegisterLogOrderByWithRelationInput[]
    cursor?: CashRegisterLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashRegisterLogScalarFieldEnum | CashRegisterLogScalarFieldEnum[]
  }

  /**
   * User.staffCommissionRules
   */
  export type User$staffCommissionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    where?: CommissionRuleWhereInput
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    cursor?: CommissionRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommissionRuleScalarFieldEnum | CommissionRuleScalarFieldEnum[]
  }

  /**
   * User.commissions
   */
  export type User$commissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    where?: StaffCommissionWhereInput
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    cursor?: StaffCommissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * User.services
   */
  export type User$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    where?: StaffServiceWhereInput
    orderBy?: StaffServiceOrderByWithRelationInput | StaffServiceOrderByWithRelationInput[]
    cursor?: StaffServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffServiceScalarFieldEnum | StaffServiceScalarFieldEnum[]
  }

  /**
   * User.branch
   */
  export type User$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * User.workHours
   */
  export type User$workHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    where?: WorkHourWhereInput
    orderBy?: WorkHourOrderByWithRelationInput | WorkHourOrderByWithRelationInput[]
    cursor?: WorkHourWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkHourScalarFieldEnum | WorkHourScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WorkHour
   */

  export type AggregateWorkHour = {
    _count: WorkHourCountAggregateOutputType | null
    _avg: WorkHourAvgAggregateOutputType | null
    _sum: WorkHourSumAggregateOutputType | null
    _min: WorkHourMinAggregateOutputType | null
    _max: WorkHourMaxAggregateOutputType | null
  }

  export type WorkHourAvgAggregateOutputType = {
    dayOfWeek: number | null
  }

  export type WorkHourSumAggregateOutputType = {
    dayOfWeek: number | null
  }

  export type WorkHourMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    branchId: string | null
    dayOfWeek: number | null
    startTime: string | null
    endTime: string | null
    isOff: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkHourMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    branchId: string | null
    dayOfWeek: number | null
    startTime: string | null
    endTime: string | null
    isOff: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkHourCountAggregateOutputType = {
    id: number
    staffId: number
    branchId: number
    dayOfWeek: number
    startTime: number
    endTime: number
    isOff: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkHourAvgAggregateInputType = {
    dayOfWeek?: true
  }

  export type WorkHourSumAggregateInputType = {
    dayOfWeek?: true
  }

  export type WorkHourMinAggregateInputType = {
    id?: true
    staffId?: true
    branchId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    isOff?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkHourMaxAggregateInputType = {
    id?: true
    staffId?: true
    branchId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    isOff?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkHourCountAggregateInputType = {
    id?: true
    staffId?: true
    branchId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    isOff?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkHourAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkHour to aggregate.
     */
    where?: WorkHourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHours to fetch.
     */
    orderBy?: WorkHourOrderByWithRelationInput | WorkHourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkHourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkHours
    **/
    _count?: true | WorkHourCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkHourAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkHourSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkHourMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkHourMaxAggregateInputType
  }

  export type GetWorkHourAggregateType<T extends WorkHourAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkHour]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkHour[P]>
      : GetScalarType<T[P], AggregateWorkHour[P]>
  }




  export type WorkHourGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkHourWhereInput
    orderBy?: WorkHourOrderByWithAggregationInput | WorkHourOrderByWithAggregationInput[]
    by: WorkHourScalarFieldEnum[] | WorkHourScalarFieldEnum
    having?: WorkHourScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkHourCountAggregateInputType | true
    _avg?: WorkHourAvgAggregateInputType
    _sum?: WorkHourSumAggregateInputType
    _min?: WorkHourMinAggregateInputType
    _max?: WorkHourMaxAggregateInputType
  }

  export type WorkHourGroupByOutputType = {
    id: string
    staffId: string
    branchId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff: boolean
    createdAt: Date
    updatedAt: Date
    _count: WorkHourCountAggregateOutputType | null
    _avg: WorkHourAvgAggregateOutputType | null
    _sum: WorkHourSumAggregateOutputType | null
    _min: WorkHourMinAggregateOutputType | null
    _max: WorkHourMaxAggregateOutputType | null
  }

  type GetWorkHourGroupByPayload<T extends WorkHourGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkHourGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkHourGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkHourGroupByOutputType[P]>
            : GetScalarType<T[P], WorkHourGroupByOutputType[P]>
        }
      >
    >


  export type WorkHourSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    branchId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    isOff?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workHour"]>

  export type WorkHourSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    branchId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    isOff?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workHour"]>

  export type WorkHourSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    branchId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    isOff?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workHour"]>

  export type WorkHourSelectScalar = {
    id?: boolean
    staffId?: boolean
    branchId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    isOff?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkHourOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "staffId" | "branchId" | "dayOfWeek" | "startTime" | "endTime" | "isOff" | "createdAt" | "updatedAt", ExtArgs["result"]["workHour"]>
  export type WorkHourInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkHourIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkHourIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkHourPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkHour"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      staff: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      branchId: string
      dayOfWeek: number
      startTime: string
      endTime: string
      isOff: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workHour"]>
    composites: {}
  }

  type WorkHourGetPayload<S extends boolean | null | undefined | WorkHourDefaultArgs> = $Result.GetResult<Prisma.$WorkHourPayload, S>

  type WorkHourCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkHourFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkHourCountAggregateInputType | true
    }

  export interface WorkHourDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkHour'], meta: { name: 'WorkHour' } }
    /**
     * Find zero or one WorkHour that matches the filter.
     * @param {WorkHourFindUniqueArgs} args - Arguments to find a WorkHour
     * @example
     * // Get one WorkHour
     * const workHour = await prisma.workHour.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkHourFindUniqueArgs>(args: SelectSubset<T, WorkHourFindUniqueArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkHour that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkHourFindUniqueOrThrowArgs} args - Arguments to find a WorkHour
     * @example
     * // Get one WorkHour
     * const workHour = await prisma.workHour.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkHourFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkHourFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkHour that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourFindFirstArgs} args - Arguments to find a WorkHour
     * @example
     * // Get one WorkHour
     * const workHour = await prisma.workHour.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkHourFindFirstArgs>(args?: SelectSubset<T, WorkHourFindFirstArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkHour that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourFindFirstOrThrowArgs} args - Arguments to find a WorkHour
     * @example
     * // Get one WorkHour
     * const workHour = await prisma.workHour.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkHourFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkHourFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkHours
     * const workHours = await prisma.workHour.findMany()
     * 
     * // Get first 10 WorkHours
     * const workHours = await prisma.workHour.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workHourWithIdOnly = await prisma.workHour.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkHourFindManyArgs>(args?: SelectSubset<T, WorkHourFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkHour.
     * @param {WorkHourCreateArgs} args - Arguments to create a WorkHour.
     * @example
     * // Create one WorkHour
     * const WorkHour = await prisma.workHour.create({
     *   data: {
     *     // ... data to create a WorkHour
     *   }
     * })
     * 
     */
    create<T extends WorkHourCreateArgs>(args: SelectSubset<T, WorkHourCreateArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkHours.
     * @param {WorkHourCreateManyArgs} args - Arguments to create many WorkHours.
     * @example
     * // Create many WorkHours
     * const workHour = await prisma.workHour.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkHourCreateManyArgs>(args?: SelectSubset<T, WorkHourCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkHours and returns the data saved in the database.
     * @param {WorkHourCreateManyAndReturnArgs} args - Arguments to create many WorkHours.
     * @example
     * // Create many WorkHours
     * const workHour = await prisma.workHour.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkHours and only return the `id`
     * const workHourWithIdOnly = await prisma.workHour.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkHourCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkHourCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkHour.
     * @param {WorkHourDeleteArgs} args - Arguments to delete one WorkHour.
     * @example
     * // Delete one WorkHour
     * const WorkHour = await prisma.workHour.delete({
     *   where: {
     *     // ... filter to delete one WorkHour
     *   }
     * })
     * 
     */
    delete<T extends WorkHourDeleteArgs>(args: SelectSubset<T, WorkHourDeleteArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkHour.
     * @param {WorkHourUpdateArgs} args - Arguments to update one WorkHour.
     * @example
     * // Update one WorkHour
     * const workHour = await prisma.workHour.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkHourUpdateArgs>(args: SelectSubset<T, WorkHourUpdateArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkHours.
     * @param {WorkHourDeleteManyArgs} args - Arguments to filter WorkHours to delete.
     * @example
     * // Delete a few WorkHours
     * const { count } = await prisma.workHour.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkHourDeleteManyArgs>(args?: SelectSubset<T, WorkHourDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkHours
     * const workHour = await prisma.workHour.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkHourUpdateManyArgs>(args: SelectSubset<T, WorkHourUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkHours and returns the data updated in the database.
     * @param {WorkHourUpdateManyAndReturnArgs} args - Arguments to update many WorkHours.
     * @example
     * // Update many WorkHours
     * const workHour = await prisma.workHour.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkHours and only return the `id`
     * const workHourWithIdOnly = await prisma.workHour.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkHourUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkHourUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkHour.
     * @param {WorkHourUpsertArgs} args - Arguments to update or create a WorkHour.
     * @example
     * // Update or create a WorkHour
     * const workHour = await prisma.workHour.upsert({
     *   create: {
     *     // ... data to create a WorkHour
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkHour we want to update
     *   }
     * })
     */
    upsert<T extends WorkHourUpsertArgs>(args: SelectSubset<T, WorkHourUpsertArgs<ExtArgs>>): Prisma__WorkHourClient<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourCountArgs} args - Arguments to filter WorkHours to count.
     * @example
     * // Count the number of WorkHours
     * const count = await prisma.workHour.count({
     *   where: {
     *     // ... the filter for the WorkHours we want to count
     *   }
     * })
    **/
    count<T extends WorkHourCountArgs>(
      args?: Subset<T, WorkHourCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkHourCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkHour.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkHourAggregateArgs>(args: Subset<T, WorkHourAggregateArgs>): Prisma.PrismaPromise<GetWorkHourAggregateType<T>>

    /**
     * Group by WorkHour.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHourGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkHourGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkHourGroupByArgs['orderBy'] }
        : { orderBy?: WorkHourGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkHourGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkHourGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkHour model
   */
  readonly fields: WorkHourFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkHour.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkHourClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkHour model
   */
  interface WorkHourFieldRefs {
    readonly id: FieldRef<"WorkHour", 'String'>
    readonly staffId: FieldRef<"WorkHour", 'String'>
    readonly branchId: FieldRef<"WorkHour", 'String'>
    readonly dayOfWeek: FieldRef<"WorkHour", 'Int'>
    readonly startTime: FieldRef<"WorkHour", 'String'>
    readonly endTime: FieldRef<"WorkHour", 'String'>
    readonly isOff: FieldRef<"WorkHour", 'Boolean'>
    readonly createdAt: FieldRef<"WorkHour", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkHour", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkHour findUnique
   */
  export type WorkHourFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * Filter, which WorkHour to fetch.
     */
    where: WorkHourWhereUniqueInput
  }

  /**
   * WorkHour findUniqueOrThrow
   */
  export type WorkHourFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * Filter, which WorkHour to fetch.
     */
    where: WorkHourWhereUniqueInput
  }

  /**
   * WorkHour findFirst
   */
  export type WorkHourFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * Filter, which WorkHour to fetch.
     */
    where?: WorkHourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHours to fetch.
     */
    orderBy?: WorkHourOrderByWithRelationInput | WorkHourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkHours.
     */
    cursor?: WorkHourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkHours.
     */
    distinct?: WorkHourScalarFieldEnum | WorkHourScalarFieldEnum[]
  }

  /**
   * WorkHour findFirstOrThrow
   */
  export type WorkHourFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * Filter, which WorkHour to fetch.
     */
    where?: WorkHourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHours to fetch.
     */
    orderBy?: WorkHourOrderByWithRelationInput | WorkHourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkHours.
     */
    cursor?: WorkHourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkHours.
     */
    distinct?: WorkHourScalarFieldEnum | WorkHourScalarFieldEnum[]
  }

  /**
   * WorkHour findMany
   */
  export type WorkHourFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * Filter, which WorkHours to fetch.
     */
    where?: WorkHourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHours to fetch.
     */
    orderBy?: WorkHourOrderByWithRelationInput | WorkHourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkHours.
     */
    cursor?: WorkHourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHours.
     */
    skip?: number
    distinct?: WorkHourScalarFieldEnum | WorkHourScalarFieldEnum[]
  }

  /**
   * WorkHour create
   */
  export type WorkHourCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkHour.
     */
    data: XOR<WorkHourCreateInput, WorkHourUncheckedCreateInput>
  }

  /**
   * WorkHour createMany
   */
  export type WorkHourCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkHours.
     */
    data: WorkHourCreateManyInput | WorkHourCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkHour createManyAndReturn
   */
  export type WorkHourCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * The data used to create many WorkHours.
     */
    data: WorkHourCreateManyInput | WorkHourCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkHour update
   */
  export type WorkHourUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkHour.
     */
    data: XOR<WorkHourUpdateInput, WorkHourUncheckedUpdateInput>
    /**
     * Choose, which WorkHour to update.
     */
    where: WorkHourWhereUniqueInput
  }

  /**
   * WorkHour updateMany
   */
  export type WorkHourUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkHours.
     */
    data: XOR<WorkHourUpdateManyMutationInput, WorkHourUncheckedUpdateManyInput>
    /**
     * Filter which WorkHours to update
     */
    where?: WorkHourWhereInput
    /**
     * Limit how many WorkHours to update.
     */
    limit?: number
  }

  /**
   * WorkHour updateManyAndReturn
   */
  export type WorkHourUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * The data used to update WorkHours.
     */
    data: XOR<WorkHourUpdateManyMutationInput, WorkHourUncheckedUpdateManyInput>
    /**
     * Filter which WorkHours to update
     */
    where?: WorkHourWhereInput
    /**
     * Limit how many WorkHours to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkHour upsert
   */
  export type WorkHourUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkHour to update in case it exists.
     */
    where: WorkHourWhereUniqueInput
    /**
     * In case the WorkHour found by the `where` argument doesn't exist, create a new WorkHour with this data.
     */
    create: XOR<WorkHourCreateInput, WorkHourUncheckedCreateInput>
    /**
     * In case the WorkHour was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkHourUpdateInput, WorkHourUncheckedUpdateInput>
  }

  /**
   * WorkHour delete
   */
  export type WorkHourDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    /**
     * Filter which WorkHour to delete.
     */
    where: WorkHourWhereUniqueInput
  }

  /**
   * WorkHour deleteMany
   */
  export type WorkHourDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkHours to delete
     */
    where?: WorkHourWhereInput
    /**
     * Limit how many WorkHours to delete.
     */
    limit?: number
  }

  /**
   * WorkHour without action
   */
  export type WorkHourDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
  }


  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    phone: string | null
    description: string | null
    parentBranchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BranchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    phone: string | null
    description: string | null
    parentBranchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BranchCountAggregateOutputType = {
    id: number
    name: number
    address: number
    phone: number
    description: number
    parentBranchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BranchMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    description?: true
    parentBranchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BranchMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    description?: true
    parentBranchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BranchCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    description?: true
    parentBranchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    id: string
    name: string
    address: string | null
    phone: string | null
    description: string | null
    parentBranchId: string | null
    createdAt: Date
    updatedAt: Date
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    description?: boolean
    parentBranchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointments?: boolean | Branch$appointmentsArgs<ExtArgs>
    parentBranch?: boolean | Branch$parentBranchArgs<ExtArgs>
    subBranches?: boolean | Branch$subBranchesArgs<ExtArgs>
    users?: boolean | Branch$usersArgs<ExtArgs>
    services?: boolean | Branch$servicesArgs<ExtArgs>
    packages?: boolean | Branch$packagesArgs<ExtArgs>
    invoices?: boolean | Branch$invoicesArgs<ExtArgs>
    customers?: boolean | Branch$customersArgs<ExtArgs>
    workHours?: boolean | Branch$workHoursArgs<ExtArgs>
    CashRegisterLog?: boolean | Branch$CashRegisterLogArgs<ExtArgs>
    commissionRules?: boolean | Branch$commissionRulesArgs<ExtArgs>
    serviceCategories?: boolean | Branch$serviceCategoriesArgs<ExtArgs>
    notificationProviders?: boolean | Branch$notificationProvidersArgs<ExtArgs>
    notificationTemplates?: boolean | Branch$notificationTemplatesArgs<ExtArgs>
    notificationTriggers?: boolean | Branch$notificationTriggersArgs<ExtArgs>
    notificationQueue?: boolean | Branch$notificationQueueArgs<ExtArgs>
    notificationHistory?: boolean | Branch$notificationHistoryArgs<ExtArgs>
    notificationSettings?: boolean | Branch$notificationSettingsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    description?: boolean
    parentBranchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentBranch?: boolean | Branch$parentBranchArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    description?: boolean
    parentBranchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentBranch?: boolean | Branch$parentBranchArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    description?: boolean
    parentBranchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BranchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "phone" | "description" | "parentBranchId" | "createdAt" | "updatedAt", ExtArgs["result"]["branch"]>
  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | Branch$appointmentsArgs<ExtArgs>
    parentBranch?: boolean | Branch$parentBranchArgs<ExtArgs>
    subBranches?: boolean | Branch$subBranchesArgs<ExtArgs>
    users?: boolean | Branch$usersArgs<ExtArgs>
    services?: boolean | Branch$servicesArgs<ExtArgs>
    packages?: boolean | Branch$packagesArgs<ExtArgs>
    invoices?: boolean | Branch$invoicesArgs<ExtArgs>
    customers?: boolean | Branch$customersArgs<ExtArgs>
    workHours?: boolean | Branch$workHoursArgs<ExtArgs>
    CashRegisterLog?: boolean | Branch$CashRegisterLogArgs<ExtArgs>
    commissionRules?: boolean | Branch$commissionRulesArgs<ExtArgs>
    serviceCategories?: boolean | Branch$serviceCategoriesArgs<ExtArgs>
    notificationProviders?: boolean | Branch$notificationProvidersArgs<ExtArgs>
    notificationTemplates?: boolean | Branch$notificationTemplatesArgs<ExtArgs>
    notificationTriggers?: boolean | Branch$notificationTriggersArgs<ExtArgs>
    notificationQueue?: boolean | Branch$notificationQueueArgs<ExtArgs>
    notificationHistory?: boolean | Branch$notificationHistoryArgs<ExtArgs>
    notificationSettings?: boolean | Branch$notificationSettingsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BranchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentBranch?: boolean | Branch$parentBranchArgs<ExtArgs>
  }
  export type BranchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentBranch?: boolean | Branch$parentBranchArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      parentBranch: Prisma.$BranchPayload<ExtArgs> | null
      subBranches: Prisma.$BranchPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      services: Prisma.$ServicePayload<ExtArgs>[]
      packages: Prisma.$PackagePayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
      workHours: Prisma.$WorkHourPayload<ExtArgs>[]
      CashRegisterLog: Prisma.$CashRegisterLogPayload<ExtArgs>[]
      commissionRules: Prisma.$CommissionRulePayload<ExtArgs>[]
      serviceCategories: Prisma.$ServiceCategoryPayload<ExtArgs>[]
      notificationProviders: Prisma.$NotificationProviderPayload<ExtArgs>[]
      notificationTemplates: Prisma.$NotificationTemplatePayload<ExtArgs>[]
      notificationTriggers: Prisma.$NotificationTriggerPayload<ExtArgs>[]
      notificationQueue: Prisma.$NotificationQueuePayload<ExtArgs>[]
      notificationHistory: Prisma.$NotificationHistoryPayload<ExtArgs>[]
      notificationSettings: Prisma.$NotificationSettingsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      phone: string | null
      description: string | null
      parentBranchId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchWithIdOnly = await prisma.branch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Branches and returns the data saved in the database.
     * @param {BranchCreateManyAndReturnArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BranchCreateManyAndReturnArgs>(args?: SelectSubset<T, BranchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches and returns the data updated in the database.
     * @param {BranchUpdateManyAndReturnArgs} args - Arguments to update many Branches.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BranchUpdateManyAndReturnArgs>(args: SelectSubset<T, BranchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointments<T extends Branch$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    parentBranch<T extends Branch$parentBranchArgs<ExtArgs> = {}>(args?: Subset<T, Branch$parentBranchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subBranches<T extends Branch$subBranchesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$subBranchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Branch$usersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    services<T extends Branch$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    packages<T extends Branch$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Branch$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customers<T extends Branch$customersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workHours<T extends Branch$workHoursArgs<ExtArgs> = {}>(args?: Subset<T, Branch$workHoursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CashRegisterLog<T extends Branch$CashRegisterLogArgs<ExtArgs> = {}>(args?: Subset<T, Branch$CashRegisterLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commissionRules<T extends Branch$commissionRulesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$commissionRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    serviceCategories<T extends Branch$serviceCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$serviceCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationProviders<T extends Branch$notificationProvidersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$notificationProvidersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationTemplates<T extends Branch$notificationTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$notificationTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationTriggers<T extends Branch$notificationTriggersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$notificationTriggersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationQueue<T extends Branch$notificationQueueArgs<ExtArgs> = {}>(args?: Subset<T, Branch$notificationQueueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationHistory<T extends Branch$notificationHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Branch$notificationHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationSettings<T extends Branch$notificationSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$notificationSettingsArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */
  interface BranchFieldRefs {
    readonly id: FieldRef<"Branch", 'String'>
    readonly name: FieldRef<"Branch", 'String'>
    readonly address: FieldRef<"Branch", 'String'>
    readonly phone: FieldRef<"Branch", 'String'>
    readonly description: FieldRef<"Branch", 'String'>
    readonly parentBranchId: FieldRef<"Branch", 'String'>
    readonly createdAt: FieldRef<"Branch", 'DateTime'>
    readonly updatedAt: FieldRef<"Branch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch createManyAndReturn
   */
  export type BranchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
  }

  /**
   * Branch updateManyAndReturn
   */
  export type BranchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to delete.
     */
    limit?: number
  }

  /**
   * Branch.appointments
   */
  export type Branch$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Branch.parentBranch
   */
  export type Branch$parentBranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * Branch.subBranches
   */
  export type Branch$subBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    cursor?: BranchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch.users
   */
  export type Branch$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Branch.services
   */
  export type Branch$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Branch.packages
   */
  export type Branch$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Branch.invoices
   */
  export type Branch$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Branch.customers
   */
  export type Branch$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Branch.workHours
   */
  export type Branch$workHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHour
     */
    select?: WorkHourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHour
     */
    omit?: WorkHourOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHourInclude<ExtArgs> | null
    where?: WorkHourWhereInput
    orderBy?: WorkHourOrderByWithRelationInput | WorkHourOrderByWithRelationInput[]
    cursor?: WorkHourWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkHourScalarFieldEnum | WorkHourScalarFieldEnum[]
  }

  /**
   * Branch.CashRegisterLog
   */
  export type Branch$CashRegisterLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    where?: CashRegisterLogWhereInput
    orderBy?: CashRegisterLogOrderByWithRelationInput | CashRegisterLogOrderByWithRelationInput[]
    cursor?: CashRegisterLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashRegisterLogScalarFieldEnum | CashRegisterLogScalarFieldEnum[]
  }

  /**
   * Branch.commissionRules
   */
  export type Branch$commissionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    where?: CommissionRuleWhereInput
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    cursor?: CommissionRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommissionRuleScalarFieldEnum | CommissionRuleScalarFieldEnum[]
  }

  /**
   * Branch.serviceCategories
   */
  export type Branch$serviceCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    where?: ServiceCategoryWhereInput
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    cursor?: ServiceCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * Branch.notificationProviders
   */
  export type Branch$notificationProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    where?: NotificationProviderWhereInput
    orderBy?: NotificationProviderOrderByWithRelationInput | NotificationProviderOrderByWithRelationInput[]
    cursor?: NotificationProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationProviderScalarFieldEnum | NotificationProviderScalarFieldEnum[]
  }

  /**
   * Branch.notificationTemplates
   */
  export type Branch$notificationTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    where?: NotificationTemplateWhereInput
    orderBy?: NotificationTemplateOrderByWithRelationInput | NotificationTemplateOrderByWithRelationInput[]
    cursor?: NotificationTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationTemplateScalarFieldEnum | NotificationTemplateScalarFieldEnum[]
  }

  /**
   * Branch.notificationTriggers
   */
  export type Branch$notificationTriggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    where?: NotificationTriggerWhereInput
    orderBy?: NotificationTriggerOrderByWithRelationInput | NotificationTriggerOrderByWithRelationInput[]
    cursor?: NotificationTriggerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationTriggerScalarFieldEnum | NotificationTriggerScalarFieldEnum[]
  }

  /**
   * Branch.notificationQueue
   */
  export type Branch$notificationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    where?: NotificationQueueWhereInput
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    cursor?: NotificationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * Branch.notificationHistory
   */
  export type Branch$notificationHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    where?: NotificationHistoryWhereInput
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    cursor?: NotificationHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * Branch.notificationSettings
   */
  export type Branch$notificationSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    where?: NotificationSettingsWhereInput
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    discountRate: number | null
    creditBalance: number | null
  }

  export type CustomerSumAggregateOutputType = {
    discountRate: number | null
    creditBalance: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    notes: string | null
    branchId: string | null
    discountRate: number | null
    creditBalance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    notes: string | null
    branchId: string | null
    discountRate: number | null
    creditBalance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    notes: number
    branchId: number
    discountRate: number
    creditBalance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    discountRate?: true
    creditBalance?: true
  }

  export type CustomerSumAggregateInputType = {
    discountRate?: true
    creditBalance?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    notes?: true
    branchId?: true
    discountRate?: true
    creditBalance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    notes?: true
    branchId?: true
    discountRate?: true
    creditBalance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    notes?: true
    branchId?: true
    discountRate?: true
    creditBalance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    name: string
    phone: string | null
    email: string | null
    notes: string | null
    branchId: string
    discountRate: number
    creditBalance: number
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    notes?: boolean
    branchId?: boolean
    discountRate?: boolean
    creditBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointments?: boolean | Customer$appointmentsArgs<ExtArgs>
    packages?: boolean | Customer$packagesArgs<ExtArgs>
    invoices?: boolean | Customer$invoicesArgs<ExtArgs>
    tags?: boolean | Customer$tagsArgs<ExtArgs>
    notificationQueue?: boolean | Customer$notificationQueueArgs<ExtArgs>
    notificationHistory?: boolean | Customer$notificationHistoryArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    notes?: boolean
    branchId?: boolean
    discountRate?: boolean
    creditBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    notes?: boolean
    branchId?: boolean
    discountRate?: boolean
    creditBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    notes?: boolean
    branchId?: boolean
    discountRate?: boolean
    creditBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "phone" | "email" | "notes" | "branchId" | "discountRate" | "creditBalance" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointments?: boolean | Customer$appointmentsArgs<ExtArgs>
    packages?: boolean | Customer$packagesArgs<ExtArgs>
    invoices?: boolean | Customer$invoicesArgs<ExtArgs>
    tags?: boolean | Customer$tagsArgs<ExtArgs>
    notificationQueue?: boolean | Customer$notificationQueueArgs<ExtArgs>
    notificationHistory?: boolean | Customer$notificationHistoryArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      packages: Prisma.$CustomerPackagePayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      tags: Prisma.$CustomerTagPayload<ExtArgs>[]
      notificationQueue: Prisma.$NotificationQueuePayload<ExtArgs>[]
      notificationHistory: Prisma.$NotificationHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      phone: string | null
      email: string | null
      notes: string | null
      branchId: string
      discountRate: number
      creditBalance: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointments<T extends Customer$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    packages<T extends Customer$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Customer$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tags<T extends Customer$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationQueue<T extends Customer$notificationQueueArgs<ExtArgs> = {}>(args?: Subset<T, Customer$notificationQueueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationHistory<T extends Customer$notificationHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Customer$notificationHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly notes: FieldRef<"Customer", 'String'>
    readonly branchId: FieldRef<"Customer", 'String'>
    readonly discountRate: FieldRef<"Customer", 'Float'>
    readonly creditBalance: FieldRef<"Customer", 'Float'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.appointments
   */
  export type Customer$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Customer.packages
   */
  export type Customer$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    where?: CustomerPackageWhereInput
    orderBy?: CustomerPackageOrderByWithRelationInput | CustomerPackageOrderByWithRelationInput[]
    cursor?: CustomerPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerPackageScalarFieldEnum | CustomerPackageScalarFieldEnum[]
  }

  /**
   * Customer.invoices
   */
  export type Customer$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Customer.tags
   */
  export type Customer$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    where?: CustomerTagWhereInput
    orderBy?: CustomerTagOrderByWithRelationInput | CustomerTagOrderByWithRelationInput[]
    cursor?: CustomerTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerTagScalarFieldEnum | CustomerTagScalarFieldEnum[]
  }

  /**
   * Customer.notificationQueue
   */
  export type Customer$notificationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    where?: NotificationQueueWhereInput
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    cursor?: NotificationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * Customer.notificationHistory
   */
  export type Customer$notificationHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    where?: NotificationHistoryWhereInput
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    cursor?: NotificationHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    color: string
    createdAt: Date
    updatedAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customers?: boolean | Tag$customersArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "color" | "createdAt" | "updatedAt", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customers?: boolean | Tag$customersArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      customers: Prisma.$CustomerTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      color: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customers<T extends Tag$customersArgs<ExtArgs> = {}>(args?: Subset<T, Tag$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly color: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.customers
   */
  export type Tag$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    where?: CustomerTagWhereInput
    orderBy?: CustomerTagOrderByWithRelationInput | CustomerTagOrderByWithRelationInput[]
    cursor?: CustomerTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerTagScalarFieldEnum | CustomerTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model CustomerTag
   */

  export type AggregateCustomerTag = {
    _count: CustomerTagCountAggregateOutputType | null
    _min: CustomerTagMinAggregateOutputType | null
    _max: CustomerTagMaxAggregateOutputType | null
  }

  export type CustomerTagMinAggregateOutputType = {
    customerId: string | null
    tagId: string | null
  }

  export type CustomerTagMaxAggregateOutputType = {
    customerId: string | null
    tagId: string | null
  }

  export type CustomerTagCountAggregateOutputType = {
    customerId: number
    tagId: number
    _all: number
  }


  export type CustomerTagMinAggregateInputType = {
    customerId?: true
    tagId?: true
  }

  export type CustomerTagMaxAggregateInputType = {
    customerId?: true
    tagId?: true
  }

  export type CustomerTagCountAggregateInputType = {
    customerId?: true
    tagId?: true
    _all?: true
  }

  export type CustomerTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerTag to aggregate.
     */
    where?: CustomerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTags to fetch.
     */
    orderBy?: CustomerTagOrderByWithRelationInput | CustomerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerTags
    **/
    _count?: true | CustomerTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerTagMaxAggregateInputType
  }

  export type GetCustomerTagAggregateType<T extends CustomerTagAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerTag[P]>
      : GetScalarType<T[P], AggregateCustomerTag[P]>
  }




  export type CustomerTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerTagWhereInput
    orderBy?: CustomerTagOrderByWithAggregationInput | CustomerTagOrderByWithAggregationInput[]
    by: CustomerTagScalarFieldEnum[] | CustomerTagScalarFieldEnum
    having?: CustomerTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerTagCountAggregateInputType | true
    _min?: CustomerTagMinAggregateInputType
    _max?: CustomerTagMaxAggregateInputType
  }

  export type CustomerTagGroupByOutputType = {
    customerId: string
    tagId: string
    _count: CustomerTagCountAggregateOutputType | null
    _min: CustomerTagMinAggregateOutputType | null
    _max: CustomerTagMaxAggregateOutputType | null
  }

  type GetCustomerTagGroupByPayload<T extends CustomerTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerTagGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerTagGroupByOutputType[P]>
        }
      >
    >


  export type CustomerTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    tagId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerTag"]>

  export type CustomerTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    tagId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerTag"]>

  export type CustomerTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customerId?: boolean
    tagId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerTag"]>

  export type CustomerTagSelectScalar = {
    customerId?: boolean
    tagId?: boolean
  }

  export type CustomerTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"customerId" | "tagId", ExtArgs["result"]["customerTag"]>
  export type CustomerTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type CustomerTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type CustomerTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $CustomerTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerTag"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      customerId: string
      tagId: string
    }, ExtArgs["result"]["customerTag"]>
    composites: {}
  }

  type CustomerTagGetPayload<S extends boolean | null | undefined | CustomerTagDefaultArgs> = $Result.GetResult<Prisma.$CustomerTagPayload, S>

  type CustomerTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerTagCountAggregateInputType | true
    }

  export interface CustomerTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerTag'], meta: { name: 'CustomerTag' } }
    /**
     * Find zero or one CustomerTag that matches the filter.
     * @param {CustomerTagFindUniqueArgs} args - Arguments to find a CustomerTag
     * @example
     * // Get one CustomerTag
     * const customerTag = await prisma.customerTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerTagFindUniqueArgs>(args: SelectSubset<T, CustomerTagFindUniqueArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerTagFindUniqueOrThrowArgs} args - Arguments to find a CustomerTag
     * @example
     * // Get one CustomerTag
     * const customerTag = await prisma.customerTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerTagFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagFindFirstArgs} args - Arguments to find a CustomerTag
     * @example
     * // Get one CustomerTag
     * const customerTag = await prisma.customerTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerTagFindFirstArgs>(args?: SelectSubset<T, CustomerTagFindFirstArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagFindFirstOrThrowArgs} args - Arguments to find a CustomerTag
     * @example
     * // Get one CustomerTag
     * const customerTag = await prisma.customerTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerTagFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerTags
     * const customerTags = await prisma.customerTag.findMany()
     * 
     * // Get first 10 CustomerTags
     * const customerTags = await prisma.customerTag.findMany({ take: 10 })
     * 
     * // Only select the `customerId`
     * const customerTagWithCustomerIdOnly = await prisma.customerTag.findMany({ select: { customerId: true } })
     * 
     */
    findMany<T extends CustomerTagFindManyArgs>(args?: SelectSubset<T, CustomerTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerTag.
     * @param {CustomerTagCreateArgs} args - Arguments to create a CustomerTag.
     * @example
     * // Create one CustomerTag
     * const CustomerTag = await prisma.customerTag.create({
     *   data: {
     *     // ... data to create a CustomerTag
     *   }
     * })
     * 
     */
    create<T extends CustomerTagCreateArgs>(args: SelectSubset<T, CustomerTagCreateArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerTags.
     * @param {CustomerTagCreateManyArgs} args - Arguments to create many CustomerTags.
     * @example
     * // Create many CustomerTags
     * const customerTag = await prisma.customerTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerTagCreateManyArgs>(args?: SelectSubset<T, CustomerTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerTags and returns the data saved in the database.
     * @param {CustomerTagCreateManyAndReturnArgs} args - Arguments to create many CustomerTags.
     * @example
     * // Create many CustomerTags
     * const customerTag = await prisma.customerTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerTags and only return the `customerId`
     * const customerTagWithCustomerIdOnly = await prisma.customerTag.createManyAndReturn({
     *   select: { customerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerTagCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerTag.
     * @param {CustomerTagDeleteArgs} args - Arguments to delete one CustomerTag.
     * @example
     * // Delete one CustomerTag
     * const CustomerTag = await prisma.customerTag.delete({
     *   where: {
     *     // ... filter to delete one CustomerTag
     *   }
     * })
     * 
     */
    delete<T extends CustomerTagDeleteArgs>(args: SelectSubset<T, CustomerTagDeleteArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerTag.
     * @param {CustomerTagUpdateArgs} args - Arguments to update one CustomerTag.
     * @example
     * // Update one CustomerTag
     * const customerTag = await prisma.customerTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerTagUpdateArgs>(args: SelectSubset<T, CustomerTagUpdateArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerTags.
     * @param {CustomerTagDeleteManyArgs} args - Arguments to filter CustomerTags to delete.
     * @example
     * // Delete a few CustomerTags
     * const { count } = await prisma.customerTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerTagDeleteManyArgs>(args?: SelectSubset<T, CustomerTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerTags
     * const customerTag = await prisma.customerTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerTagUpdateManyArgs>(args: SelectSubset<T, CustomerTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerTags and returns the data updated in the database.
     * @param {CustomerTagUpdateManyAndReturnArgs} args - Arguments to update many CustomerTags.
     * @example
     * // Update many CustomerTags
     * const customerTag = await prisma.customerTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerTags and only return the `customerId`
     * const customerTagWithCustomerIdOnly = await prisma.customerTag.updateManyAndReturn({
     *   select: { customerId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerTagUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerTag.
     * @param {CustomerTagUpsertArgs} args - Arguments to update or create a CustomerTag.
     * @example
     * // Update or create a CustomerTag
     * const customerTag = await prisma.customerTag.upsert({
     *   create: {
     *     // ... data to create a CustomerTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerTag we want to update
     *   }
     * })
     */
    upsert<T extends CustomerTagUpsertArgs>(args: SelectSubset<T, CustomerTagUpsertArgs<ExtArgs>>): Prisma__CustomerTagClient<$Result.GetResult<Prisma.$CustomerTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagCountArgs} args - Arguments to filter CustomerTags to count.
     * @example
     * // Count the number of CustomerTags
     * const count = await prisma.customerTag.count({
     *   where: {
     *     // ... the filter for the CustomerTags we want to count
     *   }
     * })
    **/
    count<T extends CustomerTagCountArgs>(
      args?: Subset<T, CustomerTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerTagAggregateArgs>(args: Subset<T, CustomerTagAggregateArgs>): Prisma.PrismaPromise<GetCustomerTagAggregateType<T>>

    /**
     * Group by CustomerTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerTagGroupByArgs['orderBy'] }
        : { orderBy?: CustomerTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerTag model
   */
  readonly fields: CustomerTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerTag model
   */
  interface CustomerTagFieldRefs {
    readonly customerId: FieldRef<"CustomerTag", 'String'>
    readonly tagId: FieldRef<"CustomerTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CustomerTag findUnique
   */
  export type CustomerTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTag to fetch.
     */
    where: CustomerTagWhereUniqueInput
  }

  /**
   * CustomerTag findUniqueOrThrow
   */
  export type CustomerTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTag to fetch.
     */
    where: CustomerTagWhereUniqueInput
  }

  /**
   * CustomerTag findFirst
   */
  export type CustomerTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTag to fetch.
     */
    where?: CustomerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTags to fetch.
     */
    orderBy?: CustomerTagOrderByWithRelationInput | CustomerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerTags.
     */
    cursor?: CustomerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerTags.
     */
    distinct?: CustomerTagScalarFieldEnum | CustomerTagScalarFieldEnum[]
  }

  /**
   * CustomerTag findFirstOrThrow
   */
  export type CustomerTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTag to fetch.
     */
    where?: CustomerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTags to fetch.
     */
    orderBy?: CustomerTagOrderByWithRelationInput | CustomerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerTags.
     */
    cursor?: CustomerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerTags.
     */
    distinct?: CustomerTagScalarFieldEnum | CustomerTagScalarFieldEnum[]
  }

  /**
   * CustomerTag findMany
   */
  export type CustomerTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTags to fetch.
     */
    where?: CustomerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTags to fetch.
     */
    orderBy?: CustomerTagOrderByWithRelationInput | CustomerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerTags.
     */
    cursor?: CustomerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTags.
     */
    skip?: number
    distinct?: CustomerTagScalarFieldEnum | CustomerTagScalarFieldEnum[]
  }

  /**
   * CustomerTag create
   */
  export type CustomerTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerTag.
     */
    data: XOR<CustomerTagCreateInput, CustomerTagUncheckedCreateInput>
  }

  /**
   * CustomerTag createMany
   */
  export type CustomerTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerTags.
     */
    data: CustomerTagCreateManyInput | CustomerTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerTag createManyAndReturn
   */
  export type CustomerTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerTags.
     */
    data: CustomerTagCreateManyInput | CustomerTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerTag update
   */
  export type CustomerTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerTag.
     */
    data: XOR<CustomerTagUpdateInput, CustomerTagUncheckedUpdateInput>
    /**
     * Choose, which CustomerTag to update.
     */
    where: CustomerTagWhereUniqueInput
  }

  /**
   * CustomerTag updateMany
   */
  export type CustomerTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerTags.
     */
    data: XOR<CustomerTagUpdateManyMutationInput, CustomerTagUncheckedUpdateManyInput>
    /**
     * Filter which CustomerTags to update
     */
    where?: CustomerTagWhereInput
    /**
     * Limit how many CustomerTags to update.
     */
    limit?: number
  }

  /**
   * CustomerTag updateManyAndReturn
   */
  export type CustomerTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * The data used to update CustomerTags.
     */
    data: XOR<CustomerTagUpdateManyMutationInput, CustomerTagUncheckedUpdateManyInput>
    /**
     * Filter which CustomerTags to update
     */
    where?: CustomerTagWhereInput
    /**
     * Limit how many CustomerTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerTag upsert
   */
  export type CustomerTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerTag to update in case it exists.
     */
    where: CustomerTagWhereUniqueInput
    /**
     * In case the CustomerTag found by the `where` argument doesn't exist, create a new CustomerTag with this data.
     */
    create: XOR<CustomerTagCreateInput, CustomerTagUncheckedCreateInput>
    /**
     * In case the CustomerTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerTagUpdateInput, CustomerTagUncheckedUpdateInput>
  }

  /**
   * CustomerTag delete
   */
  export type CustomerTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
    /**
     * Filter which CustomerTag to delete.
     */
    where: CustomerTagWhereUniqueInput
  }

  /**
   * CustomerTag deleteMany
   */
  export type CustomerTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerTags to delete
     */
    where?: CustomerTagWhereInput
    /**
     * Limit how many CustomerTags to delete.
     */
    limit?: number
  }

  /**
   * CustomerTag without action
   */
  export type CustomerTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTag
     */
    select?: CustomerTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTag
     */
    omit?: CustomerTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTagInclude<ExtArgs> | null
  }


  /**
   * Model ServiceCategory
   */

  export type AggregateServiceCategory = {
    _count: ServiceCategoryCountAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  export type ServiceCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    branchId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategory to aggregate.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceCategories
    **/
    _count?: true | ServiceCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type GetServiceCategoryAggregateType<T extends ServiceCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceCategory[P]>
      : GetScalarType<T[P], AggregateServiceCategory[P]>
  }




  export type ServiceCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceCategoryWhereInput
    orderBy?: ServiceCategoryOrderByWithAggregationInput | ServiceCategoryOrderByWithAggregationInput[]
    by: ServiceCategoryScalarFieldEnum[] | ServiceCategoryScalarFieldEnum
    having?: ServiceCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCategoryCountAggregateInputType | true
    _min?: ServiceCategoryMinAggregateInputType
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type ServiceCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    branchId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ServiceCategoryCountAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  type GetServiceCategoryGroupByPayload<T extends ServiceCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ServiceCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | ServiceCategory$branchArgs<ExtArgs>
    services?: boolean | ServiceCategory$servicesArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | ServiceCategory$branchArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | ServiceCategory$branchArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "branchId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceCategory"]>
  export type ServiceCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | ServiceCategory$branchArgs<ExtArgs>
    services?: boolean | ServiceCategory$servicesArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | ServiceCategory$branchArgs<ExtArgs>
  }
  export type ServiceCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | ServiceCategory$branchArgs<ExtArgs>
  }

  export type $ServiceCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceCategory"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs> | null
      services: Prisma.$ServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      branchId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceCategory"]>
    composites: {}
  }

  type ServiceCategoryGetPayload<S extends boolean | null | undefined | ServiceCategoryDefaultArgs> = $Result.GetResult<Prisma.$ServiceCategoryPayload, S>

  type ServiceCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCategoryCountAggregateInputType | true
    }

  export interface ServiceCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceCategory'], meta: { name: 'ServiceCategory' } }
    /**
     * Find zero or one ServiceCategory that matches the filter.
     * @param {ServiceCategoryFindUniqueArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceCategoryFindUniqueArgs>(args: SelectSubset<T, ServiceCategoryFindUniqueArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceCategoryFindUniqueOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceCategoryFindFirstArgs>(args?: SelectSubset<T, ServiceCategoryFindFirstArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany()
     * 
     * // Get first 10 ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceCategoryFindManyArgs>(args?: SelectSubset<T, ServiceCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceCategory.
     * @param {ServiceCategoryCreateArgs} args - Arguments to create a ServiceCategory.
     * @example
     * // Create one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.create({
     *   data: {
     *     // ... data to create a ServiceCategory
     *   }
     * })
     * 
     */
    create<T extends ServiceCategoryCreateArgs>(args: SelectSubset<T, ServiceCategoryCreateArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceCategories.
     * @param {ServiceCategoryCreateManyArgs} args - Arguments to create many ServiceCategories.
     * @example
     * // Create many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCategoryCreateManyArgs>(args?: SelectSubset<T, ServiceCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceCategories and returns the data saved in the database.
     * @param {ServiceCategoryCreateManyAndReturnArgs} args - Arguments to create many ServiceCategories.
     * @example
     * // Create many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceCategories and only return the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceCategory.
     * @param {ServiceCategoryDeleteArgs} args - Arguments to delete one ServiceCategory.
     * @example
     * // Delete one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.delete({
     *   where: {
     *     // ... filter to delete one ServiceCategory
     *   }
     * })
     * 
     */
    delete<T extends ServiceCategoryDeleteArgs>(args: SelectSubset<T, ServiceCategoryDeleteArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceCategory.
     * @param {ServiceCategoryUpdateArgs} args - Arguments to update one ServiceCategory.
     * @example
     * // Update one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceCategoryUpdateArgs>(args: SelectSubset<T, ServiceCategoryUpdateArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceCategories.
     * @param {ServiceCategoryDeleteManyArgs} args - Arguments to filter ServiceCategories to delete.
     * @example
     * // Delete a few ServiceCategories
     * const { count } = await prisma.serviceCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceCategoryDeleteManyArgs>(args?: SelectSubset<T, ServiceCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceCategoryUpdateManyArgs>(args: SelectSubset<T, ServiceCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories and returns the data updated in the database.
     * @param {ServiceCategoryUpdateManyAndReturnArgs} args - Arguments to update many ServiceCategories.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceCategories and only return the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceCategory.
     * @param {ServiceCategoryUpsertArgs} args - Arguments to update or create a ServiceCategory.
     * @example
     * // Update or create a ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.upsert({
     *   create: {
     *     // ... data to create a ServiceCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceCategory we want to update
     *   }
     * })
     */
    upsert<T extends ServiceCategoryUpsertArgs>(args: SelectSubset<T, ServiceCategoryUpsertArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryCountArgs} args - Arguments to filter ServiceCategories to count.
     * @example
     * // Count the number of ServiceCategories
     * const count = await prisma.serviceCategory.count({
     *   where: {
     *     // ... the filter for the ServiceCategories we want to count
     *   }
     * })
    **/
    count<T extends ServiceCategoryCountArgs>(
      args?: Subset<T, ServiceCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceCategoryAggregateArgs>(args: Subset<T, ServiceCategoryAggregateArgs>): Prisma.PrismaPromise<GetServiceCategoryAggregateType<T>>

    /**
     * Group by ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ServiceCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceCategory model
   */
  readonly fields: ServiceCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends ServiceCategory$branchArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    services<T extends ServiceCategory$servicesArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceCategory model
   */
  interface ServiceCategoryFieldRefs {
    readonly id: FieldRef<"ServiceCategory", 'String'>
    readonly name: FieldRef<"ServiceCategory", 'String'>
    readonly description: FieldRef<"ServiceCategory", 'String'>
    readonly branchId: FieldRef<"ServiceCategory", 'String'>
    readonly isActive: FieldRef<"ServiceCategory", 'Boolean'>
    readonly createdAt: FieldRef<"ServiceCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceCategory findUnique
   */
  export type ServiceCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findUniqueOrThrow
   */
  export type ServiceCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findFirst
   */
  export type ServiceCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory findFirstOrThrow
   */
  export type ServiceCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory findMany
   */
  export type ServiceCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategories to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory create
   */
  export type ServiceCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceCategory.
     */
    data: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
  }

  /**
   * ServiceCategory createMany
   */
  export type ServiceCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceCategories.
     */
    data: ServiceCategoryCreateManyInput | ServiceCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceCategory createManyAndReturn
   */
  export type ServiceCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceCategories.
     */
    data: ServiceCategoryCreateManyInput | ServiceCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceCategory update
   */
  export type ServiceCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceCategory.
     */
    data: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
    /**
     * Choose, which ServiceCategory to update.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory updateMany
   */
  export type ServiceCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to update.
     */
    limit?: number
  }

  /**
   * ServiceCategory updateManyAndReturn
   */
  export type ServiceCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceCategory upsert
   */
  export type ServiceCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceCategory to update in case it exists.
     */
    where: ServiceCategoryWhereUniqueInput
    /**
     * In case the ServiceCategory found by the `where` argument doesn't exist, create a new ServiceCategory with this data.
     */
    create: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
    /**
     * In case the ServiceCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
  }

  /**
   * ServiceCategory delete
   */
  export type ServiceCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter which ServiceCategory to delete.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory deleteMany
   */
  export type ServiceCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategories to delete
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to delete.
     */
    limit?: number
  }

  /**
   * ServiceCategory.branch
   */
  export type ServiceCategory$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * ServiceCategory.services
   */
  export type ServiceCategory$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * ServiceCategory without action
   */
  export type ServiceCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    price: number | null
    duration: number | null
  }

  export type ServiceSumAggregateOutputType = {
    price: number | null
    duration: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: number | null
    duration: number | null
    description: string | null
    categoryId: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: number | null
    duration: number | null
    description: string | null
    categoryId: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    name: number
    price: number
    duration: number
    description: number
    categoryId: number
    branchId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    price?: true
    duration?: true
  }

  export type ServiceSumAggregateInputType = {
    price?: true
    duration?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    duration?: true
    description?: true
    categoryId?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    duration?: true
    description?: true
    categoryId?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    duration?: true
    description?: true
    categoryId?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: string
    name: string
    price: number
    duration: number
    description: string | null
    categoryId: string
    branchId: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    duration?: boolean
    description?: boolean
    categoryId?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointments?: boolean | Service$appointmentsArgs<ExtArgs>
    staff?: boolean | Service$staffArgs<ExtArgs>
    packages?: boolean | Service$packagesArgs<ExtArgs>
    commissionItems?: boolean | Service$commissionItemsArgs<ExtArgs>
    StaffCommission?: boolean | Service$StaffCommissionArgs<ExtArgs>
    commissionRules?: boolean | Service$commissionRulesArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    duration?: boolean
    description?: boolean
    categoryId?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    duration?: boolean
    description?: boolean
    categoryId?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    duration?: boolean
    description?: boolean
    categoryId?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "duration" | "description" | "categoryId" | "branchId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointments?: boolean | Service$appointmentsArgs<ExtArgs>
    staff?: boolean | Service$staffArgs<ExtArgs>
    packages?: boolean | Service$packagesArgs<ExtArgs>
    commissionItems?: boolean | Service$commissionItemsArgs<ExtArgs>
    StaffCommission?: boolean | Service$StaffCommissionArgs<ExtArgs>
    commissionRules?: boolean | Service$commissionRulesArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      category: Prisma.$ServiceCategoryPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      staff: Prisma.$StaffServicePayload<ExtArgs>[]
      packages: Prisma.$PackageServicePayload<ExtArgs>[]
      commissionItems: Prisma.$CommissionItemPayload<ExtArgs>[]
      StaffCommission: Prisma.$StaffCommissionPayload<ExtArgs>[]
      commissionRules: Prisma.$CommissionRulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      price: number
      duration: number
      description: string | null
      categoryId: string
      branchId: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends ServiceCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategoryDefaultArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointments<T extends Service$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Service$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staff<T extends Service$staffArgs<ExtArgs> = {}>(args?: Subset<T, Service$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    packages<T extends Service$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Service$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commissionItems<T extends Service$commissionItemsArgs<ExtArgs> = {}>(args?: Subset<T, Service$commissionItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StaffCommission<T extends Service$StaffCommissionArgs<ExtArgs> = {}>(args?: Subset<T, Service$StaffCommissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commissionRules<T extends Service$commissionRulesArgs<ExtArgs> = {}>(args?: Subset<T, Service$commissionRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'String'>
    readonly name: FieldRef<"Service", 'String'>
    readonly price: FieldRef<"Service", 'Float'>
    readonly duration: FieldRef<"Service", 'Int'>
    readonly description: FieldRef<"Service", 'String'>
    readonly categoryId: FieldRef<"Service", 'String'>
    readonly branchId: FieldRef<"Service", 'String'>
    readonly isActive: FieldRef<"Service", 'Boolean'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly updatedAt: FieldRef<"Service", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.appointments
   */
  export type Service$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Service.staff
   */
  export type Service$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    where?: StaffServiceWhereInput
    orderBy?: StaffServiceOrderByWithRelationInput | StaffServiceOrderByWithRelationInput[]
    cursor?: StaffServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffServiceScalarFieldEnum | StaffServiceScalarFieldEnum[]
  }

  /**
   * Service.packages
   */
  export type Service$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    where?: PackageServiceWhereInput
    orderBy?: PackageServiceOrderByWithRelationInput | PackageServiceOrderByWithRelationInput[]
    cursor?: PackageServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageServiceScalarFieldEnum | PackageServiceScalarFieldEnum[]
  }

  /**
   * Service.commissionItems
   */
  export type Service$commissionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    where?: CommissionItemWhereInput
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    cursor?: CommissionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommissionItemScalarFieldEnum | CommissionItemScalarFieldEnum[]
  }

  /**
   * Service.StaffCommission
   */
  export type Service$StaffCommissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    where?: StaffCommissionWhereInput
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    cursor?: StaffCommissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * Service.commissionRules
   */
  export type Service$commissionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    where?: CommissionRuleWhereInput
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    cursor?: CommissionRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommissionRuleScalarFieldEnum | CommissionRuleScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model StaffService
   */

  export type AggregateStaffService = {
    _count: StaffServiceCountAggregateOutputType | null
    _min: StaffServiceMinAggregateOutputType | null
    _max: StaffServiceMaxAggregateOutputType | null
  }

  export type StaffServiceMinAggregateOutputType = {
    userId: string | null
    serviceId: string | null
  }

  export type StaffServiceMaxAggregateOutputType = {
    userId: string | null
    serviceId: string | null
  }

  export type StaffServiceCountAggregateOutputType = {
    userId: number
    serviceId: number
    _all: number
  }


  export type StaffServiceMinAggregateInputType = {
    userId?: true
    serviceId?: true
  }

  export type StaffServiceMaxAggregateInputType = {
    userId?: true
    serviceId?: true
  }

  export type StaffServiceCountAggregateInputType = {
    userId?: true
    serviceId?: true
    _all?: true
  }

  export type StaffServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffService to aggregate.
     */
    where?: StaffServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffServices to fetch.
     */
    orderBy?: StaffServiceOrderByWithRelationInput | StaffServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffServices
    **/
    _count?: true | StaffServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffServiceMaxAggregateInputType
  }

  export type GetStaffServiceAggregateType<T extends StaffServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffService[P]>
      : GetScalarType<T[P], AggregateStaffService[P]>
  }




  export type StaffServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffServiceWhereInput
    orderBy?: StaffServiceOrderByWithAggregationInput | StaffServiceOrderByWithAggregationInput[]
    by: StaffServiceScalarFieldEnum[] | StaffServiceScalarFieldEnum
    having?: StaffServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffServiceCountAggregateInputType | true
    _min?: StaffServiceMinAggregateInputType
    _max?: StaffServiceMaxAggregateInputType
  }

  export type StaffServiceGroupByOutputType = {
    userId: string
    serviceId: string
    _count: StaffServiceCountAggregateOutputType | null
    _min: StaffServiceMinAggregateOutputType | null
    _max: StaffServiceMaxAggregateOutputType | null
  }

  type GetStaffServiceGroupByPayload<T extends StaffServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffServiceGroupByOutputType[P]>
            : GetScalarType<T[P], StaffServiceGroupByOutputType[P]>
        }
      >
    >


  export type StaffServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    serviceId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffService"]>

  export type StaffServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    serviceId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffService"]>

  export type StaffServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    serviceId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffService"]>

  export type StaffServiceSelectScalar = {
    userId?: boolean
    serviceId?: boolean
  }

  export type StaffServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "serviceId", ExtArgs["result"]["staffService"]>
  export type StaffServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type StaffServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type StaffServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $StaffServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffService"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      serviceId: string
    }, ExtArgs["result"]["staffService"]>
    composites: {}
  }

  type StaffServiceGetPayload<S extends boolean | null | undefined | StaffServiceDefaultArgs> = $Result.GetResult<Prisma.$StaffServicePayload, S>

  type StaffServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffServiceCountAggregateInputType | true
    }

  export interface StaffServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffService'], meta: { name: 'StaffService' } }
    /**
     * Find zero or one StaffService that matches the filter.
     * @param {StaffServiceFindUniqueArgs} args - Arguments to find a StaffService
     * @example
     * // Get one StaffService
     * const staffService = await prisma.staffService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffServiceFindUniqueArgs>(args: SelectSubset<T, StaffServiceFindUniqueArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffServiceFindUniqueOrThrowArgs} args - Arguments to find a StaffService
     * @example
     * // Get one StaffService
     * const staffService = await prisma.staffService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceFindFirstArgs} args - Arguments to find a StaffService
     * @example
     * // Get one StaffService
     * const staffService = await prisma.staffService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffServiceFindFirstArgs>(args?: SelectSubset<T, StaffServiceFindFirstArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceFindFirstOrThrowArgs} args - Arguments to find a StaffService
     * @example
     * // Get one StaffService
     * const staffService = await prisma.staffService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffServices
     * const staffServices = await prisma.staffService.findMany()
     * 
     * // Get first 10 StaffServices
     * const staffServices = await prisma.staffService.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const staffServiceWithUserIdOnly = await prisma.staffService.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends StaffServiceFindManyArgs>(args?: SelectSubset<T, StaffServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffService.
     * @param {StaffServiceCreateArgs} args - Arguments to create a StaffService.
     * @example
     * // Create one StaffService
     * const StaffService = await prisma.staffService.create({
     *   data: {
     *     // ... data to create a StaffService
     *   }
     * })
     * 
     */
    create<T extends StaffServiceCreateArgs>(args: SelectSubset<T, StaffServiceCreateArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffServices.
     * @param {StaffServiceCreateManyArgs} args - Arguments to create many StaffServices.
     * @example
     * // Create many StaffServices
     * const staffService = await prisma.staffService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffServiceCreateManyArgs>(args?: SelectSubset<T, StaffServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffServices and returns the data saved in the database.
     * @param {StaffServiceCreateManyAndReturnArgs} args - Arguments to create many StaffServices.
     * @example
     * // Create many StaffServices
     * const staffService = await prisma.staffService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffServices and only return the `userId`
     * const staffServiceWithUserIdOnly = await prisma.staffService.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffService.
     * @param {StaffServiceDeleteArgs} args - Arguments to delete one StaffService.
     * @example
     * // Delete one StaffService
     * const StaffService = await prisma.staffService.delete({
     *   where: {
     *     // ... filter to delete one StaffService
     *   }
     * })
     * 
     */
    delete<T extends StaffServiceDeleteArgs>(args: SelectSubset<T, StaffServiceDeleteArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffService.
     * @param {StaffServiceUpdateArgs} args - Arguments to update one StaffService.
     * @example
     * // Update one StaffService
     * const staffService = await prisma.staffService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffServiceUpdateArgs>(args: SelectSubset<T, StaffServiceUpdateArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffServices.
     * @param {StaffServiceDeleteManyArgs} args - Arguments to filter StaffServices to delete.
     * @example
     * // Delete a few StaffServices
     * const { count } = await prisma.staffService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffServiceDeleteManyArgs>(args?: SelectSubset<T, StaffServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffServices
     * const staffService = await prisma.staffService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffServiceUpdateManyArgs>(args: SelectSubset<T, StaffServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffServices and returns the data updated in the database.
     * @param {StaffServiceUpdateManyAndReturnArgs} args - Arguments to update many StaffServices.
     * @example
     * // Update many StaffServices
     * const staffService = await prisma.staffService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffServices and only return the `userId`
     * const staffServiceWithUserIdOnly = await prisma.staffService.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffService.
     * @param {StaffServiceUpsertArgs} args - Arguments to update or create a StaffService.
     * @example
     * // Update or create a StaffService
     * const staffService = await prisma.staffService.upsert({
     *   create: {
     *     // ... data to create a StaffService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffService we want to update
     *   }
     * })
     */
    upsert<T extends StaffServiceUpsertArgs>(args: SelectSubset<T, StaffServiceUpsertArgs<ExtArgs>>): Prisma__StaffServiceClient<$Result.GetResult<Prisma.$StaffServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceCountArgs} args - Arguments to filter StaffServices to count.
     * @example
     * // Count the number of StaffServices
     * const count = await prisma.staffService.count({
     *   where: {
     *     // ... the filter for the StaffServices we want to count
     *   }
     * })
    **/
    count<T extends StaffServiceCountArgs>(
      args?: Subset<T, StaffServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffServiceAggregateArgs>(args: Subset<T, StaffServiceAggregateArgs>): Prisma.PrismaPromise<GetStaffServiceAggregateType<T>>

    /**
     * Group by StaffService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffServiceGroupByArgs['orderBy'] }
        : { orderBy?: StaffServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffService model
   */
  readonly fields: StaffServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffService model
   */
  interface StaffServiceFieldRefs {
    readonly userId: FieldRef<"StaffService", 'String'>
    readonly serviceId: FieldRef<"StaffService", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StaffService findUnique
   */
  export type StaffServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * Filter, which StaffService to fetch.
     */
    where: StaffServiceWhereUniqueInput
  }

  /**
   * StaffService findUniqueOrThrow
   */
  export type StaffServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * Filter, which StaffService to fetch.
     */
    where: StaffServiceWhereUniqueInput
  }

  /**
   * StaffService findFirst
   */
  export type StaffServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * Filter, which StaffService to fetch.
     */
    where?: StaffServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffServices to fetch.
     */
    orderBy?: StaffServiceOrderByWithRelationInput | StaffServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffServices.
     */
    cursor?: StaffServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffServices.
     */
    distinct?: StaffServiceScalarFieldEnum | StaffServiceScalarFieldEnum[]
  }

  /**
   * StaffService findFirstOrThrow
   */
  export type StaffServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * Filter, which StaffService to fetch.
     */
    where?: StaffServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffServices to fetch.
     */
    orderBy?: StaffServiceOrderByWithRelationInput | StaffServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffServices.
     */
    cursor?: StaffServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffServices.
     */
    distinct?: StaffServiceScalarFieldEnum | StaffServiceScalarFieldEnum[]
  }

  /**
   * StaffService findMany
   */
  export type StaffServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * Filter, which StaffServices to fetch.
     */
    where?: StaffServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffServices to fetch.
     */
    orderBy?: StaffServiceOrderByWithRelationInput | StaffServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffServices.
     */
    cursor?: StaffServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffServices.
     */
    skip?: number
    distinct?: StaffServiceScalarFieldEnum | StaffServiceScalarFieldEnum[]
  }

  /**
   * StaffService create
   */
  export type StaffServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffService.
     */
    data: XOR<StaffServiceCreateInput, StaffServiceUncheckedCreateInput>
  }

  /**
   * StaffService createMany
   */
  export type StaffServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffServices.
     */
    data: StaffServiceCreateManyInput | StaffServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffService createManyAndReturn
   */
  export type StaffServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * The data used to create many StaffServices.
     */
    data: StaffServiceCreateManyInput | StaffServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffService update
   */
  export type StaffServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffService.
     */
    data: XOR<StaffServiceUpdateInput, StaffServiceUncheckedUpdateInput>
    /**
     * Choose, which StaffService to update.
     */
    where: StaffServiceWhereUniqueInput
  }

  /**
   * StaffService updateMany
   */
  export type StaffServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffServices.
     */
    data: XOR<StaffServiceUpdateManyMutationInput, StaffServiceUncheckedUpdateManyInput>
    /**
     * Filter which StaffServices to update
     */
    where?: StaffServiceWhereInput
    /**
     * Limit how many StaffServices to update.
     */
    limit?: number
  }

  /**
   * StaffService updateManyAndReturn
   */
  export type StaffServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * The data used to update StaffServices.
     */
    data: XOR<StaffServiceUpdateManyMutationInput, StaffServiceUncheckedUpdateManyInput>
    /**
     * Filter which StaffServices to update
     */
    where?: StaffServiceWhereInput
    /**
     * Limit how many StaffServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffService upsert
   */
  export type StaffServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffService to update in case it exists.
     */
    where: StaffServiceWhereUniqueInput
    /**
     * In case the StaffService found by the `where` argument doesn't exist, create a new StaffService with this data.
     */
    create: XOR<StaffServiceCreateInput, StaffServiceUncheckedCreateInput>
    /**
     * In case the StaffService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffServiceUpdateInput, StaffServiceUncheckedUpdateInput>
  }

  /**
   * StaffService delete
   */
  export type StaffServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
    /**
     * Filter which StaffService to delete.
     */
    where: StaffServiceWhereUniqueInput
  }

  /**
   * StaffService deleteMany
   */
  export type StaffServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffServices to delete
     */
    where?: StaffServiceWhereInput
    /**
     * Limit how many StaffServices to delete.
     */
    limit?: number
  }

  /**
   * StaffService without action
   */
  export type StaffServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffService
     */
    select?: StaffServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffService
     */
    omit?: StaffServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffServiceInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    startTime: Date | null
    endTime: Date | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    customerId: string | null
    serviceId: string | null
    staffId: string | null
    branchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    startTime: Date | null
    endTime: Date | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    customerId: string | null
    serviceId: string | null
    staffId: string | null
    branchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    startTime: number
    endTime: number
    status: number
    notes: number
    customerId: number
    serviceId: number
    staffId: number
    branchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    status?: true
    notes?: true
    customerId?: true
    serviceId?: true
    staffId?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    status?: true
    notes?: true
    customerId?: true
    serviceId?: true
    staffId?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    status?: true
    notes?: true
    customerId?: true
    serviceId?: true
    staffId?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    startTime: Date
    endTime: Date
    status: $Enums.AppointmentStatus
    notes: string | null
    customerId: string
    serviceId: string
    staffId: string
    branchId: string
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    customerId?: boolean
    serviceId?: boolean
    staffId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    invoice?: boolean | Appointment$invoiceArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    customerId?: boolean
    serviceId?: boolean
    staffId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    customerId?: boolean
    serviceId?: boolean
    staffId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    customerId?: boolean
    serviceId?: boolean
    staffId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "startTime" | "endTime" | "status" | "notes" | "customerId" | "serviceId" | "staffId" | "branchId" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    invoice?: boolean | Appointment$invoiceArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
      staff: Prisma.$UserPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
      invoice: Prisma.$InvoicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      startTime: Date
      endTime: Date
      status: $Enums.AppointmentStatus
      notes: string | null
      customerId: string
      serviceId: string
      staffId: string
      branchId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoice<T extends Appointment$invoiceArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$invoiceArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly startTime: FieldRef<"Appointment", 'DateTime'>
    readonly endTime: FieldRef<"Appointment", 'DateTime'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly customerId: FieldRef<"Appointment", 'String'>
    readonly serviceId: FieldRef<"Appointment", 'String'>
    readonly staffId: FieldRef<"Appointment", 'String'>
    readonly branchId: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.invoice
   */
  export type Appointment$invoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    price: number | null
    totalSessions: number | null
    totalMinutes: number | null
    validityDays: number | null
    commissionRate: number | null
    commissionFixed: number | null
  }

  export type PackageSumAggregateOutputType = {
    price: number | null
    totalSessions: number | null
    totalMinutes: number | null
    validityDays: number | null
    commissionRate: number | null
    commissionFixed: number | null
  }

  export type PackageMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: number | null
    type: $Enums.PackageType | null
    totalSessions: number | null
    totalMinutes: number | null
    validityDays: number | null
    description: string | null
    branchId: string | null
    commissionRate: number | null
    commissionFixed: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: number | null
    type: $Enums.PackageType | null
    totalSessions: number | null
    totalMinutes: number | null
    validityDays: number | null
    description: string | null
    branchId: string | null
    commissionRate: number | null
    commissionFixed: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    name: number
    price: number
    type: number
    totalSessions: number
    totalMinutes: number
    validityDays: number
    description: number
    branchId: number
    commissionRate: number
    commissionFixed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    price?: true
    totalSessions?: true
    totalMinutes?: true
    validityDays?: true
    commissionRate?: true
    commissionFixed?: true
  }

  export type PackageSumAggregateInputType = {
    price?: true
    totalSessions?: true
    totalMinutes?: true
    validityDays?: true
    commissionRate?: true
    commissionFixed?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    type?: true
    totalSessions?: true
    totalMinutes?: true
    validityDays?: true
    description?: true
    branchId?: true
    commissionRate?: true
    commissionFixed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    type?: true
    totalSessions?: true
    totalMinutes?: true
    validityDays?: true
    description?: true
    branchId?: true
    commissionRate?: true
    commissionFixed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    type?: true
    totalSessions?: true
    totalMinutes?: true
    validityDays?: true
    description?: true
    branchId?: true
    commissionRate?: true
    commissionFixed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions: number | null
    totalMinutes: number | null
    validityDays: number | null
    description: string | null
    branchId: string
    commissionRate: number | null
    commissionFixed: number | null
    createdAt: Date
    updatedAt: Date
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    totalSessions?: boolean
    totalMinutes?: boolean
    validityDays?: boolean
    description?: boolean
    branchId?: boolean
    commissionRate?: boolean
    commissionFixed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    services?: boolean | Package$servicesArgs<ExtArgs>
    customerPackages?: boolean | Package$customerPackagesArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    totalSessions?: boolean
    totalMinutes?: boolean
    validityDays?: boolean
    description?: boolean
    branchId?: boolean
    commissionRate?: boolean
    commissionFixed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    totalSessions?: boolean
    totalMinutes?: boolean
    validityDays?: boolean
    description?: boolean
    branchId?: boolean
    commissionRate?: boolean
    commissionFixed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    totalSessions?: boolean
    totalMinutes?: boolean
    validityDays?: boolean
    description?: boolean
    branchId?: boolean
    commissionRate?: boolean
    commissionFixed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "type" | "totalSessions" | "totalMinutes" | "validityDays" | "description" | "branchId" | "commissionRate" | "commissionFixed" | "createdAt" | "updatedAt", ExtArgs["result"]["package"]>
  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    services?: boolean | Package$servicesArgs<ExtArgs>
    customerPackages?: boolean | Package$customerPackagesArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type PackageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      services: Prisma.$PackageServicePayload<ExtArgs>[]
      customerPackages: Prisma.$CustomerPackagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      price: number
      type: $Enums.PackageType
      totalSessions: number | null
      totalMinutes: number | null
      validityDays: number | null
      description: string | null
      branchId: string
      commissionRate: number | null
      commissionFixed: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages and returns the data updated in the database.
     * @param {PackageUpdateManyAndReturnArgs} args - Arguments to update many Packages.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackageUpdateManyAndReturnArgs>(args: SelectSubset<T, PackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    services<T extends Package$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Package$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customerPackages<T extends Package$customerPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Package$customerPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'String'>
    readonly name: FieldRef<"Package", 'String'>
    readonly price: FieldRef<"Package", 'Float'>
    readonly type: FieldRef<"Package", 'PackageType'>
    readonly totalSessions: FieldRef<"Package", 'Int'>
    readonly totalMinutes: FieldRef<"Package", 'Int'>
    readonly validityDays: FieldRef<"Package", 'Int'>
    readonly description: FieldRef<"Package", 'String'>
    readonly branchId: FieldRef<"Package", 'String'>
    readonly commissionRate: FieldRef<"Package", 'Float'>
    readonly commissionFixed: FieldRef<"Package", 'Float'>
    readonly createdAt: FieldRef<"Package", 'DateTime'>
    readonly updatedAt: FieldRef<"Package", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
  }

  /**
   * Package updateManyAndReturn
   */
  export type PackageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to delete.
     */
    limit?: number
  }

  /**
   * Package.services
   */
  export type Package$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    where?: PackageServiceWhereInput
    orderBy?: PackageServiceOrderByWithRelationInput | PackageServiceOrderByWithRelationInput[]
    cursor?: PackageServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageServiceScalarFieldEnum | PackageServiceScalarFieldEnum[]
  }

  /**
   * Package.customerPackages
   */
  export type Package$customerPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    where?: CustomerPackageWhereInput
    orderBy?: CustomerPackageOrderByWithRelationInput | CustomerPackageOrderByWithRelationInput[]
    cursor?: CustomerPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerPackageScalarFieldEnum | CustomerPackageScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model PackageService
   */

  export type AggregatePackageService = {
    _count: PackageServiceCountAggregateOutputType | null
    _avg: PackageServiceAvgAggregateOutputType | null
    _sum: PackageServiceSumAggregateOutputType | null
    _min: PackageServiceMinAggregateOutputType | null
    _max: PackageServiceMaxAggregateOutputType | null
  }

  export type PackageServiceAvgAggregateOutputType = {
    quantity: number | null
  }

  export type PackageServiceSumAggregateOutputType = {
    quantity: number | null
  }

  export type PackageServiceMinAggregateOutputType = {
    packageId: string | null
    serviceId: string | null
    quantity: number | null
  }

  export type PackageServiceMaxAggregateOutputType = {
    packageId: string | null
    serviceId: string | null
    quantity: number | null
  }

  export type PackageServiceCountAggregateOutputType = {
    packageId: number
    serviceId: number
    quantity: number
    _all: number
  }


  export type PackageServiceAvgAggregateInputType = {
    quantity?: true
  }

  export type PackageServiceSumAggregateInputType = {
    quantity?: true
  }

  export type PackageServiceMinAggregateInputType = {
    packageId?: true
    serviceId?: true
    quantity?: true
  }

  export type PackageServiceMaxAggregateInputType = {
    packageId?: true
    serviceId?: true
    quantity?: true
  }

  export type PackageServiceCountAggregateInputType = {
    packageId?: true
    serviceId?: true
    quantity?: true
    _all?: true
  }

  export type PackageServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageService to aggregate.
     */
    where?: PackageServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageServices to fetch.
     */
    orderBy?: PackageServiceOrderByWithRelationInput | PackageServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackageServices
    **/
    _count?: true | PackageServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageServiceMaxAggregateInputType
  }

  export type GetPackageServiceAggregateType<T extends PackageServiceAggregateArgs> = {
        [P in keyof T & keyof AggregatePackageService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackageService[P]>
      : GetScalarType<T[P], AggregatePackageService[P]>
  }




  export type PackageServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageServiceWhereInput
    orderBy?: PackageServiceOrderByWithAggregationInput | PackageServiceOrderByWithAggregationInput[]
    by: PackageServiceScalarFieldEnum[] | PackageServiceScalarFieldEnum
    having?: PackageServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageServiceCountAggregateInputType | true
    _avg?: PackageServiceAvgAggregateInputType
    _sum?: PackageServiceSumAggregateInputType
    _min?: PackageServiceMinAggregateInputType
    _max?: PackageServiceMaxAggregateInputType
  }

  export type PackageServiceGroupByOutputType = {
    packageId: string
    serviceId: string
    quantity: number
    _count: PackageServiceCountAggregateOutputType | null
    _avg: PackageServiceAvgAggregateOutputType | null
    _sum: PackageServiceSumAggregateOutputType | null
    _min: PackageServiceMinAggregateOutputType | null
    _max: PackageServiceMaxAggregateOutputType | null
  }

  type GetPackageServiceGroupByPayload<T extends PackageServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageServiceGroupByOutputType[P]>
            : GetScalarType<T[P], PackageServiceGroupByOutputType[P]>
        }
      >
    >


  export type PackageServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageId?: boolean
    serviceId?: boolean
    quantity?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageService"]>

  export type PackageServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageId?: boolean
    serviceId?: boolean
    quantity?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageService"]>

  export type PackageServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageId?: boolean
    serviceId?: boolean
    quantity?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageService"]>

  export type PackageServiceSelectScalar = {
    packageId?: boolean
    serviceId?: boolean
    quantity?: boolean
  }

  export type PackageServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"packageId" | "serviceId" | "quantity", ExtArgs["result"]["packageService"]>
  export type PackageServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type PackageServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type PackageServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $PackageServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackageService"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      packageId: string
      serviceId: string
      quantity: number
    }, ExtArgs["result"]["packageService"]>
    composites: {}
  }

  type PackageServiceGetPayload<S extends boolean | null | undefined | PackageServiceDefaultArgs> = $Result.GetResult<Prisma.$PackageServicePayload, S>

  type PackageServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageServiceCountAggregateInputType | true
    }

  export interface PackageServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackageService'], meta: { name: 'PackageService' } }
    /**
     * Find zero or one PackageService that matches the filter.
     * @param {PackageServiceFindUniqueArgs} args - Arguments to find a PackageService
     * @example
     * // Get one PackageService
     * const packageService = await prisma.packageService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageServiceFindUniqueArgs>(args: SelectSubset<T, PackageServiceFindUniqueArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PackageService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageServiceFindUniqueOrThrowArgs} args - Arguments to find a PackageService
     * @example
     * // Get one PackageService
     * const packageService = await prisma.packageService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackageService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceFindFirstArgs} args - Arguments to find a PackageService
     * @example
     * // Get one PackageService
     * const packageService = await prisma.packageService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageServiceFindFirstArgs>(args?: SelectSubset<T, PackageServiceFindFirstArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackageService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceFindFirstOrThrowArgs} args - Arguments to find a PackageService
     * @example
     * // Get one PackageService
     * const packageService = await prisma.packageService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PackageServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackageServices
     * const packageServices = await prisma.packageService.findMany()
     * 
     * // Get first 10 PackageServices
     * const packageServices = await prisma.packageService.findMany({ take: 10 })
     * 
     * // Only select the `packageId`
     * const packageServiceWithPackageIdOnly = await prisma.packageService.findMany({ select: { packageId: true } })
     * 
     */
    findMany<T extends PackageServiceFindManyArgs>(args?: SelectSubset<T, PackageServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PackageService.
     * @param {PackageServiceCreateArgs} args - Arguments to create a PackageService.
     * @example
     * // Create one PackageService
     * const PackageService = await prisma.packageService.create({
     *   data: {
     *     // ... data to create a PackageService
     *   }
     * })
     * 
     */
    create<T extends PackageServiceCreateArgs>(args: SelectSubset<T, PackageServiceCreateArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PackageServices.
     * @param {PackageServiceCreateManyArgs} args - Arguments to create many PackageServices.
     * @example
     * // Create many PackageServices
     * const packageService = await prisma.packageService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageServiceCreateManyArgs>(args?: SelectSubset<T, PackageServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackageServices and returns the data saved in the database.
     * @param {PackageServiceCreateManyAndReturnArgs} args - Arguments to create many PackageServices.
     * @example
     * // Create many PackageServices
     * const packageService = await prisma.packageService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackageServices and only return the `packageId`
     * const packageServiceWithPackageIdOnly = await prisma.packageService.createManyAndReturn({
     *   select: { packageId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PackageService.
     * @param {PackageServiceDeleteArgs} args - Arguments to delete one PackageService.
     * @example
     * // Delete one PackageService
     * const PackageService = await prisma.packageService.delete({
     *   where: {
     *     // ... filter to delete one PackageService
     *   }
     * })
     * 
     */
    delete<T extends PackageServiceDeleteArgs>(args: SelectSubset<T, PackageServiceDeleteArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PackageService.
     * @param {PackageServiceUpdateArgs} args - Arguments to update one PackageService.
     * @example
     * // Update one PackageService
     * const packageService = await prisma.packageService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageServiceUpdateArgs>(args: SelectSubset<T, PackageServiceUpdateArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PackageServices.
     * @param {PackageServiceDeleteManyArgs} args - Arguments to filter PackageServices to delete.
     * @example
     * // Delete a few PackageServices
     * const { count } = await prisma.packageService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageServiceDeleteManyArgs>(args?: SelectSubset<T, PackageServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackageServices
     * const packageService = await prisma.packageService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageServiceUpdateManyArgs>(args: SelectSubset<T, PackageServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageServices and returns the data updated in the database.
     * @param {PackageServiceUpdateManyAndReturnArgs} args - Arguments to update many PackageServices.
     * @example
     * // Update many PackageServices
     * const packageService = await prisma.packageService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PackageServices and only return the `packageId`
     * const packageServiceWithPackageIdOnly = await prisma.packageService.updateManyAndReturn({
     *   select: { packageId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackageServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, PackageServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PackageService.
     * @param {PackageServiceUpsertArgs} args - Arguments to update or create a PackageService.
     * @example
     * // Update or create a PackageService
     * const packageService = await prisma.packageService.upsert({
     *   create: {
     *     // ... data to create a PackageService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackageService we want to update
     *   }
     * })
     */
    upsert<T extends PackageServiceUpsertArgs>(args: SelectSubset<T, PackageServiceUpsertArgs<ExtArgs>>): Prisma__PackageServiceClient<$Result.GetResult<Prisma.$PackageServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PackageServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceCountArgs} args - Arguments to filter PackageServices to count.
     * @example
     * // Count the number of PackageServices
     * const count = await prisma.packageService.count({
     *   where: {
     *     // ... the filter for the PackageServices we want to count
     *   }
     * })
    **/
    count<T extends PackageServiceCountArgs>(
      args?: Subset<T, PackageServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackageService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageServiceAggregateArgs>(args: Subset<T, PackageServiceAggregateArgs>): Prisma.PrismaPromise<GetPackageServiceAggregateType<T>>

    /**
     * Group by PackageService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageServiceGroupByArgs['orderBy'] }
        : { orderBy?: PackageServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackageService model
   */
  readonly fields: PackageServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackageService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackageService model
   */
  interface PackageServiceFieldRefs {
    readonly packageId: FieldRef<"PackageService", 'String'>
    readonly serviceId: FieldRef<"PackageService", 'String'>
    readonly quantity: FieldRef<"PackageService", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PackageService findUnique
   */
  export type PackageServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * Filter, which PackageService to fetch.
     */
    where: PackageServiceWhereUniqueInput
  }

  /**
   * PackageService findUniqueOrThrow
   */
  export type PackageServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * Filter, which PackageService to fetch.
     */
    where: PackageServiceWhereUniqueInput
  }

  /**
   * PackageService findFirst
   */
  export type PackageServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * Filter, which PackageService to fetch.
     */
    where?: PackageServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageServices to fetch.
     */
    orderBy?: PackageServiceOrderByWithRelationInput | PackageServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageServices.
     */
    cursor?: PackageServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageServices.
     */
    distinct?: PackageServiceScalarFieldEnum | PackageServiceScalarFieldEnum[]
  }

  /**
   * PackageService findFirstOrThrow
   */
  export type PackageServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * Filter, which PackageService to fetch.
     */
    where?: PackageServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageServices to fetch.
     */
    orderBy?: PackageServiceOrderByWithRelationInput | PackageServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageServices.
     */
    cursor?: PackageServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageServices.
     */
    distinct?: PackageServiceScalarFieldEnum | PackageServiceScalarFieldEnum[]
  }

  /**
   * PackageService findMany
   */
  export type PackageServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * Filter, which PackageServices to fetch.
     */
    where?: PackageServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageServices to fetch.
     */
    orderBy?: PackageServiceOrderByWithRelationInput | PackageServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackageServices.
     */
    cursor?: PackageServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageServices.
     */
    skip?: number
    distinct?: PackageServiceScalarFieldEnum | PackageServiceScalarFieldEnum[]
  }

  /**
   * PackageService create
   */
  export type PackageServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a PackageService.
     */
    data: XOR<PackageServiceCreateInput, PackageServiceUncheckedCreateInput>
  }

  /**
   * PackageService createMany
   */
  export type PackageServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackageServices.
     */
    data: PackageServiceCreateManyInput | PackageServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackageService createManyAndReturn
   */
  export type PackageServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * The data used to create many PackageServices.
     */
    data: PackageServiceCreateManyInput | PackageServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageService update
   */
  export type PackageServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a PackageService.
     */
    data: XOR<PackageServiceUpdateInput, PackageServiceUncheckedUpdateInput>
    /**
     * Choose, which PackageService to update.
     */
    where: PackageServiceWhereUniqueInput
  }

  /**
   * PackageService updateMany
   */
  export type PackageServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackageServices.
     */
    data: XOR<PackageServiceUpdateManyMutationInput, PackageServiceUncheckedUpdateManyInput>
    /**
     * Filter which PackageServices to update
     */
    where?: PackageServiceWhereInput
    /**
     * Limit how many PackageServices to update.
     */
    limit?: number
  }

  /**
   * PackageService updateManyAndReturn
   */
  export type PackageServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * The data used to update PackageServices.
     */
    data: XOR<PackageServiceUpdateManyMutationInput, PackageServiceUncheckedUpdateManyInput>
    /**
     * Filter which PackageServices to update
     */
    where?: PackageServiceWhereInput
    /**
     * Limit how many PackageServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageService upsert
   */
  export type PackageServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the PackageService to update in case it exists.
     */
    where: PackageServiceWhereUniqueInput
    /**
     * In case the PackageService found by the `where` argument doesn't exist, create a new PackageService with this data.
     */
    create: XOR<PackageServiceCreateInput, PackageServiceUncheckedCreateInput>
    /**
     * In case the PackageService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageServiceUpdateInput, PackageServiceUncheckedUpdateInput>
  }

  /**
   * PackageService delete
   */
  export type PackageServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
    /**
     * Filter which PackageService to delete.
     */
    where: PackageServiceWhereUniqueInput
  }

  /**
   * PackageService deleteMany
   */
  export type PackageServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageServices to delete
     */
    where?: PackageServiceWhereInput
    /**
     * Limit how many PackageServices to delete.
     */
    limit?: number
  }

  /**
   * PackageService without action
   */
  export type PackageServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageService
     */
    select?: PackageServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageService
     */
    omit?: PackageServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageServiceInclude<ExtArgs> | null
  }


  /**
   * Model CustomerPackage
   */

  export type AggregateCustomerPackage = {
    _count: CustomerPackageCountAggregateOutputType | null
    _min: CustomerPackageMinAggregateOutputType | null
    _max: CustomerPackageMaxAggregateOutputType | null
  }

  export type CustomerPackageMinAggregateOutputType = {
    id: string | null
    purchaseDate: Date | null
    expiryDate: Date | null
    notes: string | null
    salesCode: string | null
    customerId: string | null
    packageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerPackageMaxAggregateOutputType = {
    id: string | null
    purchaseDate: Date | null
    expiryDate: Date | null
    notes: string | null
    salesCode: string | null
    customerId: string | null
    packageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerPackageCountAggregateOutputType = {
    id: number
    purchaseDate: number
    expiryDate: number
    remainingSessions: number
    notes: number
    salesCode: number
    customerId: number
    packageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerPackageMinAggregateInputType = {
    id?: true
    purchaseDate?: true
    expiryDate?: true
    notes?: true
    salesCode?: true
    customerId?: true
    packageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerPackageMaxAggregateInputType = {
    id?: true
    purchaseDate?: true
    expiryDate?: true
    notes?: true
    salesCode?: true
    customerId?: true
    packageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerPackageCountAggregateInputType = {
    id?: true
    purchaseDate?: true
    expiryDate?: true
    remainingSessions?: true
    notes?: true
    salesCode?: true
    customerId?: true
    packageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerPackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerPackage to aggregate.
     */
    where?: CustomerPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPackages to fetch.
     */
    orderBy?: CustomerPackageOrderByWithRelationInput | CustomerPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerPackages
    **/
    _count?: true | CustomerPackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerPackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerPackageMaxAggregateInputType
  }

  export type GetCustomerPackageAggregateType<T extends CustomerPackageAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerPackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerPackage[P]>
      : GetScalarType<T[P], AggregateCustomerPackage[P]>
  }




  export type CustomerPackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerPackageWhereInput
    orderBy?: CustomerPackageOrderByWithAggregationInput | CustomerPackageOrderByWithAggregationInput[]
    by: CustomerPackageScalarFieldEnum[] | CustomerPackageScalarFieldEnum
    having?: CustomerPackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerPackageCountAggregateInputType | true
    _min?: CustomerPackageMinAggregateInputType
    _max?: CustomerPackageMaxAggregateInputType
  }

  export type CustomerPackageGroupByOutputType = {
    id: string
    purchaseDate: Date
    expiryDate: Date | null
    remainingSessions: JsonValue | null
    notes: string | null
    salesCode: string | null
    customerId: string
    packageId: string
    createdAt: Date
    updatedAt: Date
    _count: CustomerPackageCountAggregateOutputType | null
    _min: CustomerPackageMinAggregateOutputType | null
    _max: CustomerPackageMaxAggregateOutputType | null
  }

  type GetCustomerPackageGroupByPayload<T extends CustomerPackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerPackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerPackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerPackageGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerPackageGroupByOutputType[P]>
        }
      >
    >


  export type CustomerPackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseDate?: boolean
    expiryDate?: boolean
    remainingSessions?: boolean
    notes?: boolean
    salesCode?: boolean
    customerId?: boolean
    packageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
    invoice?: boolean | CustomerPackage$invoiceArgs<ExtArgs>
  }, ExtArgs["result"]["customerPackage"]>

  export type CustomerPackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseDate?: boolean
    expiryDate?: boolean
    remainingSessions?: boolean
    notes?: boolean
    salesCode?: boolean
    customerId?: boolean
    packageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPackage"]>

  export type CustomerPackageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseDate?: boolean
    expiryDate?: boolean
    remainingSessions?: boolean
    notes?: boolean
    salesCode?: boolean
    customerId?: boolean
    packageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPackage"]>

  export type CustomerPackageSelectScalar = {
    id?: boolean
    purchaseDate?: boolean
    expiryDate?: boolean
    remainingSessions?: boolean
    notes?: boolean
    salesCode?: boolean
    customerId?: boolean
    packageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerPackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "purchaseDate" | "expiryDate" | "remainingSessions" | "notes" | "salesCode" | "customerId" | "packageId" | "createdAt" | "updatedAt", ExtArgs["result"]["customerPackage"]>
  export type CustomerPackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
    invoice?: boolean | CustomerPackage$invoiceArgs<ExtArgs>
  }
  export type CustomerPackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }
  export type CustomerPackageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }

  export type $CustomerPackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerPackage"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      package: Prisma.$PackagePayload<ExtArgs>
      invoice: Prisma.$InvoicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      purchaseDate: Date
      expiryDate: Date | null
      remainingSessions: Prisma.JsonValue | null
      notes: string | null
      salesCode: string | null
      customerId: string
      packageId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerPackage"]>
    composites: {}
  }

  type CustomerPackageGetPayload<S extends boolean | null | undefined | CustomerPackageDefaultArgs> = $Result.GetResult<Prisma.$CustomerPackagePayload, S>

  type CustomerPackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerPackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerPackageCountAggregateInputType | true
    }

  export interface CustomerPackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerPackage'], meta: { name: 'CustomerPackage' } }
    /**
     * Find zero or one CustomerPackage that matches the filter.
     * @param {CustomerPackageFindUniqueArgs} args - Arguments to find a CustomerPackage
     * @example
     * // Get one CustomerPackage
     * const customerPackage = await prisma.customerPackage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerPackageFindUniqueArgs>(args: SelectSubset<T, CustomerPackageFindUniqueArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerPackage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerPackageFindUniqueOrThrowArgs} args - Arguments to find a CustomerPackage
     * @example
     * // Get one CustomerPackage
     * const customerPackage = await prisma.customerPackage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerPackageFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerPackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerPackage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageFindFirstArgs} args - Arguments to find a CustomerPackage
     * @example
     * // Get one CustomerPackage
     * const customerPackage = await prisma.customerPackage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerPackageFindFirstArgs>(args?: SelectSubset<T, CustomerPackageFindFirstArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerPackage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageFindFirstOrThrowArgs} args - Arguments to find a CustomerPackage
     * @example
     * // Get one CustomerPackage
     * const customerPackage = await prisma.customerPackage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerPackageFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerPackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerPackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerPackages
     * const customerPackages = await prisma.customerPackage.findMany()
     * 
     * // Get first 10 CustomerPackages
     * const customerPackages = await prisma.customerPackage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerPackageWithIdOnly = await prisma.customerPackage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerPackageFindManyArgs>(args?: SelectSubset<T, CustomerPackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerPackage.
     * @param {CustomerPackageCreateArgs} args - Arguments to create a CustomerPackage.
     * @example
     * // Create one CustomerPackage
     * const CustomerPackage = await prisma.customerPackage.create({
     *   data: {
     *     // ... data to create a CustomerPackage
     *   }
     * })
     * 
     */
    create<T extends CustomerPackageCreateArgs>(args: SelectSubset<T, CustomerPackageCreateArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerPackages.
     * @param {CustomerPackageCreateManyArgs} args - Arguments to create many CustomerPackages.
     * @example
     * // Create many CustomerPackages
     * const customerPackage = await prisma.customerPackage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerPackageCreateManyArgs>(args?: SelectSubset<T, CustomerPackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerPackages and returns the data saved in the database.
     * @param {CustomerPackageCreateManyAndReturnArgs} args - Arguments to create many CustomerPackages.
     * @example
     * // Create many CustomerPackages
     * const customerPackage = await prisma.customerPackage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerPackages and only return the `id`
     * const customerPackageWithIdOnly = await prisma.customerPackage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerPackageCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerPackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerPackage.
     * @param {CustomerPackageDeleteArgs} args - Arguments to delete one CustomerPackage.
     * @example
     * // Delete one CustomerPackage
     * const CustomerPackage = await prisma.customerPackage.delete({
     *   where: {
     *     // ... filter to delete one CustomerPackage
     *   }
     * })
     * 
     */
    delete<T extends CustomerPackageDeleteArgs>(args: SelectSubset<T, CustomerPackageDeleteArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerPackage.
     * @param {CustomerPackageUpdateArgs} args - Arguments to update one CustomerPackage.
     * @example
     * // Update one CustomerPackage
     * const customerPackage = await prisma.customerPackage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerPackageUpdateArgs>(args: SelectSubset<T, CustomerPackageUpdateArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerPackages.
     * @param {CustomerPackageDeleteManyArgs} args - Arguments to filter CustomerPackages to delete.
     * @example
     * // Delete a few CustomerPackages
     * const { count } = await prisma.customerPackage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerPackageDeleteManyArgs>(args?: SelectSubset<T, CustomerPackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerPackages
     * const customerPackage = await prisma.customerPackage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerPackageUpdateManyArgs>(args: SelectSubset<T, CustomerPackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPackages and returns the data updated in the database.
     * @param {CustomerPackageUpdateManyAndReturnArgs} args - Arguments to update many CustomerPackages.
     * @example
     * // Update many CustomerPackages
     * const customerPackage = await prisma.customerPackage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerPackages and only return the `id`
     * const customerPackageWithIdOnly = await prisma.customerPackage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerPackageUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerPackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerPackage.
     * @param {CustomerPackageUpsertArgs} args - Arguments to update or create a CustomerPackage.
     * @example
     * // Update or create a CustomerPackage
     * const customerPackage = await prisma.customerPackage.upsert({
     *   create: {
     *     // ... data to create a CustomerPackage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerPackage we want to update
     *   }
     * })
     */
    upsert<T extends CustomerPackageUpsertArgs>(args: SelectSubset<T, CustomerPackageUpsertArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageCountArgs} args - Arguments to filter CustomerPackages to count.
     * @example
     * // Count the number of CustomerPackages
     * const count = await prisma.customerPackage.count({
     *   where: {
     *     // ... the filter for the CustomerPackages we want to count
     *   }
     * })
    **/
    count<T extends CustomerPackageCountArgs>(
      args?: Subset<T, CustomerPackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerPackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerPackageAggregateArgs>(args: Subset<T, CustomerPackageAggregateArgs>): Prisma.PrismaPromise<GetCustomerPackageAggregateType<T>>

    /**
     * Group by CustomerPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerPackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerPackageGroupByArgs['orderBy'] }
        : { orderBy?: CustomerPackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerPackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerPackage model
   */
  readonly fields: CustomerPackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerPackage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerPackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoice<T extends CustomerPackage$invoiceArgs<ExtArgs> = {}>(args?: Subset<T, CustomerPackage$invoiceArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerPackage model
   */
  interface CustomerPackageFieldRefs {
    readonly id: FieldRef<"CustomerPackage", 'String'>
    readonly purchaseDate: FieldRef<"CustomerPackage", 'DateTime'>
    readonly expiryDate: FieldRef<"CustomerPackage", 'DateTime'>
    readonly remainingSessions: FieldRef<"CustomerPackage", 'Json'>
    readonly notes: FieldRef<"CustomerPackage", 'String'>
    readonly salesCode: FieldRef<"CustomerPackage", 'String'>
    readonly customerId: FieldRef<"CustomerPackage", 'String'>
    readonly packageId: FieldRef<"CustomerPackage", 'String'>
    readonly createdAt: FieldRef<"CustomerPackage", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerPackage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerPackage findUnique
   */
  export type CustomerPackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPackage to fetch.
     */
    where: CustomerPackageWhereUniqueInput
  }

  /**
   * CustomerPackage findUniqueOrThrow
   */
  export type CustomerPackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPackage to fetch.
     */
    where: CustomerPackageWhereUniqueInput
  }

  /**
   * CustomerPackage findFirst
   */
  export type CustomerPackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPackage to fetch.
     */
    where?: CustomerPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPackages to fetch.
     */
    orderBy?: CustomerPackageOrderByWithRelationInput | CustomerPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerPackages.
     */
    cursor?: CustomerPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerPackages.
     */
    distinct?: CustomerPackageScalarFieldEnum | CustomerPackageScalarFieldEnum[]
  }

  /**
   * CustomerPackage findFirstOrThrow
   */
  export type CustomerPackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPackage to fetch.
     */
    where?: CustomerPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPackages to fetch.
     */
    orderBy?: CustomerPackageOrderByWithRelationInput | CustomerPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerPackages.
     */
    cursor?: CustomerPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerPackages.
     */
    distinct?: CustomerPackageScalarFieldEnum | CustomerPackageScalarFieldEnum[]
  }

  /**
   * CustomerPackage findMany
   */
  export type CustomerPackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPackages to fetch.
     */
    where?: CustomerPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPackages to fetch.
     */
    orderBy?: CustomerPackageOrderByWithRelationInput | CustomerPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerPackages.
     */
    cursor?: CustomerPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPackages.
     */
    skip?: number
    distinct?: CustomerPackageScalarFieldEnum | CustomerPackageScalarFieldEnum[]
  }

  /**
   * CustomerPackage create
   */
  export type CustomerPackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerPackage.
     */
    data: XOR<CustomerPackageCreateInput, CustomerPackageUncheckedCreateInput>
  }

  /**
   * CustomerPackage createMany
   */
  export type CustomerPackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerPackages.
     */
    data: CustomerPackageCreateManyInput | CustomerPackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerPackage createManyAndReturn
   */
  export type CustomerPackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerPackages.
     */
    data: CustomerPackageCreateManyInput | CustomerPackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerPackage update
   */
  export type CustomerPackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerPackage.
     */
    data: XOR<CustomerPackageUpdateInput, CustomerPackageUncheckedUpdateInput>
    /**
     * Choose, which CustomerPackage to update.
     */
    where: CustomerPackageWhereUniqueInput
  }

  /**
   * CustomerPackage updateMany
   */
  export type CustomerPackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerPackages.
     */
    data: XOR<CustomerPackageUpdateManyMutationInput, CustomerPackageUncheckedUpdateManyInput>
    /**
     * Filter which CustomerPackages to update
     */
    where?: CustomerPackageWhereInput
    /**
     * Limit how many CustomerPackages to update.
     */
    limit?: number
  }

  /**
   * CustomerPackage updateManyAndReturn
   */
  export type CustomerPackageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * The data used to update CustomerPackages.
     */
    data: XOR<CustomerPackageUpdateManyMutationInput, CustomerPackageUncheckedUpdateManyInput>
    /**
     * Filter which CustomerPackages to update
     */
    where?: CustomerPackageWhereInput
    /**
     * Limit how many CustomerPackages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerPackage upsert
   */
  export type CustomerPackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerPackage to update in case it exists.
     */
    where: CustomerPackageWhereUniqueInput
    /**
     * In case the CustomerPackage found by the `where` argument doesn't exist, create a new CustomerPackage with this data.
     */
    create: XOR<CustomerPackageCreateInput, CustomerPackageUncheckedCreateInput>
    /**
     * In case the CustomerPackage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerPackageUpdateInput, CustomerPackageUncheckedUpdateInput>
  }

  /**
   * CustomerPackage delete
   */
  export type CustomerPackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    /**
     * Filter which CustomerPackage to delete.
     */
    where: CustomerPackageWhereUniqueInput
  }

  /**
   * CustomerPackage deleteMany
   */
  export type CustomerPackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerPackages to delete
     */
    where?: CustomerPackageWhereInput
    /**
     * Limit how many CustomerPackages to delete.
     */
    limit?: number
  }

  /**
   * CustomerPackage.invoice
   */
  export type CustomerPackage$invoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
  }

  /**
   * CustomerPackage without action
   */
  export type CustomerPackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    totalAmount: number | null
    amountPaid: number | null
    debt: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    totalAmount: number | null
    amountPaid: number | null
    debt: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    totalAmount: number | null
    amountPaid: number | null
    debt: number | null
    status: $Enums.PaymentStatus | null
    customerId: string | null
    branchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    appointmentId: string | null
    customerPackageId: string | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    totalAmount: number | null
    amountPaid: number | null
    debt: number | null
    status: $Enums.PaymentStatus | null
    customerId: string | null
    branchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    appointmentId: string | null
    customerPackageId: string | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    totalAmount: number
    amountPaid: number
    debt: number
    status: number
    customerId: number
    branchId: number
    createdAt: number
    updatedAt: number
    appointmentId: number
    customerPackageId: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    totalAmount?: true
    amountPaid?: true
    debt?: true
  }

  export type InvoiceSumAggregateInputType = {
    totalAmount?: true
    amountPaid?: true
    debt?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    totalAmount?: true
    amountPaid?: true
    debt?: true
    status?: true
    customerId?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    appointmentId?: true
    customerPackageId?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    totalAmount?: true
    amountPaid?: true
    debt?: true
    status?: true
    customerId?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    appointmentId?: true
    customerPackageId?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    totalAmount?: true
    amountPaid?: true
    debt?: true
    status?: true
    customerId?: true
    branchId?: true
    createdAt?: true
    updatedAt?: true
    appointmentId?: true
    customerPackageId?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt: Date
    updatedAt: Date
    appointmentId: string | null
    customerPackageId: string | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalAmount?: boolean
    amountPaid?: boolean
    debt?: boolean
    status?: boolean
    customerId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointmentId?: boolean
    customerPackageId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointment?: boolean | Invoice$appointmentArgs<ExtArgs>
    customerPackage?: boolean | Invoice$customerPackageArgs<ExtArgs>
    payments?: boolean | Invoice$paymentsArgs<ExtArgs>
    commissionItems?: boolean | Invoice$commissionItemsArgs<ExtArgs>
    StaffCommission?: boolean | Invoice$StaffCommissionArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalAmount?: boolean
    amountPaid?: boolean
    debt?: boolean
    status?: boolean
    customerId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointmentId?: boolean
    customerPackageId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointment?: boolean | Invoice$appointmentArgs<ExtArgs>
    customerPackage?: boolean | Invoice$customerPackageArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalAmount?: boolean
    amountPaid?: boolean
    debt?: boolean
    status?: boolean
    customerId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointmentId?: boolean
    customerPackageId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointment?: boolean | Invoice$appointmentArgs<ExtArgs>
    customerPackage?: boolean | Invoice$customerPackageArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    totalAmount?: boolean
    amountPaid?: boolean
    debt?: boolean
    status?: boolean
    customerId?: boolean
    branchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointmentId?: boolean
    customerPackageId?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "totalAmount" | "amountPaid" | "debt" | "status" | "customerId" | "branchId" | "createdAt" | "updatedAt" | "appointmentId" | "customerPackageId", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointment?: boolean | Invoice$appointmentArgs<ExtArgs>
    customerPackage?: boolean | Invoice$customerPackageArgs<ExtArgs>
    payments?: boolean | Invoice$paymentsArgs<ExtArgs>
    commissionItems?: boolean | Invoice$commissionItemsArgs<ExtArgs>
    StaffCommission?: boolean | Invoice$StaffCommissionArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointment?: boolean | Invoice$appointmentArgs<ExtArgs>
    customerPackage?: boolean | Invoice$customerPackageArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    appointment?: boolean | Invoice$appointmentArgs<ExtArgs>
    customerPackage?: boolean | Invoice$customerPackageArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
      customerPackage: Prisma.$CustomerPackagePayload<ExtArgs> | null
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      commissionItems: Prisma.$CommissionItemPayload<ExtArgs>[]
      StaffCommission: Prisma.$StaffCommissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      totalAmount: number
      amountPaid: number
      debt: number
      status: $Enums.PaymentStatus
      customerId: string
      branchId: string
      createdAt: Date
      updatedAt: Date
      appointmentId: string | null
      customerPackageId: string | null
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointment<T extends Invoice$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    customerPackage<T extends Invoice$customerPackageArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$customerPackageArgs<ExtArgs>>): Prisma__CustomerPackageClient<$Result.GetResult<Prisma.$CustomerPackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    payments<T extends Invoice$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commissionItems<T extends Invoice$commissionItemsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$commissionItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StaffCommission<T extends Invoice$StaffCommissionArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$StaffCommissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'String'>
    readonly totalAmount: FieldRef<"Invoice", 'Float'>
    readonly amountPaid: FieldRef<"Invoice", 'Float'>
    readonly debt: FieldRef<"Invoice", 'Float'>
    readonly status: FieldRef<"Invoice", 'PaymentStatus'>
    readonly customerId: FieldRef<"Invoice", 'String'>
    readonly branchId: FieldRef<"Invoice", 'String'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly updatedAt: FieldRef<"Invoice", 'DateTime'>
    readonly appointmentId: FieldRef<"Invoice", 'String'>
    readonly customerPackageId: FieldRef<"Invoice", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.appointment
   */
  export type Invoice$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * Invoice.customerPackage
   */
  export type Invoice$customerPackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPackage
     */
    select?: CustomerPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPackage
     */
    omit?: CustomerPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPackageInclude<ExtArgs> | null
    where?: CustomerPackageWhereInput
  }

  /**
   * Invoice.payments
   */
  export type Invoice$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Invoice.commissionItems
   */
  export type Invoice$commissionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    where?: CommissionItemWhereInput
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    cursor?: CommissionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommissionItemScalarFieldEnum | CommissionItemScalarFieldEnum[]
  }

  /**
   * Invoice.StaffCommission
   */
  export type Invoice$StaffCommissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    where?: StaffCommissionWhereInput
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    cursor?: StaffCommissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    amount: number | null
    method: $Enums.PaymentMethod | null
    paymentDate: Date | null
    invoiceId: string | null
    cashRegisterLogId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    method: $Enums.PaymentMethod | null
    paymentDate: Date | null
    invoiceId: string | null
    cashRegisterLogId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    amount: number
    method: number
    paymentDate: number
    invoiceId: number
    cashRegisterLogId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    amount?: true
    method?: true
    paymentDate?: true
    invoiceId?: true
    cashRegisterLogId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    amount?: true
    method?: true
    paymentDate?: true
    invoiceId?: true
    cashRegisterLogId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    amount?: true
    method?: true
    paymentDate?: true
    invoiceId?: true
    cashRegisterLogId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate: Date
    invoiceId: string
    cashRegisterLogId: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    method?: boolean
    paymentDate?: boolean
    invoiceId?: boolean
    cashRegisterLogId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    cashLog?: boolean | Payment$cashLogArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    method?: boolean
    paymentDate?: boolean
    invoiceId?: boolean
    cashRegisterLogId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    cashLog?: boolean | Payment$cashLogArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    method?: boolean
    paymentDate?: boolean
    invoiceId?: boolean
    cashRegisterLogId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    cashLog?: boolean | Payment$cashLogArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    amount?: boolean
    method?: boolean
    paymentDate?: boolean
    invoiceId?: boolean
    cashRegisterLogId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "method" | "paymentDate" | "invoiceId" | "cashRegisterLogId" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    cashLog?: boolean | Payment$cashLogArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    cashLog?: boolean | Payment$cashLogArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    cashLog?: boolean | Payment$cashLogArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
      cashLog: Prisma.$CashRegisterLogPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      method: $Enums.PaymentMethod
      paymentDate: Date
      invoiceId: string
      cashRegisterLogId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cashLog<T extends Payment$cashLogArgs<ExtArgs> = {}>(args?: Subset<T, Payment$cashLogArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Float'>
    readonly method: FieldRef<"Payment", 'PaymentMethod'>
    readonly paymentDate: FieldRef<"Payment", 'DateTime'>
    readonly invoiceId: FieldRef<"Payment", 'String'>
    readonly cashRegisterLogId: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.cashLog
   */
  export type Payment$cashLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    where?: CashRegisterLogWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model CommissionRule
   */

  export type AggregateCommissionRule = {
    _count: CommissionRuleCountAggregateOutputType | null
    _avg: CommissionRuleAvgAggregateOutputType | null
    _sum: CommissionRuleSumAggregateOutputType | null
    _min: CommissionRuleMinAggregateOutputType | null
    _max: CommissionRuleMaxAggregateOutputType | null
  }

  export type CommissionRuleAvgAggregateOutputType = {
    rate: number | null
    fixedAmount: number | null
  }

  export type CommissionRuleSumAggregateOutputType = {
    rate: number | null
    fixedAmount: number | null
  }

  export type CommissionRuleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ruleType: $Enums.CommissionRuleType | null
    type: $Enums.CommissionType | null
    rate: number | null
    fixedAmount: number | null
    startDate: Date | null
    endDate: Date | null
    branchId: string | null
    serviceId: string | null
    staffId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommissionRuleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ruleType: $Enums.CommissionRuleType | null
    type: $Enums.CommissionType | null
    rate: number | null
    fixedAmount: number | null
    startDate: Date | null
    endDate: Date | null
    branchId: string | null
    serviceId: string | null
    staffId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommissionRuleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    ruleType: number
    type: number
    rate: number
    fixedAmount: number
    startDate: number
    endDate: number
    branchId: number
    serviceId: number
    staffId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommissionRuleAvgAggregateInputType = {
    rate?: true
    fixedAmount?: true
  }

  export type CommissionRuleSumAggregateInputType = {
    rate?: true
    fixedAmount?: true
  }

  export type CommissionRuleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ruleType?: true
    type?: true
    rate?: true
    fixedAmount?: true
    startDate?: true
    endDate?: true
    branchId?: true
    serviceId?: true
    staffId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommissionRuleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ruleType?: true
    type?: true
    rate?: true
    fixedAmount?: true
    startDate?: true
    endDate?: true
    branchId?: true
    serviceId?: true
    staffId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommissionRuleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ruleType?: true
    type?: true
    rate?: true
    fixedAmount?: true
    startDate?: true
    endDate?: true
    branchId?: true
    serviceId?: true
    staffId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommissionRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommissionRule to aggregate.
     */
    where?: CommissionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionRules to fetch.
     */
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommissionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommissionRules
    **/
    _count?: true | CommissionRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommissionRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommissionRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommissionRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommissionRuleMaxAggregateInputType
  }

  export type GetCommissionRuleAggregateType<T extends CommissionRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateCommissionRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommissionRule[P]>
      : GetScalarType<T[P], AggregateCommissionRule[P]>
  }




  export type CommissionRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionRuleWhereInput
    orderBy?: CommissionRuleOrderByWithAggregationInput | CommissionRuleOrderByWithAggregationInput[]
    by: CommissionRuleScalarFieldEnum[] | CommissionRuleScalarFieldEnum
    having?: CommissionRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommissionRuleCountAggregateInputType | true
    _avg?: CommissionRuleAvgAggregateInputType
    _sum?: CommissionRuleSumAggregateInputType
    _min?: CommissionRuleMinAggregateInputType
    _max?: CommissionRuleMaxAggregateInputType
  }

  export type CommissionRuleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    ruleType: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate: number
    fixedAmount: number
    startDate: Date
    endDate: Date | null
    branchId: string
    serviceId: string | null
    staffId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CommissionRuleCountAggregateOutputType | null
    _avg: CommissionRuleAvgAggregateOutputType | null
    _sum: CommissionRuleSumAggregateOutputType | null
    _min: CommissionRuleMinAggregateOutputType | null
    _max: CommissionRuleMaxAggregateOutputType | null
  }

  type GetCommissionRuleGroupByPayload<T extends CommissionRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommissionRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommissionRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommissionRuleGroupByOutputType[P]>
            : GetScalarType<T[P], CommissionRuleGroupByOutputType[P]>
        }
      >
    >


  export type CommissionRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ruleType?: boolean
    type?: boolean
    rate?: boolean
    fixedAmount?: boolean
    startDate?: boolean
    endDate?: boolean
    branchId?: boolean
    serviceId?: boolean
    staffId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    service?: boolean | CommissionRule$serviceArgs<ExtArgs>
    staff?: boolean | CommissionRule$staffArgs<ExtArgs>
    commissionItems?: boolean | CommissionRule$commissionItemsArgs<ExtArgs>
    _count?: boolean | CommissionRuleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commissionRule"]>

  export type CommissionRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ruleType?: boolean
    type?: boolean
    rate?: boolean
    fixedAmount?: boolean
    startDate?: boolean
    endDate?: boolean
    branchId?: boolean
    serviceId?: boolean
    staffId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    service?: boolean | CommissionRule$serviceArgs<ExtArgs>
    staff?: boolean | CommissionRule$staffArgs<ExtArgs>
  }, ExtArgs["result"]["commissionRule"]>

  export type CommissionRuleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ruleType?: boolean
    type?: boolean
    rate?: boolean
    fixedAmount?: boolean
    startDate?: boolean
    endDate?: boolean
    branchId?: boolean
    serviceId?: boolean
    staffId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    service?: boolean | CommissionRule$serviceArgs<ExtArgs>
    staff?: boolean | CommissionRule$staffArgs<ExtArgs>
  }, ExtArgs["result"]["commissionRule"]>

  export type CommissionRuleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    ruleType?: boolean
    type?: boolean
    rate?: boolean
    fixedAmount?: boolean
    startDate?: boolean
    endDate?: boolean
    branchId?: boolean
    serviceId?: boolean
    staffId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommissionRuleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "ruleType" | "type" | "rate" | "fixedAmount" | "startDate" | "endDate" | "branchId" | "serviceId" | "staffId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["commissionRule"]>
  export type CommissionRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    service?: boolean | CommissionRule$serviceArgs<ExtArgs>
    staff?: boolean | CommissionRule$staffArgs<ExtArgs>
    commissionItems?: boolean | CommissionRule$commissionItemsArgs<ExtArgs>
    _count?: boolean | CommissionRuleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommissionRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    service?: boolean | CommissionRule$serviceArgs<ExtArgs>
    staff?: boolean | CommissionRule$staffArgs<ExtArgs>
  }
  export type CommissionRuleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    service?: boolean | CommissionRule$serviceArgs<ExtArgs>
    staff?: boolean | CommissionRule$staffArgs<ExtArgs>
  }

  export type $CommissionRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommissionRule"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs> | null
      staff: Prisma.$UserPayload<ExtArgs> | null
      commissionItems: Prisma.$CommissionItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      ruleType: $Enums.CommissionRuleType
      type: $Enums.CommissionType
      rate: number
      fixedAmount: number
      startDate: Date
      endDate: Date | null
      branchId: string
      serviceId: string | null
      staffId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["commissionRule"]>
    composites: {}
  }

  type CommissionRuleGetPayload<S extends boolean | null | undefined | CommissionRuleDefaultArgs> = $Result.GetResult<Prisma.$CommissionRulePayload, S>

  type CommissionRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommissionRuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommissionRuleCountAggregateInputType | true
    }

  export interface CommissionRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommissionRule'], meta: { name: 'CommissionRule' } }
    /**
     * Find zero or one CommissionRule that matches the filter.
     * @param {CommissionRuleFindUniqueArgs} args - Arguments to find a CommissionRule
     * @example
     * // Get one CommissionRule
     * const commissionRule = await prisma.commissionRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommissionRuleFindUniqueArgs>(args: SelectSubset<T, CommissionRuleFindUniqueArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CommissionRule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommissionRuleFindUniqueOrThrowArgs} args - Arguments to find a CommissionRule
     * @example
     * // Get one CommissionRule
     * const commissionRule = await prisma.commissionRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommissionRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, CommissionRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommissionRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleFindFirstArgs} args - Arguments to find a CommissionRule
     * @example
     * // Get one CommissionRule
     * const commissionRule = await prisma.commissionRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommissionRuleFindFirstArgs>(args?: SelectSubset<T, CommissionRuleFindFirstArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommissionRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleFindFirstOrThrowArgs} args - Arguments to find a CommissionRule
     * @example
     * // Get one CommissionRule
     * const commissionRule = await prisma.commissionRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommissionRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, CommissionRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CommissionRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommissionRules
     * const commissionRules = await prisma.commissionRule.findMany()
     * 
     * // Get first 10 CommissionRules
     * const commissionRules = await prisma.commissionRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commissionRuleWithIdOnly = await prisma.commissionRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommissionRuleFindManyArgs>(args?: SelectSubset<T, CommissionRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CommissionRule.
     * @param {CommissionRuleCreateArgs} args - Arguments to create a CommissionRule.
     * @example
     * // Create one CommissionRule
     * const CommissionRule = await prisma.commissionRule.create({
     *   data: {
     *     // ... data to create a CommissionRule
     *   }
     * })
     * 
     */
    create<T extends CommissionRuleCreateArgs>(args: SelectSubset<T, CommissionRuleCreateArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CommissionRules.
     * @param {CommissionRuleCreateManyArgs} args - Arguments to create many CommissionRules.
     * @example
     * // Create many CommissionRules
     * const commissionRule = await prisma.commissionRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommissionRuleCreateManyArgs>(args?: SelectSubset<T, CommissionRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommissionRules and returns the data saved in the database.
     * @param {CommissionRuleCreateManyAndReturnArgs} args - Arguments to create many CommissionRules.
     * @example
     * // Create many CommissionRules
     * const commissionRule = await prisma.commissionRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommissionRules and only return the `id`
     * const commissionRuleWithIdOnly = await prisma.commissionRule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommissionRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, CommissionRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CommissionRule.
     * @param {CommissionRuleDeleteArgs} args - Arguments to delete one CommissionRule.
     * @example
     * // Delete one CommissionRule
     * const CommissionRule = await prisma.commissionRule.delete({
     *   where: {
     *     // ... filter to delete one CommissionRule
     *   }
     * })
     * 
     */
    delete<T extends CommissionRuleDeleteArgs>(args: SelectSubset<T, CommissionRuleDeleteArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CommissionRule.
     * @param {CommissionRuleUpdateArgs} args - Arguments to update one CommissionRule.
     * @example
     * // Update one CommissionRule
     * const commissionRule = await prisma.commissionRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommissionRuleUpdateArgs>(args: SelectSubset<T, CommissionRuleUpdateArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CommissionRules.
     * @param {CommissionRuleDeleteManyArgs} args - Arguments to filter CommissionRules to delete.
     * @example
     * // Delete a few CommissionRules
     * const { count } = await prisma.commissionRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommissionRuleDeleteManyArgs>(args?: SelectSubset<T, CommissionRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommissionRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommissionRules
     * const commissionRule = await prisma.commissionRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommissionRuleUpdateManyArgs>(args: SelectSubset<T, CommissionRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommissionRules and returns the data updated in the database.
     * @param {CommissionRuleUpdateManyAndReturnArgs} args - Arguments to update many CommissionRules.
     * @example
     * // Update many CommissionRules
     * const commissionRule = await prisma.commissionRule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CommissionRules and only return the `id`
     * const commissionRuleWithIdOnly = await prisma.commissionRule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommissionRuleUpdateManyAndReturnArgs>(args: SelectSubset<T, CommissionRuleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CommissionRule.
     * @param {CommissionRuleUpsertArgs} args - Arguments to update or create a CommissionRule.
     * @example
     * // Update or create a CommissionRule
     * const commissionRule = await prisma.commissionRule.upsert({
     *   create: {
     *     // ... data to create a CommissionRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommissionRule we want to update
     *   }
     * })
     */
    upsert<T extends CommissionRuleUpsertArgs>(args: SelectSubset<T, CommissionRuleUpsertArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CommissionRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleCountArgs} args - Arguments to filter CommissionRules to count.
     * @example
     * // Count the number of CommissionRules
     * const count = await prisma.commissionRule.count({
     *   where: {
     *     // ... the filter for the CommissionRules we want to count
     *   }
     * })
    **/
    count<T extends CommissionRuleCountArgs>(
      args?: Subset<T, CommissionRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommissionRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommissionRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommissionRuleAggregateArgs>(args: Subset<T, CommissionRuleAggregateArgs>): Prisma.PrismaPromise<GetCommissionRuleAggregateType<T>>

    /**
     * Group by CommissionRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommissionRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommissionRuleGroupByArgs['orderBy'] }
        : { orderBy?: CommissionRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommissionRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommissionRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommissionRule model
   */
  readonly fields: CommissionRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommissionRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommissionRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends CommissionRule$serviceArgs<ExtArgs> = {}>(args?: Subset<T, CommissionRule$serviceArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staff<T extends CommissionRule$staffArgs<ExtArgs> = {}>(args?: Subset<T, CommissionRule$staffArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    commissionItems<T extends CommissionRule$commissionItemsArgs<ExtArgs> = {}>(args?: Subset<T, CommissionRule$commissionItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommissionRule model
   */
  interface CommissionRuleFieldRefs {
    readonly id: FieldRef<"CommissionRule", 'String'>
    readonly name: FieldRef<"CommissionRule", 'String'>
    readonly description: FieldRef<"CommissionRule", 'String'>
    readonly ruleType: FieldRef<"CommissionRule", 'CommissionRuleType'>
    readonly type: FieldRef<"CommissionRule", 'CommissionType'>
    readonly rate: FieldRef<"CommissionRule", 'Float'>
    readonly fixedAmount: FieldRef<"CommissionRule", 'Float'>
    readonly startDate: FieldRef<"CommissionRule", 'DateTime'>
    readonly endDate: FieldRef<"CommissionRule", 'DateTime'>
    readonly branchId: FieldRef<"CommissionRule", 'String'>
    readonly serviceId: FieldRef<"CommissionRule", 'String'>
    readonly staffId: FieldRef<"CommissionRule", 'String'>
    readonly isActive: FieldRef<"CommissionRule", 'Boolean'>
    readonly createdAt: FieldRef<"CommissionRule", 'DateTime'>
    readonly updatedAt: FieldRef<"CommissionRule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommissionRule findUnique
   */
  export type CommissionRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * Filter, which CommissionRule to fetch.
     */
    where: CommissionRuleWhereUniqueInput
  }

  /**
   * CommissionRule findUniqueOrThrow
   */
  export type CommissionRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * Filter, which CommissionRule to fetch.
     */
    where: CommissionRuleWhereUniqueInput
  }

  /**
   * CommissionRule findFirst
   */
  export type CommissionRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * Filter, which CommissionRule to fetch.
     */
    where?: CommissionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionRules to fetch.
     */
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommissionRules.
     */
    cursor?: CommissionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommissionRules.
     */
    distinct?: CommissionRuleScalarFieldEnum | CommissionRuleScalarFieldEnum[]
  }

  /**
   * CommissionRule findFirstOrThrow
   */
  export type CommissionRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * Filter, which CommissionRule to fetch.
     */
    where?: CommissionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionRules to fetch.
     */
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommissionRules.
     */
    cursor?: CommissionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommissionRules.
     */
    distinct?: CommissionRuleScalarFieldEnum | CommissionRuleScalarFieldEnum[]
  }

  /**
   * CommissionRule findMany
   */
  export type CommissionRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * Filter, which CommissionRules to fetch.
     */
    where?: CommissionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionRules to fetch.
     */
    orderBy?: CommissionRuleOrderByWithRelationInput | CommissionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommissionRules.
     */
    cursor?: CommissionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionRules.
     */
    skip?: number
    distinct?: CommissionRuleScalarFieldEnum | CommissionRuleScalarFieldEnum[]
  }

  /**
   * CommissionRule create
   */
  export type CommissionRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a CommissionRule.
     */
    data: XOR<CommissionRuleCreateInput, CommissionRuleUncheckedCreateInput>
  }

  /**
   * CommissionRule createMany
   */
  export type CommissionRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommissionRules.
     */
    data: CommissionRuleCreateManyInput | CommissionRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommissionRule createManyAndReturn
   */
  export type CommissionRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * The data used to create many CommissionRules.
     */
    data: CommissionRuleCreateManyInput | CommissionRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommissionRule update
   */
  export type CommissionRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a CommissionRule.
     */
    data: XOR<CommissionRuleUpdateInput, CommissionRuleUncheckedUpdateInput>
    /**
     * Choose, which CommissionRule to update.
     */
    where: CommissionRuleWhereUniqueInput
  }

  /**
   * CommissionRule updateMany
   */
  export type CommissionRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommissionRules.
     */
    data: XOR<CommissionRuleUpdateManyMutationInput, CommissionRuleUncheckedUpdateManyInput>
    /**
     * Filter which CommissionRules to update
     */
    where?: CommissionRuleWhereInput
    /**
     * Limit how many CommissionRules to update.
     */
    limit?: number
  }

  /**
   * CommissionRule updateManyAndReturn
   */
  export type CommissionRuleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * The data used to update CommissionRules.
     */
    data: XOR<CommissionRuleUpdateManyMutationInput, CommissionRuleUncheckedUpdateManyInput>
    /**
     * Filter which CommissionRules to update
     */
    where?: CommissionRuleWhereInput
    /**
     * Limit how many CommissionRules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommissionRule upsert
   */
  export type CommissionRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the CommissionRule to update in case it exists.
     */
    where: CommissionRuleWhereUniqueInput
    /**
     * In case the CommissionRule found by the `where` argument doesn't exist, create a new CommissionRule with this data.
     */
    create: XOR<CommissionRuleCreateInput, CommissionRuleUncheckedCreateInput>
    /**
     * In case the CommissionRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommissionRuleUpdateInput, CommissionRuleUncheckedUpdateInput>
  }

  /**
   * CommissionRule delete
   */
  export type CommissionRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    /**
     * Filter which CommissionRule to delete.
     */
    where: CommissionRuleWhereUniqueInput
  }

  /**
   * CommissionRule deleteMany
   */
  export type CommissionRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommissionRules to delete
     */
    where?: CommissionRuleWhereInput
    /**
     * Limit how many CommissionRules to delete.
     */
    limit?: number
  }

  /**
   * CommissionRule.service
   */
  export type CommissionRule$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
  }

  /**
   * CommissionRule.staff
   */
  export type CommissionRule$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CommissionRule.commissionItems
   */
  export type CommissionRule$commissionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    where?: CommissionItemWhereInput
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    cursor?: CommissionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommissionItemScalarFieldEnum | CommissionItemScalarFieldEnum[]
  }

  /**
   * CommissionRule without action
   */
  export type CommissionRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
  }


  /**
   * Model CommissionItem
   */

  export type AggregateCommissionItem = {
    _count: CommissionItemCountAggregateOutputType | null
    _avg: CommissionItemAvgAggregateOutputType | null
    _sum: CommissionItemSumAggregateOutputType | null
    _min: CommissionItemMinAggregateOutputType | null
    _max: CommissionItemMaxAggregateOutputType | null
  }

  export type CommissionItemAvgAggregateOutputType = {
    amount: number | null
  }

  export type CommissionItemSumAggregateOutputType = {
    amount: number | null
  }

  export type CommissionItemMinAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    serviceId: string | null
    amount: number | null
    status: $Enums.CommissionStatus | null
    appliedRuleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommissionItemMaxAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    serviceId: string | null
    amount: number | null
    status: $Enums.CommissionStatus | null
    appliedRuleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommissionItemCountAggregateOutputType = {
    id: number
    invoiceId: number
    serviceId: number
    amount: number
    status: number
    appliedRuleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommissionItemAvgAggregateInputType = {
    amount?: true
  }

  export type CommissionItemSumAggregateInputType = {
    amount?: true
  }

  export type CommissionItemMinAggregateInputType = {
    id?: true
    invoiceId?: true
    serviceId?: true
    amount?: true
    status?: true
    appliedRuleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommissionItemMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    serviceId?: true
    amount?: true
    status?: true
    appliedRuleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommissionItemCountAggregateInputType = {
    id?: true
    invoiceId?: true
    serviceId?: true
    amount?: true
    status?: true
    appliedRuleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommissionItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommissionItem to aggregate.
     */
    where?: CommissionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionItems to fetch.
     */
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommissionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommissionItems
    **/
    _count?: true | CommissionItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommissionItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommissionItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommissionItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommissionItemMaxAggregateInputType
  }

  export type GetCommissionItemAggregateType<T extends CommissionItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCommissionItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommissionItem[P]>
      : GetScalarType<T[P], AggregateCommissionItem[P]>
  }




  export type CommissionItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommissionItemWhereInput
    orderBy?: CommissionItemOrderByWithAggregationInput | CommissionItemOrderByWithAggregationInput[]
    by: CommissionItemScalarFieldEnum[] | CommissionItemScalarFieldEnum
    having?: CommissionItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommissionItemCountAggregateInputType | true
    _avg?: CommissionItemAvgAggregateInputType
    _sum?: CommissionItemSumAggregateInputType
    _min?: CommissionItemMinAggregateInputType
    _max?: CommissionItemMaxAggregateInputType
  }

  export type CommissionItemGroupByOutputType = {
    id: string
    invoiceId: string
    serviceId: string | null
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CommissionItemCountAggregateOutputType | null
    _avg: CommissionItemAvgAggregateOutputType | null
    _sum: CommissionItemSumAggregateOutputType | null
    _min: CommissionItemMinAggregateOutputType | null
    _max: CommissionItemMaxAggregateOutputType | null
  }

  type GetCommissionItemGroupByPayload<T extends CommissionItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommissionItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommissionItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommissionItemGroupByOutputType[P]>
            : GetScalarType<T[P], CommissionItemGroupByOutputType[P]>
        }
      >
    >


  export type CommissionItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    amount?: boolean
    status?: boolean
    appliedRuleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | CommissionItem$serviceArgs<ExtArgs>
    commissions?: boolean | CommissionItem$commissionsArgs<ExtArgs>
    appliedRule?: boolean | CommissionItem$appliedRuleArgs<ExtArgs>
    _count?: boolean | CommissionItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commissionItem"]>

  export type CommissionItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    amount?: boolean
    status?: boolean
    appliedRuleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | CommissionItem$serviceArgs<ExtArgs>
    appliedRule?: boolean | CommissionItem$appliedRuleArgs<ExtArgs>
  }, ExtArgs["result"]["commissionItem"]>

  export type CommissionItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    amount?: boolean
    status?: boolean
    appliedRuleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | CommissionItem$serviceArgs<ExtArgs>
    appliedRule?: boolean | CommissionItem$appliedRuleArgs<ExtArgs>
  }, ExtArgs["result"]["commissionItem"]>

  export type CommissionItemSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    amount?: boolean
    status?: boolean
    appliedRuleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommissionItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "serviceId" | "amount" | "status" | "appliedRuleId" | "createdAt" | "updatedAt", ExtArgs["result"]["commissionItem"]>
  export type CommissionItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | CommissionItem$serviceArgs<ExtArgs>
    commissions?: boolean | CommissionItem$commissionsArgs<ExtArgs>
    appliedRule?: boolean | CommissionItem$appliedRuleArgs<ExtArgs>
    _count?: boolean | CommissionItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommissionItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | CommissionItem$serviceArgs<ExtArgs>
    appliedRule?: boolean | CommissionItem$appliedRuleArgs<ExtArgs>
  }
  export type CommissionItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | CommissionItem$serviceArgs<ExtArgs>
    appliedRule?: boolean | CommissionItem$appliedRuleArgs<ExtArgs>
  }

  export type $CommissionItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommissionItem"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs> | null
      commissions: Prisma.$StaffCommissionPayload<ExtArgs>[]
      appliedRule: Prisma.$CommissionRulePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      invoiceId: string
      serviceId: string | null
      amount: number
      status: $Enums.CommissionStatus
      appliedRuleId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["commissionItem"]>
    composites: {}
  }

  type CommissionItemGetPayload<S extends boolean | null | undefined | CommissionItemDefaultArgs> = $Result.GetResult<Prisma.$CommissionItemPayload, S>

  type CommissionItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommissionItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommissionItemCountAggregateInputType | true
    }

  export interface CommissionItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommissionItem'], meta: { name: 'CommissionItem' } }
    /**
     * Find zero or one CommissionItem that matches the filter.
     * @param {CommissionItemFindUniqueArgs} args - Arguments to find a CommissionItem
     * @example
     * // Get one CommissionItem
     * const commissionItem = await prisma.commissionItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommissionItemFindUniqueArgs>(args: SelectSubset<T, CommissionItemFindUniqueArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CommissionItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommissionItemFindUniqueOrThrowArgs} args - Arguments to find a CommissionItem
     * @example
     * // Get one CommissionItem
     * const commissionItem = await prisma.commissionItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommissionItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CommissionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommissionItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemFindFirstArgs} args - Arguments to find a CommissionItem
     * @example
     * // Get one CommissionItem
     * const commissionItem = await prisma.commissionItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommissionItemFindFirstArgs>(args?: SelectSubset<T, CommissionItemFindFirstArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommissionItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemFindFirstOrThrowArgs} args - Arguments to find a CommissionItem
     * @example
     * // Get one CommissionItem
     * const commissionItem = await prisma.commissionItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommissionItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CommissionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CommissionItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommissionItems
     * const commissionItems = await prisma.commissionItem.findMany()
     * 
     * // Get first 10 CommissionItems
     * const commissionItems = await prisma.commissionItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commissionItemWithIdOnly = await prisma.commissionItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommissionItemFindManyArgs>(args?: SelectSubset<T, CommissionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CommissionItem.
     * @param {CommissionItemCreateArgs} args - Arguments to create a CommissionItem.
     * @example
     * // Create one CommissionItem
     * const CommissionItem = await prisma.commissionItem.create({
     *   data: {
     *     // ... data to create a CommissionItem
     *   }
     * })
     * 
     */
    create<T extends CommissionItemCreateArgs>(args: SelectSubset<T, CommissionItemCreateArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CommissionItems.
     * @param {CommissionItemCreateManyArgs} args - Arguments to create many CommissionItems.
     * @example
     * // Create many CommissionItems
     * const commissionItem = await prisma.commissionItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommissionItemCreateManyArgs>(args?: SelectSubset<T, CommissionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommissionItems and returns the data saved in the database.
     * @param {CommissionItemCreateManyAndReturnArgs} args - Arguments to create many CommissionItems.
     * @example
     * // Create many CommissionItems
     * const commissionItem = await prisma.commissionItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommissionItems and only return the `id`
     * const commissionItemWithIdOnly = await prisma.commissionItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommissionItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CommissionItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CommissionItem.
     * @param {CommissionItemDeleteArgs} args - Arguments to delete one CommissionItem.
     * @example
     * // Delete one CommissionItem
     * const CommissionItem = await prisma.commissionItem.delete({
     *   where: {
     *     // ... filter to delete one CommissionItem
     *   }
     * })
     * 
     */
    delete<T extends CommissionItemDeleteArgs>(args: SelectSubset<T, CommissionItemDeleteArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CommissionItem.
     * @param {CommissionItemUpdateArgs} args - Arguments to update one CommissionItem.
     * @example
     * // Update one CommissionItem
     * const commissionItem = await prisma.commissionItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommissionItemUpdateArgs>(args: SelectSubset<T, CommissionItemUpdateArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CommissionItems.
     * @param {CommissionItemDeleteManyArgs} args - Arguments to filter CommissionItems to delete.
     * @example
     * // Delete a few CommissionItems
     * const { count } = await prisma.commissionItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommissionItemDeleteManyArgs>(args?: SelectSubset<T, CommissionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommissionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommissionItems
     * const commissionItem = await prisma.commissionItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommissionItemUpdateManyArgs>(args: SelectSubset<T, CommissionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommissionItems and returns the data updated in the database.
     * @param {CommissionItemUpdateManyAndReturnArgs} args - Arguments to update many CommissionItems.
     * @example
     * // Update many CommissionItems
     * const commissionItem = await prisma.commissionItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CommissionItems and only return the `id`
     * const commissionItemWithIdOnly = await prisma.commissionItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommissionItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CommissionItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CommissionItem.
     * @param {CommissionItemUpsertArgs} args - Arguments to update or create a CommissionItem.
     * @example
     * // Update or create a CommissionItem
     * const commissionItem = await prisma.commissionItem.upsert({
     *   create: {
     *     // ... data to create a CommissionItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommissionItem we want to update
     *   }
     * })
     */
    upsert<T extends CommissionItemUpsertArgs>(args: SelectSubset<T, CommissionItemUpsertArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CommissionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemCountArgs} args - Arguments to filter CommissionItems to count.
     * @example
     * // Count the number of CommissionItems
     * const count = await prisma.commissionItem.count({
     *   where: {
     *     // ... the filter for the CommissionItems we want to count
     *   }
     * })
    **/
    count<T extends CommissionItemCountArgs>(
      args?: Subset<T, CommissionItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommissionItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommissionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommissionItemAggregateArgs>(args: Subset<T, CommissionItemAggregateArgs>): Prisma.PrismaPromise<GetCommissionItemAggregateType<T>>

    /**
     * Group by CommissionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommissionItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommissionItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommissionItemGroupByArgs['orderBy'] }
        : { orderBy?: CommissionItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommissionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommissionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommissionItem model
   */
  readonly fields: CommissionItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommissionItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommissionItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends CommissionItem$serviceArgs<ExtArgs> = {}>(args?: Subset<T, CommissionItem$serviceArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    commissions<T extends CommissionItem$commissionsArgs<ExtArgs> = {}>(args?: Subset<T, CommissionItem$commissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appliedRule<T extends CommissionItem$appliedRuleArgs<ExtArgs> = {}>(args?: Subset<T, CommissionItem$appliedRuleArgs<ExtArgs>>): Prisma__CommissionRuleClient<$Result.GetResult<Prisma.$CommissionRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommissionItem model
   */
  interface CommissionItemFieldRefs {
    readonly id: FieldRef<"CommissionItem", 'String'>
    readonly invoiceId: FieldRef<"CommissionItem", 'String'>
    readonly serviceId: FieldRef<"CommissionItem", 'String'>
    readonly amount: FieldRef<"CommissionItem", 'Float'>
    readonly status: FieldRef<"CommissionItem", 'CommissionStatus'>
    readonly appliedRuleId: FieldRef<"CommissionItem", 'String'>
    readonly createdAt: FieldRef<"CommissionItem", 'DateTime'>
    readonly updatedAt: FieldRef<"CommissionItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommissionItem findUnique
   */
  export type CommissionItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * Filter, which CommissionItem to fetch.
     */
    where: CommissionItemWhereUniqueInput
  }

  /**
   * CommissionItem findUniqueOrThrow
   */
  export type CommissionItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * Filter, which CommissionItem to fetch.
     */
    where: CommissionItemWhereUniqueInput
  }

  /**
   * CommissionItem findFirst
   */
  export type CommissionItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * Filter, which CommissionItem to fetch.
     */
    where?: CommissionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionItems to fetch.
     */
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommissionItems.
     */
    cursor?: CommissionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommissionItems.
     */
    distinct?: CommissionItemScalarFieldEnum | CommissionItemScalarFieldEnum[]
  }

  /**
   * CommissionItem findFirstOrThrow
   */
  export type CommissionItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * Filter, which CommissionItem to fetch.
     */
    where?: CommissionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionItems to fetch.
     */
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommissionItems.
     */
    cursor?: CommissionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommissionItems.
     */
    distinct?: CommissionItemScalarFieldEnum | CommissionItemScalarFieldEnum[]
  }

  /**
   * CommissionItem findMany
   */
  export type CommissionItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * Filter, which CommissionItems to fetch.
     */
    where?: CommissionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommissionItems to fetch.
     */
    orderBy?: CommissionItemOrderByWithRelationInput | CommissionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommissionItems.
     */
    cursor?: CommissionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommissionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommissionItems.
     */
    skip?: number
    distinct?: CommissionItemScalarFieldEnum | CommissionItemScalarFieldEnum[]
  }

  /**
   * CommissionItem create
   */
  export type CommissionItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CommissionItem.
     */
    data: XOR<CommissionItemCreateInput, CommissionItemUncheckedCreateInput>
  }

  /**
   * CommissionItem createMany
   */
  export type CommissionItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommissionItems.
     */
    data: CommissionItemCreateManyInput | CommissionItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommissionItem createManyAndReturn
   */
  export type CommissionItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * The data used to create many CommissionItems.
     */
    data: CommissionItemCreateManyInput | CommissionItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommissionItem update
   */
  export type CommissionItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CommissionItem.
     */
    data: XOR<CommissionItemUpdateInput, CommissionItemUncheckedUpdateInput>
    /**
     * Choose, which CommissionItem to update.
     */
    where: CommissionItemWhereUniqueInput
  }

  /**
   * CommissionItem updateMany
   */
  export type CommissionItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommissionItems.
     */
    data: XOR<CommissionItemUpdateManyMutationInput, CommissionItemUncheckedUpdateManyInput>
    /**
     * Filter which CommissionItems to update
     */
    where?: CommissionItemWhereInput
    /**
     * Limit how many CommissionItems to update.
     */
    limit?: number
  }

  /**
   * CommissionItem updateManyAndReturn
   */
  export type CommissionItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * The data used to update CommissionItems.
     */
    data: XOR<CommissionItemUpdateManyMutationInput, CommissionItemUncheckedUpdateManyInput>
    /**
     * Filter which CommissionItems to update
     */
    where?: CommissionItemWhereInput
    /**
     * Limit how many CommissionItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommissionItem upsert
   */
  export type CommissionItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CommissionItem to update in case it exists.
     */
    where: CommissionItemWhereUniqueInput
    /**
     * In case the CommissionItem found by the `where` argument doesn't exist, create a new CommissionItem with this data.
     */
    create: XOR<CommissionItemCreateInput, CommissionItemUncheckedCreateInput>
    /**
     * In case the CommissionItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommissionItemUpdateInput, CommissionItemUncheckedUpdateInput>
  }

  /**
   * CommissionItem delete
   */
  export type CommissionItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
    /**
     * Filter which CommissionItem to delete.
     */
    where: CommissionItemWhereUniqueInput
  }

  /**
   * CommissionItem deleteMany
   */
  export type CommissionItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommissionItems to delete
     */
    where?: CommissionItemWhereInput
    /**
     * Limit how many CommissionItems to delete.
     */
    limit?: number
  }

  /**
   * CommissionItem.service
   */
  export type CommissionItem$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
  }

  /**
   * CommissionItem.commissions
   */
  export type CommissionItem$commissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    where?: StaffCommissionWhereInput
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    cursor?: StaffCommissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * CommissionItem.appliedRule
   */
  export type CommissionItem$appliedRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionRule
     */
    select?: CommissionRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionRule
     */
    omit?: CommissionRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionRuleInclude<ExtArgs> | null
    where?: CommissionRuleWhereInput
  }

  /**
   * CommissionItem without action
   */
  export type CommissionItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommissionItem
     */
    select?: CommissionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommissionItem
     */
    omit?: CommissionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommissionItemInclude<ExtArgs> | null
  }


  /**
   * Model StaffCommission
   */

  export type AggregateStaffCommission = {
    _count: StaffCommissionCountAggregateOutputType | null
    _avg: StaffCommissionAvgAggregateOutputType | null
    _sum: StaffCommissionSumAggregateOutputType | null
    _min: StaffCommissionMinAggregateOutputType | null
    _max: StaffCommissionMaxAggregateOutputType | null
  }

  export type StaffCommissionAvgAggregateOutputType = {
    amount: number | null
  }

  export type StaffCommissionSumAggregateOutputType = {
    amount: number | null
  }

  export type StaffCommissionMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    commissionItemId: string | null
    amount: number | null
    status: $Enums.CommissionStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    appliedRuleId: string | null
    invoiceId: string | null
    serviceId: string | null
  }

  export type StaffCommissionMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    commissionItemId: string | null
    amount: number | null
    status: $Enums.CommissionStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    appliedRuleId: string | null
    invoiceId: string | null
    serviceId: string | null
  }

  export type StaffCommissionCountAggregateOutputType = {
    id: number
    staffId: number
    commissionItemId: number
    amount: number
    status: number
    createdAt: number
    updatedAt: number
    appliedRuleId: number
    invoiceId: number
    serviceId: number
    _all: number
  }


  export type StaffCommissionAvgAggregateInputType = {
    amount?: true
  }

  export type StaffCommissionSumAggregateInputType = {
    amount?: true
  }

  export type StaffCommissionMinAggregateInputType = {
    id?: true
    staffId?: true
    commissionItemId?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    appliedRuleId?: true
    invoiceId?: true
    serviceId?: true
  }

  export type StaffCommissionMaxAggregateInputType = {
    id?: true
    staffId?: true
    commissionItemId?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    appliedRuleId?: true
    invoiceId?: true
    serviceId?: true
  }

  export type StaffCommissionCountAggregateInputType = {
    id?: true
    staffId?: true
    commissionItemId?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    appliedRuleId?: true
    invoiceId?: true
    serviceId?: true
    _all?: true
  }

  export type StaffCommissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffCommission to aggregate.
     */
    where?: StaffCommissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffCommissions to fetch.
     */
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffCommissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffCommissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffCommissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffCommissions
    **/
    _count?: true | StaffCommissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffCommissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffCommissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffCommissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffCommissionMaxAggregateInputType
  }

  export type GetStaffCommissionAggregateType<T extends StaffCommissionAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffCommission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffCommission[P]>
      : GetScalarType<T[P], AggregateStaffCommission[P]>
  }




  export type StaffCommissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffCommissionWhereInput
    orderBy?: StaffCommissionOrderByWithAggregationInput | StaffCommissionOrderByWithAggregationInput[]
    by: StaffCommissionScalarFieldEnum[] | StaffCommissionScalarFieldEnum
    having?: StaffCommissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCommissionCountAggregateInputType | true
    _avg?: StaffCommissionAvgAggregateInputType
    _sum?: StaffCommissionSumAggregateInputType
    _min?: StaffCommissionMinAggregateInputType
    _max?: StaffCommissionMaxAggregateInputType
  }

  export type StaffCommissionGroupByOutputType = {
    id: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt: Date
    updatedAt: Date
    appliedRuleId: string | null
    invoiceId: string
    serviceId: string | null
    _count: StaffCommissionCountAggregateOutputType | null
    _avg: StaffCommissionAvgAggregateOutputType | null
    _sum: StaffCommissionSumAggregateOutputType | null
    _min: StaffCommissionMinAggregateOutputType | null
    _max: StaffCommissionMaxAggregateOutputType | null
  }

  type GetStaffCommissionGroupByPayload<T extends StaffCommissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffCommissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffCommissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffCommissionGroupByOutputType[P]>
            : GetScalarType<T[P], StaffCommissionGroupByOutputType[P]>
        }
      >
    >


  export type StaffCommissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    commissionItemId?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appliedRuleId?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
    commissionItem?: boolean | CommissionItemDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | StaffCommission$serviceArgs<ExtArgs>
  }, ExtArgs["result"]["staffCommission"]>

  export type StaffCommissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    commissionItemId?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appliedRuleId?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
    commissionItem?: boolean | CommissionItemDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | StaffCommission$serviceArgs<ExtArgs>
  }, ExtArgs["result"]["staffCommission"]>

  export type StaffCommissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    commissionItemId?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appliedRuleId?: boolean
    invoiceId?: boolean
    serviceId?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
    commissionItem?: boolean | CommissionItemDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | StaffCommission$serviceArgs<ExtArgs>
  }, ExtArgs["result"]["staffCommission"]>

  export type StaffCommissionSelectScalar = {
    id?: boolean
    staffId?: boolean
    commissionItemId?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appliedRuleId?: boolean
    invoiceId?: boolean
    serviceId?: boolean
  }

  export type StaffCommissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "staffId" | "commissionItemId" | "amount" | "status" | "createdAt" | "updatedAt" | "appliedRuleId" | "invoiceId" | "serviceId", ExtArgs["result"]["staffCommission"]>
  export type StaffCommissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
    commissionItem?: boolean | CommissionItemDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | StaffCommission$serviceArgs<ExtArgs>
  }
  export type StaffCommissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
    commissionItem?: boolean | CommissionItemDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | StaffCommission$serviceArgs<ExtArgs>
  }
  export type StaffCommissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
    commissionItem?: boolean | CommissionItemDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    service?: boolean | StaffCommission$serviceArgs<ExtArgs>
  }

  export type $StaffCommissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffCommission"
    objects: {
      staff: Prisma.$UserPayload<ExtArgs>
      commissionItem: Prisma.$CommissionItemPayload<ExtArgs>
      invoice: Prisma.$InvoicePayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      commissionItemId: string
      amount: number
      status: $Enums.CommissionStatus
      createdAt: Date
      updatedAt: Date
      appliedRuleId: string | null
      invoiceId: string
      serviceId: string | null
    }, ExtArgs["result"]["staffCommission"]>
    composites: {}
  }

  type StaffCommissionGetPayload<S extends boolean | null | undefined | StaffCommissionDefaultArgs> = $Result.GetResult<Prisma.$StaffCommissionPayload, S>

  type StaffCommissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffCommissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCommissionCountAggregateInputType | true
    }

  export interface StaffCommissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffCommission'], meta: { name: 'StaffCommission' } }
    /**
     * Find zero or one StaffCommission that matches the filter.
     * @param {StaffCommissionFindUniqueArgs} args - Arguments to find a StaffCommission
     * @example
     * // Get one StaffCommission
     * const staffCommission = await prisma.staffCommission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffCommissionFindUniqueArgs>(args: SelectSubset<T, StaffCommissionFindUniqueArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffCommission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffCommissionFindUniqueOrThrowArgs} args - Arguments to find a StaffCommission
     * @example
     * // Get one StaffCommission
     * const staffCommission = await prisma.staffCommission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffCommissionFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffCommissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffCommission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionFindFirstArgs} args - Arguments to find a StaffCommission
     * @example
     * // Get one StaffCommission
     * const staffCommission = await prisma.staffCommission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffCommissionFindFirstArgs>(args?: SelectSubset<T, StaffCommissionFindFirstArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffCommission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionFindFirstOrThrowArgs} args - Arguments to find a StaffCommission
     * @example
     * // Get one StaffCommission
     * const staffCommission = await prisma.staffCommission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffCommissionFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffCommissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffCommissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffCommissions
     * const staffCommissions = await prisma.staffCommission.findMany()
     * 
     * // Get first 10 StaffCommissions
     * const staffCommissions = await prisma.staffCommission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffCommissionWithIdOnly = await prisma.staffCommission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffCommissionFindManyArgs>(args?: SelectSubset<T, StaffCommissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffCommission.
     * @param {StaffCommissionCreateArgs} args - Arguments to create a StaffCommission.
     * @example
     * // Create one StaffCommission
     * const StaffCommission = await prisma.staffCommission.create({
     *   data: {
     *     // ... data to create a StaffCommission
     *   }
     * })
     * 
     */
    create<T extends StaffCommissionCreateArgs>(args: SelectSubset<T, StaffCommissionCreateArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffCommissions.
     * @param {StaffCommissionCreateManyArgs} args - Arguments to create many StaffCommissions.
     * @example
     * // Create many StaffCommissions
     * const staffCommission = await prisma.staffCommission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCommissionCreateManyArgs>(args?: SelectSubset<T, StaffCommissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffCommissions and returns the data saved in the database.
     * @param {StaffCommissionCreateManyAndReturnArgs} args - Arguments to create many StaffCommissions.
     * @example
     * // Create many StaffCommissions
     * const staffCommission = await prisma.staffCommission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffCommissions and only return the `id`
     * const staffCommissionWithIdOnly = await prisma.staffCommission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffCommissionCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffCommissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffCommission.
     * @param {StaffCommissionDeleteArgs} args - Arguments to delete one StaffCommission.
     * @example
     * // Delete one StaffCommission
     * const StaffCommission = await prisma.staffCommission.delete({
     *   where: {
     *     // ... filter to delete one StaffCommission
     *   }
     * })
     * 
     */
    delete<T extends StaffCommissionDeleteArgs>(args: SelectSubset<T, StaffCommissionDeleteArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffCommission.
     * @param {StaffCommissionUpdateArgs} args - Arguments to update one StaffCommission.
     * @example
     * // Update one StaffCommission
     * const staffCommission = await prisma.staffCommission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffCommissionUpdateArgs>(args: SelectSubset<T, StaffCommissionUpdateArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffCommissions.
     * @param {StaffCommissionDeleteManyArgs} args - Arguments to filter StaffCommissions to delete.
     * @example
     * // Delete a few StaffCommissions
     * const { count } = await prisma.staffCommission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffCommissionDeleteManyArgs>(args?: SelectSubset<T, StaffCommissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffCommissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffCommissions
     * const staffCommission = await prisma.staffCommission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffCommissionUpdateManyArgs>(args: SelectSubset<T, StaffCommissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffCommissions and returns the data updated in the database.
     * @param {StaffCommissionUpdateManyAndReturnArgs} args - Arguments to update many StaffCommissions.
     * @example
     * // Update many StaffCommissions
     * const staffCommission = await prisma.staffCommission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffCommissions and only return the `id`
     * const staffCommissionWithIdOnly = await prisma.staffCommission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffCommissionUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffCommissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffCommission.
     * @param {StaffCommissionUpsertArgs} args - Arguments to update or create a StaffCommission.
     * @example
     * // Update or create a StaffCommission
     * const staffCommission = await prisma.staffCommission.upsert({
     *   create: {
     *     // ... data to create a StaffCommission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffCommission we want to update
     *   }
     * })
     */
    upsert<T extends StaffCommissionUpsertArgs>(args: SelectSubset<T, StaffCommissionUpsertArgs<ExtArgs>>): Prisma__StaffCommissionClient<$Result.GetResult<Prisma.$StaffCommissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffCommissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionCountArgs} args - Arguments to filter StaffCommissions to count.
     * @example
     * // Count the number of StaffCommissions
     * const count = await prisma.staffCommission.count({
     *   where: {
     *     // ... the filter for the StaffCommissions we want to count
     *   }
     * })
    **/
    count<T extends StaffCommissionCountArgs>(
      args?: Subset<T, StaffCommissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCommissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffCommission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffCommissionAggregateArgs>(args: Subset<T, StaffCommissionAggregateArgs>): Prisma.PrismaPromise<GetStaffCommissionAggregateType<T>>

    /**
     * Group by StaffCommission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCommissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffCommissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffCommissionGroupByArgs['orderBy'] }
        : { orderBy?: StaffCommissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffCommissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffCommissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffCommission model
   */
  readonly fields: StaffCommissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffCommission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffCommissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    commissionItem<T extends CommissionItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommissionItemDefaultArgs<ExtArgs>>): Prisma__CommissionItemClient<$Result.GetResult<Prisma.$CommissionItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends StaffCommission$serviceArgs<ExtArgs> = {}>(args?: Subset<T, StaffCommission$serviceArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffCommission model
   */
  interface StaffCommissionFieldRefs {
    readonly id: FieldRef<"StaffCommission", 'String'>
    readonly staffId: FieldRef<"StaffCommission", 'String'>
    readonly commissionItemId: FieldRef<"StaffCommission", 'String'>
    readonly amount: FieldRef<"StaffCommission", 'Float'>
    readonly status: FieldRef<"StaffCommission", 'CommissionStatus'>
    readonly createdAt: FieldRef<"StaffCommission", 'DateTime'>
    readonly updatedAt: FieldRef<"StaffCommission", 'DateTime'>
    readonly appliedRuleId: FieldRef<"StaffCommission", 'String'>
    readonly invoiceId: FieldRef<"StaffCommission", 'String'>
    readonly serviceId: FieldRef<"StaffCommission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StaffCommission findUnique
   */
  export type StaffCommissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * Filter, which StaffCommission to fetch.
     */
    where: StaffCommissionWhereUniqueInput
  }

  /**
   * StaffCommission findUniqueOrThrow
   */
  export type StaffCommissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * Filter, which StaffCommission to fetch.
     */
    where: StaffCommissionWhereUniqueInput
  }

  /**
   * StaffCommission findFirst
   */
  export type StaffCommissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * Filter, which StaffCommission to fetch.
     */
    where?: StaffCommissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffCommissions to fetch.
     */
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffCommissions.
     */
    cursor?: StaffCommissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffCommissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffCommissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffCommissions.
     */
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * StaffCommission findFirstOrThrow
   */
  export type StaffCommissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * Filter, which StaffCommission to fetch.
     */
    where?: StaffCommissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffCommissions to fetch.
     */
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffCommissions.
     */
    cursor?: StaffCommissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffCommissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffCommissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffCommissions.
     */
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * StaffCommission findMany
   */
  export type StaffCommissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * Filter, which StaffCommissions to fetch.
     */
    where?: StaffCommissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffCommissions to fetch.
     */
    orderBy?: StaffCommissionOrderByWithRelationInput | StaffCommissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffCommissions.
     */
    cursor?: StaffCommissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffCommissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffCommissions.
     */
    skip?: number
    distinct?: StaffCommissionScalarFieldEnum | StaffCommissionScalarFieldEnum[]
  }

  /**
   * StaffCommission create
   */
  export type StaffCommissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffCommission.
     */
    data: XOR<StaffCommissionCreateInput, StaffCommissionUncheckedCreateInput>
  }

  /**
   * StaffCommission createMany
   */
  export type StaffCommissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffCommissions.
     */
    data: StaffCommissionCreateManyInput | StaffCommissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffCommission createManyAndReturn
   */
  export type StaffCommissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * The data used to create many StaffCommissions.
     */
    data: StaffCommissionCreateManyInput | StaffCommissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffCommission update
   */
  export type StaffCommissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffCommission.
     */
    data: XOR<StaffCommissionUpdateInput, StaffCommissionUncheckedUpdateInput>
    /**
     * Choose, which StaffCommission to update.
     */
    where: StaffCommissionWhereUniqueInput
  }

  /**
   * StaffCommission updateMany
   */
  export type StaffCommissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffCommissions.
     */
    data: XOR<StaffCommissionUpdateManyMutationInput, StaffCommissionUncheckedUpdateManyInput>
    /**
     * Filter which StaffCommissions to update
     */
    where?: StaffCommissionWhereInput
    /**
     * Limit how many StaffCommissions to update.
     */
    limit?: number
  }

  /**
   * StaffCommission updateManyAndReturn
   */
  export type StaffCommissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * The data used to update StaffCommissions.
     */
    data: XOR<StaffCommissionUpdateManyMutationInput, StaffCommissionUncheckedUpdateManyInput>
    /**
     * Filter which StaffCommissions to update
     */
    where?: StaffCommissionWhereInput
    /**
     * Limit how many StaffCommissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffCommission upsert
   */
  export type StaffCommissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffCommission to update in case it exists.
     */
    where: StaffCommissionWhereUniqueInput
    /**
     * In case the StaffCommission found by the `where` argument doesn't exist, create a new StaffCommission with this data.
     */
    create: XOR<StaffCommissionCreateInput, StaffCommissionUncheckedCreateInput>
    /**
     * In case the StaffCommission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffCommissionUpdateInput, StaffCommissionUncheckedUpdateInput>
  }

  /**
   * StaffCommission delete
   */
  export type StaffCommissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
    /**
     * Filter which StaffCommission to delete.
     */
    where: StaffCommissionWhereUniqueInput
  }

  /**
   * StaffCommission deleteMany
   */
  export type StaffCommissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffCommissions to delete
     */
    where?: StaffCommissionWhereInput
    /**
     * Limit how many StaffCommissions to delete.
     */
    limit?: number
  }

  /**
   * StaffCommission.service
   */
  export type StaffCommission$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
  }

  /**
   * StaffCommission without action
   */
  export type StaffCommissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCommission
     */
    select?: StaffCommissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffCommission
     */
    omit?: StaffCommissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffCommissionInclude<ExtArgs> | null
  }


  /**
   * Model CashRegisterLog
   */

  export type AggregateCashRegisterLog = {
    _count: CashRegisterLogCountAggregateOutputType | null
    _avg: CashRegisterLogAvgAggregateOutputType | null
    _sum: CashRegisterLogSumAggregateOutputType | null
    _min: CashRegisterLogMinAggregateOutputType | null
    _max: CashRegisterLogMaxAggregateOutputType | null
  }

  export type CashRegisterLogAvgAggregateOutputType = {
    amount: number | null
  }

  export type CashRegisterLogSumAggregateOutputType = {
    amount: number | null
  }

  export type CashRegisterLogMinAggregateOutputType = {
    id: string | null
    type: $Enums.CashLogType | null
    amount: number | null
    description: string | null
    branchId: string | null
    userId: string | null
    createdAt: Date | null
    category: $Enums.CashMovementCategory | null
  }

  export type CashRegisterLogMaxAggregateOutputType = {
    id: string | null
    type: $Enums.CashLogType | null
    amount: number | null
    description: string | null
    branchId: string | null
    userId: string | null
    createdAt: Date | null
    category: $Enums.CashMovementCategory | null
  }

  export type CashRegisterLogCountAggregateOutputType = {
    id: number
    type: number
    amount: number
    description: number
    branchId: number
    userId: number
    createdAt: number
    category: number
    _all: number
  }


  export type CashRegisterLogAvgAggregateInputType = {
    amount?: true
  }

  export type CashRegisterLogSumAggregateInputType = {
    amount?: true
  }

  export type CashRegisterLogMinAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    description?: true
    branchId?: true
    userId?: true
    createdAt?: true
    category?: true
  }

  export type CashRegisterLogMaxAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    description?: true
    branchId?: true
    userId?: true
    createdAt?: true
    category?: true
  }

  export type CashRegisterLogCountAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    description?: true
    branchId?: true
    userId?: true
    createdAt?: true
    category?: true
    _all?: true
  }

  export type CashRegisterLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashRegisterLog to aggregate.
     */
    where?: CashRegisterLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashRegisterLogs to fetch.
     */
    orderBy?: CashRegisterLogOrderByWithRelationInput | CashRegisterLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashRegisterLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashRegisterLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashRegisterLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashRegisterLogs
    **/
    _count?: true | CashRegisterLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CashRegisterLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CashRegisterLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashRegisterLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashRegisterLogMaxAggregateInputType
  }

  export type GetCashRegisterLogAggregateType<T extends CashRegisterLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCashRegisterLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashRegisterLog[P]>
      : GetScalarType<T[P], AggregateCashRegisterLog[P]>
  }




  export type CashRegisterLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashRegisterLogWhereInput
    orderBy?: CashRegisterLogOrderByWithAggregationInput | CashRegisterLogOrderByWithAggregationInput[]
    by: CashRegisterLogScalarFieldEnum[] | CashRegisterLogScalarFieldEnum
    having?: CashRegisterLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashRegisterLogCountAggregateInputType | true
    _avg?: CashRegisterLogAvgAggregateInputType
    _sum?: CashRegisterLogSumAggregateInputType
    _min?: CashRegisterLogMinAggregateInputType
    _max?: CashRegisterLogMaxAggregateInputType
  }

  export type CashRegisterLogGroupByOutputType = {
    id: string
    type: $Enums.CashLogType
    amount: number
    description: string | null
    branchId: string
    userId: string
    createdAt: Date
    category: $Enums.CashMovementCategory | null
    _count: CashRegisterLogCountAggregateOutputType | null
    _avg: CashRegisterLogAvgAggregateOutputType | null
    _sum: CashRegisterLogSumAggregateOutputType | null
    _min: CashRegisterLogMinAggregateOutputType | null
    _max: CashRegisterLogMaxAggregateOutputType | null
  }

  type GetCashRegisterLogGroupByPayload<T extends CashRegisterLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashRegisterLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashRegisterLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashRegisterLogGroupByOutputType[P]>
            : GetScalarType<T[P], CashRegisterLogGroupByOutputType[P]>
        }
      >
    >


  export type CashRegisterLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    branchId?: boolean
    userId?: boolean
    createdAt?: boolean
    category?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    payments?: boolean | CashRegisterLog$paymentsArgs<ExtArgs>
    _count?: boolean | CashRegisterLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashRegisterLog"]>

  export type CashRegisterLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    branchId?: boolean
    userId?: boolean
    createdAt?: boolean
    category?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashRegisterLog"]>

  export type CashRegisterLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    branchId?: boolean
    userId?: boolean
    createdAt?: boolean
    category?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashRegisterLog"]>

  export type CashRegisterLogSelectScalar = {
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    branchId?: boolean
    userId?: boolean
    createdAt?: boolean
    category?: boolean
  }

  export type CashRegisterLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "amount" | "description" | "branchId" | "userId" | "createdAt" | "category", ExtArgs["result"]["cashRegisterLog"]>
  export type CashRegisterLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    payments?: boolean | CashRegisterLog$paymentsArgs<ExtArgs>
    _count?: boolean | CashRegisterLogCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CashRegisterLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CashRegisterLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CashRegisterLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashRegisterLog"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.CashLogType
      amount: number
      description: string | null
      branchId: string
      userId: string
      createdAt: Date
      category: $Enums.CashMovementCategory | null
    }, ExtArgs["result"]["cashRegisterLog"]>
    composites: {}
  }

  type CashRegisterLogGetPayload<S extends boolean | null | undefined | CashRegisterLogDefaultArgs> = $Result.GetResult<Prisma.$CashRegisterLogPayload, S>

  type CashRegisterLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CashRegisterLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CashRegisterLogCountAggregateInputType | true
    }

  export interface CashRegisterLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashRegisterLog'], meta: { name: 'CashRegisterLog' } }
    /**
     * Find zero or one CashRegisterLog that matches the filter.
     * @param {CashRegisterLogFindUniqueArgs} args - Arguments to find a CashRegisterLog
     * @example
     * // Get one CashRegisterLog
     * const cashRegisterLog = await prisma.cashRegisterLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashRegisterLogFindUniqueArgs>(args: SelectSubset<T, CashRegisterLogFindUniqueArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CashRegisterLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CashRegisterLogFindUniqueOrThrowArgs} args - Arguments to find a CashRegisterLog
     * @example
     * // Get one CashRegisterLog
     * const cashRegisterLog = await prisma.cashRegisterLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashRegisterLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CashRegisterLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashRegisterLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogFindFirstArgs} args - Arguments to find a CashRegisterLog
     * @example
     * // Get one CashRegisterLog
     * const cashRegisterLog = await prisma.cashRegisterLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashRegisterLogFindFirstArgs>(args?: SelectSubset<T, CashRegisterLogFindFirstArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashRegisterLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogFindFirstOrThrowArgs} args - Arguments to find a CashRegisterLog
     * @example
     * // Get one CashRegisterLog
     * const cashRegisterLog = await prisma.cashRegisterLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashRegisterLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CashRegisterLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CashRegisterLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashRegisterLogs
     * const cashRegisterLogs = await prisma.cashRegisterLog.findMany()
     * 
     * // Get first 10 CashRegisterLogs
     * const cashRegisterLogs = await prisma.cashRegisterLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cashRegisterLogWithIdOnly = await prisma.cashRegisterLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CashRegisterLogFindManyArgs>(args?: SelectSubset<T, CashRegisterLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CashRegisterLog.
     * @param {CashRegisterLogCreateArgs} args - Arguments to create a CashRegisterLog.
     * @example
     * // Create one CashRegisterLog
     * const CashRegisterLog = await prisma.cashRegisterLog.create({
     *   data: {
     *     // ... data to create a CashRegisterLog
     *   }
     * })
     * 
     */
    create<T extends CashRegisterLogCreateArgs>(args: SelectSubset<T, CashRegisterLogCreateArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CashRegisterLogs.
     * @param {CashRegisterLogCreateManyArgs} args - Arguments to create many CashRegisterLogs.
     * @example
     * // Create many CashRegisterLogs
     * const cashRegisterLog = await prisma.cashRegisterLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashRegisterLogCreateManyArgs>(args?: SelectSubset<T, CashRegisterLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CashRegisterLogs and returns the data saved in the database.
     * @param {CashRegisterLogCreateManyAndReturnArgs} args - Arguments to create many CashRegisterLogs.
     * @example
     * // Create many CashRegisterLogs
     * const cashRegisterLog = await prisma.cashRegisterLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CashRegisterLogs and only return the `id`
     * const cashRegisterLogWithIdOnly = await prisma.cashRegisterLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CashRegisterLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CashRegisterLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CashRegisterLog.
     * @param {CashRegisterLogDeleteArgs} args - Arguments to delete one CashRegisterLog.
     * @example
     * // Delete one CashRegisterLog
     * const CashRegisterLog = await prisma.cashRegisterLog.delete({
     *   where: {
     *     // ... filter to delete one CashRegisterLog
     *   }
     * })
     * 
     */
    delete<T extends CashRegisterLogDeleteArgs>(args: SelectSubset<T, CashRegisterLogDeleteArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CashRegisterLog.
     * @param {CashRegisterLogUpdateArgs} args - Arguments to update one CashRegisterLog.
     * @example
     * // Update one CashRegisterLog
     * const cashRegisterLog = await prisma.cashRegisterLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashRegisterLogUpdateArgs>(args: SelectSubset<T, CashRegisterLogUpdateArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CashRegisterLogs.
     * @param {CashRegisterLogDeleteManyArgs} args - Arguments to filter CashRegisterLogs to delete.
     * @example
     * // Delete a few CashRegisterLogs
     * const { count } = await prisma.cashRegisterLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashRegisterLogDeleteManyArgs>(args?: SelectSubset<T, CashRegisterLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashRegisterLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashRegisterLogs
     * const cashRegisterLog = await prisma.cashRegisterLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashRegisterLogUpdateManyArgs>(args: SelectSubset<T, CashRegisterLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashRegisterLogs and returns the data updated in the database.
     * @param {CashRegisterLogUpdateManyAndReturnArgs} args - Arguments to update many CashRegisterLogs.
     * @example
     * // Update many CashRegisterLogs
     * const cashRegisterLog = await prisma.cashRegisterLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CashRegisterLogs and only return the `id`
     * const cashRegisterLogWithIdOnly = await prisma.cashRegisterLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CashRegisterLogUpdateManyAndReturnArgs>(args: SelectSubset<T, CashRegisterLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CashRegisterLog.
     * @param {CashRegisterLogUpsertArgs} args - Arguments to update or create a CashRegisterLog.
     * @example
     * // Update or create a CashRegisterLog
     * const cashRegisterLog = await prisma.cashRegisterLog.upsert({
     *   create: {
     *     // ... data to create a CashRegisterLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashRegisterLog we want to update
     *   }
     * })
     */
    upsert<T extends CashRegisterLogUpsertArgs>(args: SelectSubset<T, CashRegisterLogUpsertArgs<ExtArgs>>): Prisma__CashRegisterLogClient<$Result.GetResult<Prisma.$CashRegisterLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CashRegisterLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogCountArgs} args - Arguments to filter CashRegisterLogs to count.
     * @example
     * // Count the number of CashRegisterLogs
     * const count = await prisma.cashRegisterLog.count({
     *   where: {
     *     // ... the filter for the CashRegisterLogs we want to count
     *   }
     * })
    **/
    count<T extends CashRegisterLogCountArgs>(
      args?: Subset<T, CashRegisterLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashRegisterLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashRegisterLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashRegisterLogAggregateArgs>(args: Subset<T, CashRegisterLogAggregateArgs>): Prisma.PrismaPromise<GetCashRegisterLogAggregateType<T>>

    /**
     * Group by CashRegisterLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashRegisterLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashRegisterLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashRegisterLogGroupByArgs['orderBy'] }
        : { orderBy?: CashRegisterLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashRegisterLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashRegisterLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashRegisterLog model
   */
  readonly fields: CashRegisterLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashRegisterLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashRegisterLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends CashRegisterLog$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, CashRegisterLog$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashRegisterLog model
   */
  interface CashRegisterLogFieldRefs {
    readonly id: FieldRef<"CashRegisterLog", 'String'>
    readonly type: FieldRef<"CashRegisterLog", 'CashLogType'>
    readonly amount: FieldRef<"CashRegisterLog", 'Float'>
    readonly description: FieldRef<"CashRegisterLog", 'String'>
    readonly branchId: FieldRef<"CashRegisterLog", 'String'>
    readonly userId: FieldRef<"CashRegisterLog", 'String'>
    readonly createdAt: FieldRef<"CashRegisterLog", 'DateTime'>
    readonly category: FieldRef<"CashRegisterLog", 'CashMovementCategory'>
  }
    

  // Custom InputTypes
  /**
   * CashRegisterLog findUnique
   */
  export type CashRegisterLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * Filter, which CashRegisterLog to fetch.
     */
    where: CashRegisterLogWhereUniqueInput
  }

  /**
   * CashRegisterLog findUniqueOrThrow
   */
  export type CashRegisterLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * Filter, which CashRegisterLog to fetch.
     */
    where: CashRegisterLogWhereUniqueInput
  }

  /**
   * CashRegisterLog findFirst
   */
  export type CashRegisterLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * Filter, which CashRegisterLog to fetch.
     */
    where?: CashRegisterLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashRegisterLogs to fetch.
     */
    orderBy?: CashRegisterLogOrderByWithRelationInput | CashRegisterLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashRegisterLogs.
     */
    cursor?: CashRegisterLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashRegisterLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashRegisterLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashRegisterLogs.
     */
    distinct?: CashRegisterLogScalarFieldEnum | CashRegisterLogScalarFieldEnum[]
  }

  /**
   * CashRegisterLog findFirstOrThrow
   */
  export type CashRegisterLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * Filter, which CashRegisterLog to fetch.
     */
    where?: CashRegisterLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashRegisterLogs to fetch.
     */
    orderBy?: CashRegisterLogOrderByWithRelationInput | CashRegisterLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashRegisterLogs.
     */
    cursor?: CashRegisterLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashRegisterLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashRegisterLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashRegisterLogs.
     */
    distinct?: CashRegisterLogScalarFieldEnum | CashRegisterLogScalarFieldEnum[]
  }

  /**
   * CashRegisterLog findMany
   */
  export type CashRegisterLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * Filter, which CashRegisterLogs to fetch.
     */
    where?: CashRegisterLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashRegisterLogs to fetch.
     */
    orderBy?: CashRegisterLogOrderByWithRelationInput | CashRegisterLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashRegisterLogs.
     */
    cursor?: CashRegisterLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashRegisterLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashRegisterLogs.
     */
    skip?: number
    distinct?: CashRegisterLogScalarFieldEnum | CashRegisterLogScalarFieldEnum[]
  }

  /**
   * CashRegisterLog create
   */
  export type CashRegisterLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CashRegisterLog.
     */
    data: XOR<CashRegisterLogCreateInput, CashRegisterLogUncheckedCreateInput>
  }

  /**
   * CashRegisterLog createMany
   */
  export type CashRegisterLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashRegisterLogs.
     */
    data: CashRegisterLogCreateManyInput | CashRegisterLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CashRegisterLog createManyAndReturn
   */
  export type CashRegisterLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * The data used to create many CashRegisterLogs.
     */
    data: CashRegisterLogCreateManyInput | CashRegisterLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CashRegisterLog update
   */
  export type CashRegisterLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CashRegisterLog.
     */
    data: XOR<CashRegisterLogUpdateInput, CashRegisterLogUncheckedUpdateInput>
    /**
     * Choose, which CashRegisterLog to update.
     */
    where: CashRegisterLogWhereUniqueInput
  }

  /**
   * CashRegisterLog updateMany
   */
  export type CashRegisterLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashRegisterLogs.
     */
    data: XOR<CashRegisterLogUpdateManyMutationInput, CashRegisterLogUncheckedUpdateManyInput>
    /**
     * Filter which CashRegisterLogs to update
     */
    where?: CashRegisterLogWhereInput
    /**
     * Limit how many CashRegisterLogs to update.
     */
    limit?: number
  }

  /**
   * CashRegisterLog updateManyAndReturn
   */
  export type CashRegisterLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * The data used to update CashRegisterLogs.
     */
    data: XOR<CashRegisterLogUpdateManyMutationInput, CashRegisterLogUncheckedUpdateManyInput>
    /**
     * Filter which CashRegisterLogs to update
     */
    where?: CashRegisterLogWhereInput
    /**
     * Limit how many CashRegisterLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CashRegisterLog upsert
   */
  export type CashRegisterLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CashRegisterLog to update in case it exists.
     */
    where: CashRegisterLogWhereUniqueInput
    /**
     * In case the CashRegisterLog found by the `where` argument doesn't exist, create a new CashRegisterLog with this data.
     */
    create: XOR<CashRegisterLogCreateInput, CashRegisterLogUncheckedCreateInput>
    /**
     * In case the CashRegisterLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashRegisterLogUpdateInput, CashRegisterLogUncheckedUpdateInput>
  }

  /**
   * CashRegisterLog delete
   */
  export type CashRegisterLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
    /**
     * Filter which CashRegisterLog to delete.
     */
    where: CashRegisterLogWhereUniqueInput
  }

  /**
   * CashRegisterLog deleteMany
   */
  export type CashRegisterLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashRegisterLogs to delete
     */
    where?: CashRegisterLogWhereInput
    /**
     * Limit how many CashRegisterLogs to delete.
     */
    limit?: number
  }

  /**
   * CashRegisterLog.payments
   */
  export type CashRegisterLog$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * CashRegisterLog without action
   */
  export type CashRegisterLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashRegisterLog
     */
    select?: CashRegisterLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashRegisterLog
     */
    omit?: CashRegisterLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashRegisterLogInclude<ExtArgs> | null
  }


  /**
   * Model NotificationProvider
   */

  export type AggregateNotificationProvider = {
    _count: NotificationProviderCountAggregateOutputType | null
    _min: NotificationProviderMinAggregateOutputType | null
    _max: NotificationProviderMaxAggregateOutputType | null
  }

  export type NotificationProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.NotificationType | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.NotificationType | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationProviderCountAggregateOutputType = {
    id: number
    name: number
    type: number
    config: number
    branchId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationProviderMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationProviderMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationProviderCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    config?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationProvider to aggregate.
     */
    where?: NotificationProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationProviders to fetch.
     */
    orderBy?: NotificationProviderOrderByWithRelationInput | NotificationProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationProviders
    **/
    _count?: true | NotificationProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationProviderMaxAggregateInputType
  }

  export type GetNotificationProviderAggregateType<T extends NotificationProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationProvider[P]>
      : GetScalarType<T[P], AggregateNotificationProvider[P]>
  }




  export type NotificationProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationProviderWhereInput
    orderBy?: NotificationProviderOrderByWithAggregationInput | NotificationProviderOrderByWithAggregationInput[]
    by: NotificationProviderScalarFieldEnum[] | NotificationProviderScalarFieldEnum
    having?: NotificationProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationProviderCountAggregateInputType | true
    _min?: NotificationProviderMinAggregateInputType
    _max?: NotificationProviderMaxAggregateInputType
  }

  export type NotificationProviderGroupByOutputType = {
    id: string
    name: string
    type: $Enums.NotificationType
    config: JsonValue
    branchId: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationProviderCountAggregateOutputType | null
    _min: NotificationProviderMinAggregateOutputType | null
    _max: NotificationProviderMaxAggregateOutputType | null
  }

  type GetNotificationProviderGroupByPayload<T extends NotificationProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationProviderGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationProviderGroupByOutputType[P]>
        }
      >
    >


  export type NotificationProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    config?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationProvider"]>

  export type NotificationProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    config?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationProvider"]>

  export type NotificationProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    config?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationProvider"]>

  export type NotificationProviderSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    config?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "config" | "branchId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationProvider"]>
  export type NotificationProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $NotificationProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationProvider"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.NotificationType
      config: Prisma.JsonValue
      branchId: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationProvider"]>
    composites: {}
  }

  type NotificationProviderGetPayload<S extends boolean | null | undefined | NotificationProviderDefaultArgs> = $Result.GetResult<Prisma.$NotificationProviderPayload, S>

  type NotificationProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationProviderCountAggregateInputType | true
    }

  export interface NotificationProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationProvider'], meta: { name: 'NotificationProvider' } }
    /**
     * Find zero or one NotificationProvider that matches the filter.
     * @param {NotificationProviderFindUniqueArgs} args - Arguments to find a NotificationProvider
     * @example
     * // Get one NotificationProvider
     * const notificationProvider = await prisma.notificationProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationProviderFindUniqueArgs>(args: SelectSubset<T, NotificationProviderFindUniqueArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationProvider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationProviderFindUniqueOrThrowArgs} args - Arguments to find a NotificationProvider
     * @example
     * // Get one NotificationProvider
     * const notificationProvider = await prisma.notificationProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderFindFirstArgs} args - Arguments to find a NotificationProvider
     * @example
     * // Get one NotificationProvider
     * const notificationProvider = await prisma.notificationProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationProviderFindFirstArgs>(args?: SelectSubset<T, NotificationProviderFindFirstArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderFindFirstOrThrowArgs} args - Arguments to find a NotificationProvider
     * @example
     * // Get one NotificationProvider
     * const notificationProvider = await prisma.notificationProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationProviders
     * const notificationProviders = await prisma.notificationProvider.findMany()
     * 
     * // Get first 10 NotificationProviders
     * const notificationProviders = await prisma.notificationProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationProviderWithIdOnly = await prisma.notificationProvider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationProviderFindManyArgs>(args?: SelectSubset<T, NotificationProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationProvider.
     * @param {NotificationProviderCreateArgs} args - Arguments to create a NotificationProvider.
     * @example
     * // Create one NotificationProvider
     * const NotificationProvider = await prisma.notificationProvider.create({
     *   data: {
     *     // ... data to create a NotificationProvider
     *   }
     * })
     * 
     */
    create<T extends NotificationProviderCreateArgs>(args: SelectSubset<T, NotificationProviderCreateArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationProviders.
     * @param {NotificationProviderCreateManyArgs} args - Arguments to create many NotificationProviders.
     * @example
     * // Create many NotificationProviders
     * const notificationProvider = await prisma.notificationProvider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationProviderCreateManyArgs>(args?: SelectSubset<T, NotificationProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationProviders and returns the data saved in the database.
     * @param {NotificationProviderCreateManyAndReturnArgs} args - Arguments to create many NotificationProviders.
     * @example
     * // Create many NotificationProviders
     * const notificationProvider = await prisma.notificationProvider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationProviders and only return the `id`
     * const notificationProviderWithIdOnly = await prisma.notificationProvider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationProvider.
     * @param {NotificationProviderDeleteArgs} args - Arguments to delete one NotificationProvider.
     * @example
     * // Delete one NotificationProvider
     * const NotificationProvider = await prisma.notificationProvider.delete({
     *   where: {
     *     // ... filter to delete one NotificationProvider
     *   }
     * })
     * 
     */
    delete<T extends NotificationProviderDeleteArgs>(args: SelectSubset<T, NotificationProviderDeleteArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationProvider.
     * @param {NotificationProviderUpdateArgs} args - Arguments to update one NotificationProvider.
     * @example
     * // Update one NotificationProvider
     * const notificationProvider = await prisma.notificationProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationProviderUpdateArgs>(args: SelectSubset<T, NotificationProviderUpdateArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationProviders.
     * @param {NotificationProviderDeleteManyArgs} args - Arguments to filter NotificationProviders to delete.
     * @example
     * // Delete a few NotificationProviders
     * const { count } = await prisma.notificationProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationProviderDeleteManyArgs>(args?: SelectSubset<T, NotificationProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationProviders
     * const notificationProvider = await prisma.notificationProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationProviderUpdateManyArgs>(args: SelectSubset<T, NotificationProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationProviders and returns the data updated in the database.
     * @param {NotificationProviderUpdateManyAndReturnArgs} args - Arguments to update many NotificationProviders.
     * @example
     * // Update many NotificationProviders
     * const notificationProvider = await prisma.notificationProvider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationProviders and only return the `id`
     * const notificationProviderWithIdOnly = await prisma.notificationProvider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationProvider.
     * @param {NotificationProviderUpsertArgs} args - Arguments to update or create a NotificationProvider.
     * @example
     * // Update or create a NotificationProvider
     * const notificationProvider = await prisma.notificationProvider.upsert({
     *   create: {
     *     // ... data to create a NotificationProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationProvider we want to update
     *   }
     * })
     */
    upsert<T extends NotificationProviderUpsertArgs>(args: SelectSubset<T, NotificationProviderUpsertArgs<ExtArgs>>): Prisma__NotificationProviderClient<$Result.GetResult<Prisma.$NotificationProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderCountArgs} args - Arguments to filter NotificationProviders to count.
     * @example
     * // Count the number of NotificationProviders
     * const count = await prisma.notificationProvider.count({
     *   where: {
     *     // ... the filter for the NotificationProviders we want to count
     *   }
     * })
    **/
    count<T extends NotificationProviderCountArgs>(
      args?: Subset<T, NotificationProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationProviderAggregateArgs>(args: Subset<T, NotificationProviderAggregateArgs>): Prisma.PrismaPromise<GetNotificationProviderAggregateType<T>>

    /**
     * Group by NotificationProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationProviderGroupByArgs['orderBy'] }
        : { orderBy?: NotificationProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationProvider model
   */
  readonly fields: NotificationProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationProvider model
   */
  interface NotificationProviderFieldRefs {
    readonly id: FieldRef<"NotificationProvider", 'String'>
    readonly name: FieldRef<"NotificationProvider", 'String'>
    readonly type: FieldRef<"NotificationProvider", 'NotificationType'>
    readonly config: FieldRef<"NotificationProvider", 'Json'>
    readonly branchId: FieldRef<"NotificationProvider", 'String'>
    readonly isActive: FieldRef<"NotificationProvider", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationProvider", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationProvider", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationProvider findUnique
   */
  export type NotificationProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * Filter, which NotificationProvider to fetch.
     */
    where: NotificationProviderWhereUniqueInput
  }

  /**
   * NotificationProvider findUniqueOrThrow
   */
  export type NotificationProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * Filter, which NotificationProvider to fetch.
     */
    where: NotificationProviderWhereUniqueInput
  }

  /**
   * NotificationProvider findFirst
   */
  export type NotificationProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * Filter, which NotificationProvider to fetch.
     */
    where?: NotificationProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationProviders to fetch.
     */
    orderBy?: NotificationProviderOrderByWithRelationInput | NotificationProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationProviders.
     */
    cursor?: NotificationProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationProviders.
     */
    distinct?: NotificationProviderScalarFieldEnum | NotificationProviderScalarFieldEnum[]
  }

  /**
   * NotificationProvider findFirstOrThrow
   */
  export type NotificationProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * Filter, which NotificationProvider to fetch.
     */
    where?: NotificationProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationProviders to fetch.
     */
    orderBy?: NotificationProviderOrderByWithRelationInput | NotificationProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationProviders.
     */
    cursor?: NotificationProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationProviders.
     */
    distinct?: NotificationProviderScalarFieldEnum | NotificationProviderScalarFieldEnum[]
  }

  /**
   * NotificationProvider findMany
   */
  export type NotificationProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * Filter, which NotificationProviders to fetch.
     */
    where?: NotificationProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationProviders to fetch.
     */
    orderBy?: NotificationProviderOrderByWithRelationInput | NotificationProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationProviders.
     */
    cursor?: NotificationProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationProviders.
     */
    skip?: number
    distinct?: NotificationProviderScalarFieldEnum | NotificationProviderScalarFieldEnum[]
  }

  /**
   * NotificationProvider create
   */
  export type NotificationProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationProvider.
     */
    data: XOR<NotificationProviderCreateInput, NotificationProviderUncheckedCreateInput>
  }

  /**
   * NotificationProvider createMany
   */
  export type NotificationProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationProviders.
     */
    data: NotificationProviderCreateManyInput | NotificationProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationProvider createManyAndReturn
   */
  export type NotificationProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationProviders.
     */
    data: NotificationProviderCreateManyInput | NotificationProviderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationProvider update
   */
  export type NotificationProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationProvider.
     */
    data: XOR<NotificationProviderUpdateInput, NotificationProviderUncheckedUpdateInput>
    /**
     * Choose, which NotificationProvider to update.
     */
    where: NotificationProviderWhereUniqueInput
  }

  /**
   * NotificationProvider updateMany
   */
  export type NotificationProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationProviders.
     */
    data: XOR<NotificationProviderUpdateManyMutationInput, NotificationProviderUncheckedUpdateManyInput>
    /**
     * Filter which NotificationProviders to update
     */
    where?: NotificationProviderWhereInput
    /**
     * Limit how many NotificationProviders to update.
     */
    limit?: number
  }

  /**
   * NotificationProvider updateManyAndReturn
   */
  export type NotificationProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * The data used to update NotificationProviders.
     */
    data: XOR<NotificationProviderUpdateManyMutationInput, NotificationProviderUncheckedUpdateManyInput>
    /**
     * Filter which NotificationProviders to update
     */
    where?: NotificationProviderWhereInput
    /**
     * Limit how many NotificationProviders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationProvider upsert
   */
  export type NotificationProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationProvider to update in case it exists.
     */
    where: NotificationProviderWhereUniqueInput
    /**
     * In case the NotificationProvider found by the `where` argument doesn't exist, create a new NotificationProvider with this data.
     */
    create: XOR<NotificationProviderCreateInput, NotificationProviderUncheckedCreateInput>
    /**
     * In case the NotificationProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationProviderUpdateInput, NotificationProviderUncheckedUpdateInput>
  }

  /**
   * NotificationProvider delete
   */
  export type NotificationProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
    /**
     * Filter which NotificationProvider to delete.
     */
    where: NotificationProviderWhereUniqueInput
  }

  /**
   * NotificationProvider deleteMany
   */
  export type NotificationProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationProviders to delete
     */
    where?: NotificationProviderWhereInput
    /**
     * Limit how many NotificationProviders to delete.
     */
    limit?: number
  }

  /**
   * NotificationProvider without action
   */
  export type NotificationProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationProvider
     */
    select?: NotificationProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationProvider
     */
    omit?: NotificationProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationProviderInclude<ExtArgs> | null
  }


  /**
   * Model NotificationTemplate
   */

  export type AggregateNotificationTemplate = {
    _count: NotificationTemplateCountAggregateOutputType | null
    _min: NotificationTemplateMinAggregateOutputType | null
    _max: NotificationTemplateMaxAggregateOutputType | null
  }

  export type NotificationTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.NotificationType | null
    subject: string | null
    content: string | null
    language: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.NotificationType | null
    subject: string | null
    content: string | null
    language: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationTemplateCountAggregateOutputType = {
    id: number
    name: number
    type: number
    subject: number
    content: number
    variables: number
    language: number
    branchId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationTemplateMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    subject?: true
    content?: true
    language?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    subject?: true
    content?: true
    language?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationTemplateCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    subject?: true
    content?: true
    variables?: true
    language?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationTemplate to aggregate.
     */
    where?: NotificationTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTemplates to fetch.
     */
    orderBy?: NotificationTemplateOrderByWithRelationInput | NotificationTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationTemplates
    **/
    _count?: true | NotificationTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationTemplateMaxAggregateInputType
  }

  export type GetNotificationTemplateAggregateType<T extends NotificationTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationTemplate[P]>
      : GetScalarType<T[P], AggregateNotificationTemplate[P]>
  }




  export type NotificationTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTemplateWhereInput
    orderBy?: NotificationTemplateOrderByWithAggregationInput | NotificationTemplateOrderByWithAggregationInput[]
    by: NotificationTemplateScalarFieldEnum[] | NotificationTemplateScalarFieldEnum
    having?: NotificationTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationTemplateCountAggregateInputType | true
    _min?: NotificationTemplateMinAggregateInputType
    _max?: NotificationTemplateMaxAggregateInputType
  }

  export type NotificationTemplateGroupByOutputType = {
    id: string
    name: string
    type: $Enums.NotificationType
    subject: string | null
    content: string
    variables: JsonValue
    language: string
    branchId: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationTemplateCountAggregateOutputType | null
    _min: NotificationTemplateMinAggregateOutputType | null
    _max: NotificationTemplateMaxAggregateOutputType | null
  }

  type GetNotificationTemplateGroupByPayload<T extends NotificationTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationTemplateGroupByOutputType[P]>
        }
      >
    >


  export type NotificationTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    variables?: boolean
    language?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    triggers?: boolean | NotificationTemplate$triggersArgs<ExtArgs>
    queue?: boolean | NotificationTemplate$queueArgs<ExtArgs>
    history?: boolean | NotificationTemplate$historyArgs<ExtArgs>
    _count?: boolean | NotificationTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationTemplate"]>

  export type NotificationTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    variables?: boolean
    language?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationTemplate"]>

  export type NotificationTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    variables?: boolean
    language?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationTemplate"]>

  export type NotificationTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    variables?: boolean
    language?: boolean
    branchId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "subject" | "content" | "variables" | "language" | "branchId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationTemplate"]>
  export type NotificationTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    triggers?: boolean | NotificationTemplate$triggersArgs<ExtArgs>
    queue?: boolean | NotificationTemplate$queueArgs<ExtArgs>
    history?: boolean | NotificationTemplate$historyArgs<ExtArgs>
    _count?: boolean | NotificationTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $NotificationTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationTemplate"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      triggers: Prisma.$NotificationTriggerPayload<ExtArgs>[]
      queue: Prisma.$NotificationQueuePayload<ExtArgs>[]
      history: Prisma.$NotificationHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.NotificationType
      subject: string | null
      content: string
      variables: Prisma.JsonValue
      language: string
      branchId: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationTemplate"]>
    composites: {}
  }

  type NotificationTemplateGetPayload<S extends boolean | null | undefined | NotificationTemplateDefaultArgs> = $Result.GetResult<Prisma.$NotificationTemplatePayload, S>

  type NotificationTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationTemplateCountAggregateInputType | true
    }

  export interface NotificationTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationTemplate'], meta: { name: 'NotificationTemplate' } }
    /**
     * Find zero or one NotificationTemplate that matches the filter.
     * @param {NotificationTemplateFindUniqueArgs} args - Arguments to find a NotificationTemplate
     * @example
     * // Get one NotificationTemplate
     * const notificationTemplate = await prisma.notificationTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationTemplateFindUniqueArgs>(args: SelectSubset<T, NotificationTemplateFindUniqueArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationTemplateFindUniqueOrThrowArgs} args - Arguments to find a NotificationTemplate
     * @example
     * // Get one NotificationTemplate
     * const notificationTemplate = await prisma.notificationTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateFindFirstArgs} args - Arguments to find a NotificationTemplate
     * @example
     * // Get one NotificationTemplate
     * const notificationTemplate = await prisma.notificationTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationTemplateFindFirstArgs>(args?: SelectSubset<T, NotificationTemplateFindFirstArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateFindFirstOrThrowArgs} args - Arguments to find a NotificationTemplate
     * @example
     * // Get one NotificationTemplate
     * const notificationTemplate = await prisma.notificationTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationTemplates
     * const notificationTemplates = await prisma.notificationTemplate.findMany()
     * 
     * // Get first 10 NotificationTemplates
     * const notificationTemplates = await prisma.notificationTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationTemplateWithIdOnly = await prisma.notificationTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationTemplateFindManyArgs>(args?: SelectSubset<T, NotificationTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationTemplate.
     * @param {NotificationTemplateCreateArgs} args - Arguments to create a NotificationTemplate.
     * @example
     * // Create one NotificationTemplate
     * const NotificationTemplate = await prisma.notificationTemplate.create({
     *   data: {
     *     // ... data to create a NotificationTemplate
     *   }
     * })
     * 
     */
    create<T extends NotificationTemplateCreateArgs>(args: SelectSubset<T, NotificationTemplateCreateArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationTemplates.
     * @param {NotificationTemplateCreateManyArgs} args - Arguments to create many NotificationTemplates.
     * @example
     * // Create many NotificationTemplates
     * const notificationTemplate = await prisma.notificationTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationTemplateCreateManyArgs>(args?: SelectSubset<T, NotificationTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationTemplates and returns the data saved in the database.
     * @param {NotificationTemplateCreateManyAndReturnArgs} args - Arguments to create many NotificationTemplates.
     * @example
     * // Create many NotificationTemplates
     * const notificationTemplate = await prisma.notificationTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationTemplates and only return the `id`
     * const notificationTemplateWithIdOnly = await prisma.notificationTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationTemplate.
     * @param {NotificationTemplateDeleteArgs} args - Arguments to delete one NotificationTemplate.
     * @example
     * // Delete one NotificationTemplate
     * const NotificationTemplate = await prisma.notificationTemplate.delete({
     *   where: {
     *     // ... filter to delete one NotificationTemplate
     *   }
     * })
     * 
     */
    delete<T extends NotificationTemplateDeleteArgs>(args: SelectSubset<T, NotificationTemplateDeleteArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationTemplate.
     * @param {NotificationTemplateUpdateArgs} args - Arguments to update one NotificationTemplate.
     * @example
     * // Update one NotificationTemplate
     * const notificationTemplate = await prisma.notificationTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationTemplateUpdateArgs>(args: SelectSubset<T, NotificationTemplateUpdateArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationTemplates.
     * @param {NotificationTemplateDeleteManyArgs} args - Arguments to filter NotificationTemplates to delete.
     * @example
     * // Delete a few NotificationTemplates
     * const { count } = await prisma.notificationTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationTemplateDeleteManyArgs>(args?: SelectSubset<T, NotificationTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationTemplates
     * const notificationTemplate = await prisma.notificationTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationTemplateUpdateManyArgs>(args: SelectSubset<T, NotificationTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTemplates and returns the data updated in the database.
     * @param {NotificationTemplateUpdateManyAndReturnArgs} args - Arguments to update many NotificationTemplates.
     * @example
     * // Update many NotificationTemplates
     * const notificationTemplate = await prisma.notificationTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationTemplates and only return the `id`
     * const notificationTemplateWithIdOnly = await prisma.notificationTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationTemplate.
     * @param {NotificationTemplateUpsertArgs} args - Arguments to update or create a NotificationTemplate.
     * @example
     * // Update or create a NotificationTemplate
     * const notificationTemplate = await prisma.notificationTemplate.upsert({
     *   create: {
     *     // ... data to create a NotificationTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationTemplate we want to update
     *   }
     * })
     */
    upsert<T extends NotificationTemplateUpsertArgs>(args: SelectSubset<T, NotificationTemplateUpsertArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateCountArgs} args - Arguments to filter NotificationTemplates to count.
     * @example
     * // Count the number of NotificationTemplates
     * const count = await prisma.notificationTemplate.count({
     *   where: {
     *     // ... the filter for the NotificationTemplates we want to count
     *   }
     * })
    **/
    count<T extends NotificationTemplateCountArgs>(
      args?: Subset<T, NotificationTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationTemplateAggregateArgs>(args: Subset<T, NotificationTemplateAggregateArgs>): Prisma.PrismaPromise<GetNotificationTemplateAggregateType<T>>

    /**
     * Group by NotificationTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationTemplateGroupByArgs['orderBy'] }
        : { orderBy?: NotificationTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationTemplate model
   */
  readonly fields: NotificationTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    triggers<T extends NotificationTemplate$triggersArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTemplate$triggersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    queue<T extends NotificationTemplate$queueArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTemplate$queueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends NotificationTemplate$historyArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTemplate$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationTemplate model
   */
  interface NotificationTemplateFieldRefs {
    readonly id: FieldRef<"NotificationTemplate", 'String'>
    readonly name: FieldRef<"NotificationTemplate", 'String'>
    readonly type: FieldRef<"NotificationTemplate", 'NotificationType'>
    readonly subject: FieldRef<"NotificationTemplate", 'String'>
    readonly content: FieldRef<"NotificationTemplate", 'String'>
    readonly variables: FieldRef<"NotificationTemplate", 'Json'>
    readonly language: FieldRef<"NotificationTemplate", 'String'>
    readonly branchId: FieldRef<"NotificationTemplate", 'String'>
    readonly isActive: FieldRef<"NotificationTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationTemplate findUnique
   */
  export type NotificationTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTemplate to fetch.
     */
    where: NotificationTemplateWhereUniqueInput
  }

  /**
   * NotificationTemplate findUniqueOrThrow
   */
  export type NotificationTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTemplate to fetch.
     */
    where: NotificationTemplateWhereUniqueInput
  }

  /**
   * NotificationTemplate findFirst
   */
  export type NotificationTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTemplate to fetch.
     */
    where?: NotificationTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTemplates to fetch.
     */
    orderBy?: NotificationTemplateOrderByWithRelationInput | NotificationTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTemplates.
     */
    cursor?: NotificationTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTemplates.
     */
    distinct?: NotificationTemplateScalarFieldEnum | NotificationTemplateScalarFieldEnum[]
  }

  /**
   * NotificationTemplate findFirstOrThrow
   */
  export type NotificationTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTemplate to fetch.
     */
    where?: NotificationTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTemplates to fetch.
     */
    orderBy?: NotificationTemplateOrderByWithRelationInput | NotificationTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTemplates.
     */
    cursor?: NotificationTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTemplates.
     */
    distinct?: NotificationTemplateScalarFieldEnum | NotificationTemplateScalarFieldEnum[]
  }

  /**
   * NotificationTemplate findMany
   */
  export type NotificationTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTemplates to fetch.
     */
    where?: NotificationTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTemplates to fetch.
     */
    orderBy?: NotificationTemplateOrderByWithRelationInput | NotificationTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationTemplates.
     */
    cursor?: NotificationTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTemplates.
     */
    skip?: number
    distinct?: NotificationTemplateScalarFieldEnum | NotificationTemplateScalarFieldEnum[]
  }

  /**
   * NotificationTemplate create
   */
  export type NotificationTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationTemplate.
     */
    data: XOR<NotificationTemplateCreateInput, NotificationTemplateUncheckedCreateInput>
  }

  /**
   * NotificationTemplate createMany
   */
  export type NotificationTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationTemplates.
     */
    data: NotificationTemplateCreateManyInput | NotificationTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationTemplate createManyAndReturn
   */
  export type NotificationTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationTemplates.
     */
    data: NotificationTemplateCreateManyInput | NotificationTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationTemplate update
   */
  export type NotificationTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationTemplate.
     */
    data: XOR<NotificationTemplateUpdateInput, NotificationTemplateUncheckedUpdateInput>
    /**
     * Choose, which NotificationTemplate to update.
     */
    where: NotificationTemplateWhereUniqueInput
  }

  /**
   * NotificationTemplate updateMany
   */
  export type NotificationTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationTemplates.
     */
    data: XOR<NotificationTemplateUpdateManyMutationInput, NotificationTemplateUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTemplates to update
     */
    where?: NotificationTemplateWhereInput
    /**
     * Limit how many NotificationTemplates to update.
     */
    limit?: number
  }

  /**
   * NotificationTemplate updateManyAndReturn
   */
  export type NotificationTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * The data used to update NotificationTemplates.
     */
    data: XOR<NotificationTemplateUpdateManyMutationInput, NotificationTemplateUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTemplates to update
     */
    where?: NotificationTemplateWhereInput
    /**
     * Limit how many NotificationTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationTemplate upsert
   */
  export type NotificationTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationTemplate to update in case it exists.
     */
    where: NotificationTemplateWhereUniqueInput
    /**
     * In case the NotificationTemplate found by the `where` argument doesn't exist, create a new NotificationTemplate with this data.
     */
    create: XOR<NotificationTemplateCreateInput, NotificationTemplateUncheckedCreateInput>
    /**
     * In case the NotificationTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationTemplateUpdateInput, NotificationTemplateUncheckedUpdateInput>
  }

  /**
   * NotificationTemplate delete
   */
  export type NotificationTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
    /**
     * Filter which NotificationTemplate to delete.
     */
    where: NotificationTemplateWhereUniqueInput
  }

  /**
   * NotificationTemplate deleteMany
   */
  export type NotificationTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationTemplates to delete
     */
    where?: NotificationTemplateWhereInput
    /**
     * Limit how many NotificationTemplates to delete.
     */
    limit?: number
  }

  /**
   * NotificationTemplate.triggers
   */
  export type NotificationTemplate$triggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    where?: NotificationTriggerWhereInput
    orderBy?: NotificationTriggerOrderByWithRelationInput | NotificationTriggerOrderByWithRelationInput[]
    cursor?: NotificationTriggerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationTriggerScalarFieldEnum | NotificationTriggerScalarFieldEnum[]
  }

  /**
   * NotificationTemplate.queue
   */
  export type NotificationTemplate$queueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    where?: NotificationQueueWhereInput
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    cursor?: NotificationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * NotificationTemplate.history
   */
  export type NotificationTemplate$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    where?: NotificationHistoryWhereInput
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    cursor?: NotificationHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * NotificationTemplate without action
   */
  export type NotificationTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTemplate
     */
    select?: NotificationTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTemplate
     */
    omit?: NotificationTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTemplateInclude<ExtArgs> | null
  }


  /**
   * Model NotificationTrigger
   */

  export type AggregateNotificationTrigger = {
    _count: NotificationTriggerCountAggregateOutputType | null
    _avg: NotificationTriggerAvgAggregateOutputType | null
    _sum: NotificationTriggerSumAggregateOutputType | null
    _min: NotificationTriggerMinAggregateOutputType | null
    _max: NotificationTriggerMaxAggregateOutputType | null
  }

  export type NotificationTriggerAvgAggregateOutputType = {
    priority: number | null
  }

  export type NotificationTriggerSumAggregateOutputType = {
    priority: number | null
  }

  export type NotificationTriggerMinAggregateOutputType = {
    id: string | null
    name: string | null
    eventType: $Enums.NotificationEventType | null
    templateId: string | null
    branchId: string | null
    isActive: boolean | null
    priority: number | null
    schedule: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationTriggerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    eventType: $Enums.NotificationEventType | null
    templateId: string | null
    branchId: string | null
    isActive: boolean | null
    priority: number | null
    schedule: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationTriggerCountAggregateOutputType = {
    id: number
    name: number
    eventType: number
    conditions: number
    templateId: number
    branchId: number
    isActive: number
    priority: number
    schedule: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationTriggerAvgAggregateInputType = {
    priority?: true
  }

  export type NotificationTriggerSumAggregateInputType = {
    priority?: true
  }

  export type NotificationTriggerMinAggregateInputType = {
    id?: true
    name?: true
    eventType?: true
    templateId?: true
    branchId?: true
    isActive?: true
    priority?: true
    schedule?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationTriggerMaxAggregateInputType = {
    id?: true
    name?: true
    eventType?: true
    templateId?: true
    branchId?: true
    isActive?: true
    priority?: true
    schedule?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationTriggerCountAggregateInputType = {
    id?: true
    name?: true
    eventType?: true
    conditions?: true
    templateId?: true
    branchId?: true
    isActive?: true
    priority?: true
    schedule?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationTriggerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationTrigger to aggregate.
     */
    where?: NotificationTriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTriggers to fetch.
     */
    orderBy?: NotificationTriggerOrderByWithRelationInput | NotificationTriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationTriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTriggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTriggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationTriggers
    **/
    _count?: true | NotificationTriggerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationTriggerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationTriggerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationTriggerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationTriggerMaxAggregateInputType
  }

  export type GetNotificationTriggerAggregateType<T extends NotificationTriggerAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationTrigger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationTrigger[P]>
      : GetScalarType<T[P], AggregateNotificationTrigger[P]>
  }




  export type NotificationTriggerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTriggerWhereInput
    orderBy?: NotificationTriggerOrderByWithAggregationInput | NotificationTriggerOrderByWithAggregationInput[]
    by: NotificationTriggerScalarFieldEnum[] | NotificationTriggerScalarFieldEnum
    having?: NotificationTriggerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationTriggerCountAggregateInputType | true
    _avg?: NotificationTriggerAvgAggregateInputType
    _sum?: NotificationTriggerSumAggregateInputType
    _min?: NotificationTriggerMinAggregateInputType
    _max?: NotificationTriggerMaxAggregateInputType
  }

  export type NotificationTriggerGroupByOutputType = {
    id: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonValue
    templateId: string
    branchId: string
    isActive: boolean
    priority: number
    schedule: string | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationTriggerCountAggregateOutputType | null
    _avg: NotificationTriggerAvgAggregateOutputType | null
    _sum: NotificationTriggerSumAggregateOutputType | null
    _min: NotificationTriggerMinAggregateOutputType | null
    _max: NotificationTriggerMaxAggregateOutputType | null
  }

  type GetNotificationTriggerGroupByPayload<T extends NotificationTriggerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationTriggerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationTriggerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationTriggerGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationTriggerGroupByOutputType[P]>
        }
      >
    >


  export type NotificationTriggerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventType?: boolean
    conditions?: boolean
    templateId?: boolean
    branchId?: boolean
    isActive?: boolean
    priority?: boolean
    schedule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    queue?: boolean | NotificationTrigger$queueArgs<ExtArgs>
    history?: boolean | NotificationTrigger$historyArgs<ExtArgs>
    _count?: boolean | NotificationTriggerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationTrigger"]>

  export type NotificationTriggerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventType?: boolean
    conditions?: boolean
    templateId?: boolean
    branchId?: boolean
    isActive?: boolean
    priority?: boolean
    schedule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationTrigger"]>

  export type NotificationTriggerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventType?: boolean
    conditions?: boolean
    templateId?: boolean
    branchId?: boolean
    isActive?: boolean
    priority?: boolean
    schedule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationTrigger"]>

  export type NotificationTriggerSelectScalar = {
    id?: boolean
    name?: boolean
    eventType?: boolean
    conditions?: boolean
    templateId?: boolean
    branchId?: boolean
    isActive?: boolean
    priority?: boolean
    schedule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationTriggerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "eventType" | "conditions" | "templateId" | "branchId" | "isActive" | "priority" | "schedule" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationTrigger"]>
  export type NotificationTriggerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    queue?: boolean | NotificationTrigger$queueArgs<ExtArgs>
    history?: boolean | NotificationTrigger$historyArgs<ExtArgs>
    _count?: boolean | NotificationTriggerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationTriggerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationTriggerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $NotificationTriggerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationTrigger"
    objects: {
      template: Prisma.$NotificationTemplatePayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
      queue: Prisma.$NotificationQueuePayload<ExtArgs>[]
      history: Prisma.$NotificationHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      eventType: $Enums.NotificationEventType
      conditions: Prisma.JsonValue
      templateId: string
      branchId: string
      isActive: boolean
      priority: number
      schedule: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationTrigger"]>
    composites: {}
  }

  type NotificationTriggerGetPayload<S extends boolean | null | undefined | NotificationTriggerDefaultArgs> = $Result.GetResult<Prisma.$NotificationTriggerPayload, S>

  type NotificationTriggerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationTriggerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationTriggerCountAggregateInputType | true
    }

  export interface NotificationTriggerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationTrigger'], meta: { name: 'NotificationTrigger' } }
    /**
     * Find zero or one NotificationTrigger that matches the filter.
     * @param {NotificationTriggerFindUniqueArgs} args - Arguments to find a NotificationTrigger
     * @example
     * // Get one NotificationTrigger
     * const notificationTrigger = await prisma.notificationTrigger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationTriggerFindUniqueArgs>(args: SelectSubset<T, NotificationTriggerFindUniqueArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationTrigger that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationTriggerFindUniqueOrThrowArgs} args - Arguments to find a NotificationTrigger
     * @example
     * // Get one NotificationTrigger
     * const notificationTrigger = await prisma.notificationTrigger.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationTriggerFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationTriggerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationTrigger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerFindFirstArgs} args - Arguments to find a NotificationTrigger
     * @example
     * // Get one NotificationTrigger
     * const notificationTrigger = await prisma.notificationTrigger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationTriggerFindFirstArgs>(args?: SelectSubset<T, NotificationTriggerFindFirstArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationTrigger that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerFindFirstOrThrowArgs} args - Arguments to find a NotificationTrigger
     * @example
     * // Get one NotificationTrigger
     * const notificationTrigger = await prisma.notificationTrigger.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationTriggerFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationTriggerFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationTriggers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationTriggers
     * const notificationTriggers = await prisma.notificationTrigger.findMany()
     * 
     * // Get first 10 NotificationTriggers
     * const notificationTriggers = await prisma.notificationTrigger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationTriggerWithIdOnly = await prisma.notificationTrigger.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationTriggerFindManyArgs>(args?: SelectSubset<T, NotificationTriggerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationTrigger.
     * @param {NotificationTriggerCreateArgs} args - Arguments to create a NotificationTrigger.
     * @example
     * // Create one NotificationTrigger
     * const NotificationTrigger = await prisma.notificationTrigger.create({
     *   data: {
     *     // ... data to create a NotificationTrigger
     *   }
     * })
     * 
     */
    create<T extends NotificationTriggerCreateArgs>(args: SelectSubset<T, NotificationTriggerCreateArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationTriggers.
     * @param {NotificationTriggerCreateManyArgs} args - Arguments to create many NotificationTriggers.
     * @example
     * // Create many NotificationTriggers
     * const notificationTrigger = await prisma.notificationTrigger.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationTriggerCreateManyArgs>(args?: SelectSubset<T, NotificationTriggerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationTriggers and returns the data saved in the database.
     * @param {NotificationTriggerCreateManyAndReturnArgs} args - Arguments to create many NotificationTriggers.
     * @example
     * // Create many NotificationTriggers
     * const notificationTrigger = await prisma.notificationTrigger.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationTriggers and only return the `id`
     * const notificationTriggerWithIdOnly = await prisma.notificationTrigger.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationTriggerCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationTriggerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationTrigger.
     * @param {NotificationTriggerDeleteArgs} args - Arguments to delete one NotificationTrigger.
     * @example
     * // Delete one NotificationTrigger
     * const NotificationTrigger = await prisma.notificationTrigger.delete({
     *   where: {
     *     // ... filter to delete one NotificationTrigger
     *   }
     * })
     * 
     */
    delete<T extends NotificationTriggerDeleteArgs>(args: SelectSubset<T, NotificationTriggerDeleteArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationTrigger.
     * @param {NotificationTriggerUpdateArgs} args - Arguments to update one NotificationTrigger.
     * @example
     * // Update one NotificationTrigger
     * const notificationTrigger = await prisma.notificationTrigger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationTriggerUpdateArgs>(args: SelectSubset<T, NotificationTriggerUpdateArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationTriggers.
     * @param {NotificationTriggerDeleteManyArgs} args - Arguments to filter NotificationTriggers to delete.
     * @example
     * // Delete a few NotificationTriggers
     * const { count } = await prisma.notificationTrigger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationTriggerDeleteManyArgs>(args?: SelectSubset<T, NotificationTriggerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTriggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationTriggers
     * const notificationTrigger = await prisma.notificationTrigger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationTriggerUpdateManyArgs>(args: SelectSubset<T, NotificationTriggerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTriggers and returns the data updated in the database.
     * @param {NotificationTriggerUpdateManyAndReturnArgs} args - Arguments to update many NotificationTriggers.
     * @example
     * // Update many NotificationTriggers
     * const notificationTrigger = await prisma.notificationTrigger.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationTriggers and only return the `id`
     * const notificationTriggerWithIdOnly = await prisma.notificationTrigger.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationTriggerUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationTriggerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationTrigger.
     * @param {NotificationTriggerUpsertArgs} args - Arguments to update or create a NotificationTrigger.
     * @example
     * // Update or create a NotificationTrigger
     * const notificationTrigger = await prisma.notificationTrigger.upsert({
     *   create: {
     *     // ... data to create a NotificationTrigger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationTrigger we want to update
     *   }
     * })
     */
    upsert<T extends NotificationTriggerUpsertArgs>(args: SelectSubset<T, NotificationTriggerUpsertArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationTriggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerCountArgs} args - Arguments to filter NotificationTriggers to count.
     * @example
     * // Count the number of NotificationTriggers
     * const count = await prisma.notificationTrigger.count({
     *   where: {
     *     // ... the filter for the NotificationTriggers we want to count
     *   }
     * })
    **/
    count<T extends NotificationTriggerCountArgs>(
      args?: Subset<T, NotificationTriggerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationTriggerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationTrigger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationTriggerAggregateArgs>(args: Subset<T, NotificationTriggerAggregateArgs>): Prisma.PrismaPromise<GetNotificationTriggerAggregateType<T>>

    /**
     * Group by NotificationTrigger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTriggerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationTriggerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationTriggerGroupByArgs['orderBy'] }
        : { orderBy?: NotificationTriggerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationTriggerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationTriggerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationTrigger model
   */
  readonly fields: NotificationTriggerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationTrigger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationTriggerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends NotificationTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTemplateDefaultArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    queue<T extends NotificationTrigger$queueArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTrigger$queueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends NotificationTrigger$historyArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTrigger$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationTrigger model
   */
  interface NotificationTriggerFieldRefs {
    readonly id: FieldRef<"NotificationTrigger", 'String'>
    readonly name: FieldRef<"NotificationTrigger", 'String'>
    readonly eventType: FieldRef<"NotificationTrigger", 'NotificationEventType'>
    readonly conditions: FieldRef<"NotificationTrigger", 'Json'>
    readonly templateId: FieldRef<"NotificationTrigger", 'String'>
    readonly branchId: FieldRef<"NotificationTrigger", 'String'>
    readonly isActive: FieldRef<"NotificationTrigger", 'Boolean'>
    readonly priority: FieldRef<"NotificationTrigger", 'Int'>
    readonly schedule: FieldRef<"NotificationTrigger", 'String'>
    readonly createdAt: FieldRef<"NotificationTrigger", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationTrigger", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationTrigger findUnique
   */
  export type NotificationTriggerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTrigger to fetch.
     */
    where: NotificationTriggerWhereUniqueInput
  }

  /**
   * NotificationTrigger findUniqueOrThrow
   */
  export type NotificationTriggerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTrigger to fetch.
     */
    where: NotificationTriggerWhereUniqueInput
  }

  /**
   * NotificationTrigger findFirst
   */
  export type NotificationTriggerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTrigger to fetch.
     */
    where?: NotificationTriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTriggers to fetch.
     */
    orderBy?: NotificationTriggerOrderByWithRelationInput | NotificationTriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTriggers.
     */
    cursor?: NotificationTriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTriggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTriggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTriggers.
     */
    distinct?: NotificationTriggerScalarFieldEnum | NotificationTriggerScalarFieldEnum[]
  }

  /**
   * NotificationTrigger findFirstOrThrow
   */
  export type NotificationTriggerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTrigger to fetch.
     */
    where?: NotificationTriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTriggers to fetch.
     */
    orderBy?: NotificationTriggerOrderByWithRelationInput | NotificationTriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTriggers.
     */
    cursor?: NotificationTriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTriggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTriggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTriggers.
     */
    distinct?: NotificationTriggerScalarFieldEnum | NotificationTriggerScalarFieldEnum[]
  }

  /**
   * NotificationTrigger findMany
   */
  export type NotificationTriggerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTriggers to fetch.
     */
    where?: NotificationTriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTriggers to fetch.
     */
    orderBy?: NotificationTriggerOrderByWithRelationInput | NotificationTriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationTriggers.
     */
    cursor?: NotificationTriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTriggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTriggers.
     */
    skip?: number
    distinct?: NotificationTriggerScalarFieldEnum | NotificationTriggerScalarFieldEnum[]
  }

  /**
   * NotificationTrigger create
   */
  export type NotificationTriggerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationTrigger.
     */
    data: XOR<NotificationTriggerCreateInput, NotificationTriggerUncheckedCreateInput>
  }

  /**
   * NotificationTrigger createMany
   */
  export type NotificationTriggerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationTriggers.
     */
    data: NotificationTriggerCreateManyInput | NotificationTriggerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationTrigger createManyAndReturn
   */
  export type NotificationTriggerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationTriggers.
     */
    data: NotificationTriggerCreateManyInput | NotificationTriggerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationTrigger update
   */
  export type NotificationTriggerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationTrigger.
     */
    data: XOR<NotificationTriggerUpdateInput, NotificationTriggerUncheckedUpdateInput>
    /**
     * Choose, which NotificationTrigger to update.
     */
    where: NotificationTriggerWhereUniqueInput
  }

  /**
   * NotificationTrigger updateMany
   */
  export type NotificationTriggerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationTriggers.
     */
    data: XOR<NotificationTriggerUpdateManyMutationInput, NotificationTriggerUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTriggers to update
     */
    where?: NotificationTriggerWhereInput
    /**
     * Limit how many NotificationTriggers to update.
     */
    limit?: number
  }

  /**
   * NotificationTrigger updateManyAndReturn
   */
  export type NotificationTriggerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * The data used to update NotificationTriggers.
     */
    data: XOR<NotificationTriggerUpdateManyMutationInput, NotificationTriggerUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTriggers to update
     */
    where?: NotificationTriggerWhereInput
    /**
     * Limit how many NotificationTriggers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationTrigger upsert
   */
  export type NotificationTriggerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationTrigger to update in case it exists.
     */
    where: NotificationTriggerWhereUniqueInput
    /**
     * In case the NotificationTrigger found by the `where` argument doesn't exist, create a new NotificationTrigger with this data.
     */
    create: XOR<NotificationTriggerCreateInput, NotificationTriggerUncheckedCreateInput>
    /**
     * In case the NotificationTrigger was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationTriggerUpdateInput, NotificationTriggerUncheckedUpdateInput>
  }

  /**
   * NotificationTrigger delete
   */
  export type NotificationTriggerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    /**
     * Filter which NotificationTrigger to delete.
     */
    where: NotificationTriggerWhereUniqueInput
  }

  /**
   * NotificationTrigger deleteMany
   */
  export type NotificationTriggerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationTriggers to delete
     */
    where?: NotificationTriggerWhereInput
    /**
     * Limit how many NotificationTriggers to delete.
     */
    limit?: number
  }

  /**
   * NotificationTrigger.queue
   */
  export type NotificationTrigger$queueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    where?: NotificationQueueWhereInput
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    cursor?: NotificationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * NotificationTrigger.history
   */
  export type NotificationTrigger$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    where?: NotificationHistoryWhereInput
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    cursor?: NotificationHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * NotificationTrigger without action
   */
  export type NotificationTriggerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
  }


  /**
   * Model NotificationQueue
   */

  export type AggregateNotificationQueue = {
    _count: NotificationQueueCountAggregateOutputType | null
    _avg: NotificationQueueAvgAggregateOutputType | null
    _sum: NotificationQueueSumAggregateOutputType | null
    _min: NotificationQueueMinAggregateOutputType | null
    _max: NotificationQueueMaxAggregateOutputType | null
  }

  export type NotificationQueueAvgAggregateOutputType = {
    retryCount: number | null
  }

  export type NotificationQueueSumAggregateOutputType = {
    retryCount: number | null
  }

  export type NotificationQueueMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    templateId: string | null
    triggerId: string | null
    branchId: string | null
    status: $Enums.NotificationStatus | null
    scheduledAt: Date | null
    sentAt: Date | null
    errorMessage: string | null
    retryCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationQueueMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    templateId: string | null
    triggerId: string | null
    branchId: string | null
    status: $Enums.NotificationStatus | null
    scheduledAt: Date | null
    sentAt: Date | null
    errorMessage: string | null
    retryCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationQueueCountAggregateOutputType = {
    id: number
    customerId: number
    templateId: number
    triggerId: number
    branchId: number
    status: number
    data: number
    scheduledAt: number
    sentAt: number
    errorMessage: number
    retryCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationQueueAvgAggregateInputType = {
    retryCount?: true
  }

  export type NotificationQueueSumAggregateInputType = {
    retryCount?: true
  }

  export type NotificationQueueMinAggregateInputType = {
    id?: true
    customerId?: true
    templateId?: true
    triggerId?: true
    branchId?: true
    status?: true
    scheduledAt?: true
    sentAt?: true
    errorMessage?: true
    retryCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationQueueMaxAggregateInputType = {
    id?: true
    customerId?: true
    templateId?: true
    triggerId?: true
    branchId?: true
    status?: true
    scheduledAt?: true
    sentAt?: true
    errorMessage?: true
    retryCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationQueueCountAggregateInputType = {
    id?: true
    customerId?: true
    templateId?: true
    triggerId?: true
    branchId?: true
    status?: true
    data?: true
    scheduledAt?: true
    sentAt?: true
    errorMessage?: true
    retryCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationQueueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationQueue to aggregate.
     */
    where?: NotificationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationQueues to fetch.
     */
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationQueues
    **/
    _count?: true | NotificationQueueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationQueueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationQueueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationQueueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationQueueMaxAggregateInputType
  }

  export type GetNotificationQueueAggregateType<T extends NotificationQueueAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationQueue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationQueue[P]>
      : GetScalarType<T[P], AggregateNotificationQueue[P]>
  }




  export type NotificationQueueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationQueueWhereInput
    orderBy?: NotificationQueueOrderByWithAggregationInput | NotificationQueueOrderByWithAggregationInput[]
    by: NotificationQueueScalarFieldEnum[] | NotificationQueueScalarFieldEnum
    having?: NotificationQueueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationQueueCountAggregateInputType | true
    _avg?: NotificationQueueAvgAggregateInputType
    _sum?: NotificationQueueSumAggregateInputType
    _min?: NotificationQueueMinAggregateInputType
    _max?: NotificationQueueMaxAggregateInputType
  }

  export type NotificationQueueGroupByOutputType = {
    id: string
    customerId: string
    templateId: string
    triggerId: string | null
    branchId: string
    status: $Enums.NotificationStatus
    data: JsonValue
    scheduledAt: Date
    sentAt: Date | null
    errorMessage: string | null
    retryCount: number
    createdAt: Date
    updatedAt: Date
    _count: NotificationQueueCountAggregateOutputType | null
    _avg: NotificationQueueAvgAggregateOutputType | null
    _sum: NotificationQueueSumAggregateOutputType | null
    _min: NotificationQueueMinAggregateOutputType | null
    _max: NotificationQueueMaxAggregateOutputType | null
  }

  type GetNotificationQueueGroupByPayload<T extends NotificationQueueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationQueueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationQueueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationQueueGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationQueueGroupByOutputType[P]>
        }
      >
    >


  export type NotificationQueueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    status?: boolean
    data?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationQueue$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationQueue"]>

  export type NotificationQueueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    status?: boolean
    data?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationQueue$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationQueue"]>

  export type NotificationQueueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    status?: boolean
    data?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationQueue$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationQueue"]>

  export type NotificationQueueSelectScalar = {
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    status?: boolean
    data?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationQueueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "templateId" | "triggerId" | "branchId" | "status" | "data" | "scheduledAt" | "sentAt" | "errorMessage" | "retryCount" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationQueue"]>
  export type NotificationQueueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationQueue$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationQueueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationQueue$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationQueueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationQueue$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $NotificationQueuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationQueue"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      template: Prisma.$NotificationTemplatePayload<ExtArgs>
      trigger: Prisma.$NotificationTriggerPayload<ExtArgs> | null
      branch: Prisma.$BranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      templateId: string
      triggerId: string | null
      branchId: string
      status: $Enums.NotificationStatus
      data: Prisma.JsonValue
      scheduledAt: Date
      sentAt: Date | null
      errorMessage: string | null
      retryCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationQueue"]>
    composites: {}
  }

  type NotificationQueueGetPayload<S extends boolean | null | undefined | NotificationQueueDefaultArgs> = $Result.GetResult<Prisma.$NotificationQueuePayload, S>

  type NotificationQueueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationQueueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationQueueCountAggregateInputType | true
    }

  export interface NotificationQueueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationQueue'], meta: { name: 'NotificationQueue' } }
    /**
     * Find zero or one NotificationQueue that matches the filter.
     * @param {NotificationQueueFindUniqueArgs} args - Arguments to find a NotificationQueue
     * @example
     * // Get one NotificationQueue
     * const notificationQueue = await prisma.notificationQueue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationQueueFindUniqueArgs>(args: SelectSubset<T, NotificationQueueFindUniqueArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationQueue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationQueueFindUniqueOrThrowArgs} args - Arguments to find a NotificationQueue
     * @example
     * // Get one NotificationQueue
     * const notificationQueue = await prisma.notificationQueue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationQueueFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationQueueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationQueue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueFindFirstArgs} args - Arguments to find a NotificationQueue
     * @example
     * // Get one NotificationQueue
     * const notificationQueue = await prisma.notificationQueue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationQueueFindFirstArgs>(args?: SelectSubset<T, NotificationQueueFindFirstArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationQueue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueFindFirstOrThrowArgs} args - Arguments to find a NotificationQueue
     * @example
     * // Get one NotificationQueue
     * const notificationQueue = await prisma.notificationQueue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationQueueFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationQueueFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationQueues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationQueues
     * const notificationQueues = await prisma.notificationQueue.findMany()
     * 
     * // Get first 10 NotificationQueues
     * const notificationQueues = await prisma.notificationQueue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationQueueWithIdOnly = await prisma.notificationQueue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationQueueFindManyArgs>(args?: SelectSubset<T, NotificationQueueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationQueue.
     * @param {NotificationQueueCreateArgs} args - Arguments to create a NotificationQueue.
     * @example
     * // Create one NotificationQueue
     * const NotificationQueue = await prisma.notificationQueue.create({
     *   data: {
     *     // ... data to create a NotificationQueue
     *   }
     * })
     * 
     */
    create<T extends NotificationQueueCreateArgs>(args: SelectSubset<T, NotificationQueueCreateArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationQueues.
     * @param {NotificationQueueCreateManyArgs} args - Arguments to create many NotificationQueues.
     * @example
     * // Create many NotificationQueues
     * const notificationQueue = await prisma.notificationQueue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationQueueCreateManyArgs>(args?: SelectSubset<T, NotificationQueueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationQueues and returns the data saved in the database.
     * @param {NotificationQueueCreateManyAndReturnArgs} args - Arguments to create many NotificationQueues.
     * @example
     * // Create many NotificationQueues
     * const notificationQueue = await prisma.notificationQueue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationQueues and only return the `id`
     * const notificationQueueWithIdOnly = await prisma.notificationQueue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationQueueCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationQueueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationQueue.
     * @param {NotificationQueueDeleteArgs} args - Arguments to delete one NotificationQueue.
     * @example
     * // Delete one NotificationQueue
     * const NotificationQueue = await prisma.notificationQueue.delete({
     *   where: {
     *     // ... filter to delete one NotificationQueue
     *   }
     * })
     * 
     */
    delete<T extends NotificationQueueDeleteArgs>(args: SelectSubset<T, NotificationQueueDeleteArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationQueue.
     * @param {NotificationQueueUpdateArgs} args - Arguments to update one NotificationQueue.
     * @example
     * // Update one NotificationQueue
     * const notificationQueue = await prisma.notificationQueue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationQueueUpdateArgs>(args: SelectSubset<T, NotificationQueueUpdateArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationQueues.
     * @param {NotificationQueueDeleteManyArgs} args - Arguments to filter NotificationQueues to delete.
     * @example
     * // Delete a few NotificationQueues
     * const { count } = await prisma.notificationQueue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationQueueDeleteManyArgs>(args?: SelectSubset<T, NotificationQueueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationQueues
     * const notificationQueue = await prisma.notificationQueue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationQueueUpdateManyArgs>(args: SelectSubset<T, NotificationQueueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationQueues and returns the data updated in the database.
     * @param {NotificationQueueUpdateManyAndReturnArgs} args - Arguments to update many NotificationQueues.
     * @example
     * // Update many NotificationQueues
     * const notificationQueue = await prisma.notificationQueue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationQueues and only return the `id`
     * const notificationQueueWithIdOnly = await prisma.notificationQueue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationQueueUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationQueueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationQueue.
     * @param {NotificationQueueUpsertArgs} args - Arguments to update or create a NotificationQueue.
     * @example
     * // Update or create a NotificationQueue
     * const notificationQueue = await prisma.notificationQueue.upsert({
     *   create: {
     *     // ... data to create a NotificationQueue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationQueue we want to update
     *   }
     * })
     */
    upsert<T extends NotificationQueueUpsertArgs>(args: SelectSubset<T, NotificationQueueUpsertArgs<ExtArgs>>): Prisma__NotificationQueueClient<$Result.GetResult<Prisma.$NotificationQueuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueCountArgs} args - Arguments to filter NotificationQueues to count.
     * @example
     * // Count the number of NotificationQueues
     * const count = await prisma.notificationQueue.count({
     *   where: {
     *     // ... the filter for the NotificationQueues we want to count
     *   }
     * })
    **/
    count<T extends NotificationQueueCountArgs>(
      args?: Subset<T, NotificationQueueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationQueueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationQueueAggregateArgs>(args: Subset<T, NotificationQueueAggregateArgs>): Prisma.PrismaPromise<GetNotificationQueueAggregateType<T>>

    /**
     * Group by NotificationQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationQueueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationQueueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationQueueGroupByArgs['orderBy'] }
        : { orderBy?: NotificationQueueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationQueueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationQueueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationQueue model
   */
  readonly fields: NotificationQueueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationQueue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationQueueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    template<T extends NotificationTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTemplateDefaultArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    trigger<T extends NotificationQueue$triggerArgs<ExtArgs> = {}>(args?: Subset<T, NotificationQueue$triggerArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationQueue model
   */
  interface NotificationQueueFieldRefs {
    readonly id: FieldRef<"NotificationQueue", 'String'>
    readonly customerId: FieldRef<"NotificationQueue", 'String'>
    readonly templateId: FieldRef<"NotificationQueue", 'String'>
    readonly triggerId: FieldRef<"NotificationQueue", 'String'>
    readonly branchId: FieldRef<"NotificationQueue", 'String'>
    readonly status: FieldRef<"NotificationQueue", 'NotificationStatus'>
    readonly data: FieldRef<"NotificationQueue", 'Json'>
    readonly scheduledAt: FieldRef<"NotificationQueue", 'DateTime'>
    readonly sentAt: FieldRef<"NotificationQueue", 'DateTime'>
    readonly errorMessage: FieldRef<"NotificationQueue", 'String'>
    readonly retryCount: FieldRef<"NotificationQueue", 'Int'>
    readonly createdAt: FieldRef<"NotificationQueue", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationQueue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationQueue findUnique
   */
  export type NotificationQueueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * Filter, which NotificationQueue to fetch.
     */
    where: NotificationQueueWhereUniqueInput
  }

  /**
   * NotificationQueue findUniqueOrThrow
   */
  export type NotificationQueueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * Filter, which NotificationQueue to fetch.
     */
    where: NotificationQueueWhereUniqueInput
  }

  /**
   * NotificationQueue findFirst
   */
  export type NotificationQueueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * Filter, which NotificationQueue to fetch.
     */
    where?: NotificationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationQueues to fetch.
     */
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationQueues.
     */
    cursor?: NotificationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationQueues.
     */
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * NotificationQueue findFirstOrThrow
   */
  export type NotificationQueueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * Filter, which NotificationQueue to fetch.
     */
    where?: NotificationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationQueues to fetch.
     */
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationQueues.
     */
    cursor?: NotificationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationQueues.
     */
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * NotificationQueue findMany
   */
  export type NotificationQueueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * Filter, which NotificationQueues to fetch.
     */
    where?: NotificationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationQueues to fetch.
     */
    orderBy?: NotificationQueueOrderByWithRelationInput | NotificationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationQueues.
     */
    cursor?: NotificationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationQueues.
     */
    skip?: number
    distinct?: NotificationQueueScalarFieldEnum | NotificationQueueScalarFieldEnum[]
  }

  /**
   * NotificationQueue create
   */
  export type NotificationQueueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationQueue.
     */
    data: XOR<NotificationQueueCreateInput, NotificationQueueUncheckedCreateInput>
  }

  /**
   * NotificationQueue createMany
   */
  export type NotificationQueueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationQueues.
     */
    data: NotificationQueueCreateManyInput | NotificationQueueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationQueue createManyAndReturn
   */
  export type NotificationQueueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationQueues.
     */
    data: NotificationQueueCreateManyInput | NotificationQueueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationQueue update
   */
  export type NotificationQueueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationQueue.
     */
    data: XOR<NotificationQueueUpdateInput, NotificationQueueUncheckedUpdateInput>
    /**
     * Choose, which NotificationQueue to update.
     */
    where: NotificationQueueWhereUniqueInput
  }

  /**
   * NotificationQueue updateMany
   */
  export type NotificationQueueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationQueues.
     */
    data: XOR<NotificationQueueUpdateManyMutationInput, NotificationQueueUncheckedUpdateManyInput>
    /**
     * Filter which NotificationQueues to update
     */
    where?: NotificationQueueWhereInput
    /**
     * Limit how many NotificationQueues to update.
     */
    limit?: number
  }

  /**
   * NotificationQueue updateManyAndReturn
   */
  export type NotificationQueueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * The data used to update NotificationQueues.
     */
    data: XOR<NotificationQueueUpdateManyMutationInput, NotificationQueueUncheckedUpdateManyInput>
    /**
     * Filter which NotificationQueues to update
     */
    where?: NotificationQueueWhereInput
    /**
     * Limit how many NotificationQueues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationQueue upsert
   */
  export type NotificationQueueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationQueue to update in case it exists.
     */
    where: NotificationQueueWhereUniqueInput
    /**
     * In case the NotificationQueue found by the `where` argument doesn't exist, create a new NotificationQueue with this data.
     */
    create: XOR<NotificationQueueCreateInput, NotificationQueueUncheckedCreateInput>
    /**
     * In case the NotificationQueue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationQueueUpdateInput, NotificationQueueUncheckedUpdateInput>
  }

  /**
   * NotificationQueue delete
   */
  export type NotificationQueueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
    /**
     * Filter which NotificationQueue to delete.
     */
    where: NotificationQueueWhereUniqueInput
  }

  /**
   * NotificationQueue deleteMany
   */
  export type NotificationQueueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationQueues to delete
     */
    where?: NotificationQueueWhereInput
    /**
     * Limit how many NotificationQueues to delete.
     */
    limit?: number
  }

  /**
   * NotificationQueue.trigger
   */
  export type NotificationQueue$triggerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    where?: NotificationTriggerWhereInput
  }

  /**
   * NotificationQueue without action
   */
  export type NotificationQueueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationQueue
     */
    select?: NotificationQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationQueue
     */
    omit?: NotificationQueueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationQueueInclude<ExtArgs> | null
  }


  /**
   * Model NotificationHistory
   */

  export type AggregateNotificationHistory = {
    _count: NotificationHistoryCountAggregateOutputType | null
    _avg: NotificationHistoryAvgAggregateOutputType | null
    _sum: NotificationHistorySumAggregateOutputType | null
    _min: NotificationHistoryMinAggregateOutputType | null
    _max: NotificationHistoryMaxAggregateOutputType | null
  }

  export type NotificationHistoryAvgAggregateOutputType = {
    cost: number | null
  }

  export type NotificationHistorySumAggregateOutputType = {
    cost: number | null
  }

  export type NotificationHistoryMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    templateId: string | null
    triggerId: string | null
    branchId: string | null
    type: $Enums.NotificationType | null
    status: $Enums.NotificationDeliveryStatus | null
    content: string | null
    cost: number | null
    sentAt: Date | null
    deliveredAt: Date | null
    readAt: Date | null
    createdAt: Date | null
  }

  export type NotificationHistoryMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    templateId: string | null
    triggerId: string | null
    branchId: string | null
    type: $Enums.NotificationType | null
    status: $Enums.NotificationDeliveryStatus | null
    content: string | null
    cost: number | null
    sentAt: Date | null
    deliveredAt: Date | null
    readAt: Date | null
    createdAt: Date | null
  }

  export type NotificationHistoryCountAggregateOutputType = {
    id: number
    customerId: number
    templateId: number
    triggerId: number
    branchId: number
    type: number
    status: number
    content: number
    metadata: number
    cost: number
    sentAt: number
    deliveredAt: number
    readAt: number
    createdAt: number
    _all: number
  }


  export type NotificationHistoryAvgAggregateInputType = {
    cost?: true
  }

  export type NotificationHistorySumAggregateInputType = {
    cost?: true
  }

  export type NotificationHistoryMinAggregateInputType = {
    id?: true
    customerId?: true
    templateId?: true
    triggerId?: true
    branchId?: true
    type?: true
    status?: true
    content?: true
    cost?: true
    sentAt?: true
    deliveredAt?: true
    readAt?: true
    createdAt?: true
  }

  export type NotificationHistoryMaxAggregateInputType = {
    id?: true
    customerId?: true
    templateId?: true
    triggerId?: true
    branchId?: true
    type?: true
    status?: true
    content?: true
    cost?: true
    sentAt?: true
    deliveredAt?: true
    readAt?: true
    createdAt?: true
  }

  export type NotificationHistoryCountAggregateInputType = {
    id?: true
    customerId?: true
    templateId?: true
    triggerId?: true
    branchId?: true
    type?: true
    status?: true
    content?: true
    metadata?: true
    cost?: true
    sentAt?: true
    deliveredAt?: true
    readAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationHistory to aggregate.
     */
    where?: NotificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationHistories to fetch.
     */
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationHistories
    **/
    _count?: true | NotificationHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationHistoryMaxAggregateInputType
  }

  export type GetNotificationHistoryAggregateType<T extends NotificationHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationHistory[P]>
      : GetScalarType<T[P], AggregateNotificationHistory[P]>
  }




  export type NotificationHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationHistoryWhereInput
    orderBy?: NotificationHistoryOrderByWithAggregationInput | NotificationHistoryOrderByWithAggregationInput[]
    by: NotificationHistoryScalarFieldEnum[] | NotificationHistoryScalarFieldEnum
    having?: NotificationHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationHistoryCountAggregateInputType | true
    _avg?: NotificationHistoryAvgAggregateInputType
    _sum?: NotificationHistorySumAggregateInputType
    _min?: NotificationHistoryMinAggregateInputType
    _max?: NotificationHistoryMaxAggregateInputType
  }

  export type NotificationHistoryGroupByOutputType = {
    id: string
    customerId: string
    templateId: string
    triggerId: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata: JsonValue | null
    cost: number | null
    sentAt: Date
    deliveredAt: Date | null
    readAt: Date | null
    createdAt: Date
    _count: NotificationHistoryCountAggregateOutputType | null
    _avg: NotificationHistoryAvgAggregateOutputType | null
    _sum: NotificationHistorySumAggregateOutputType | null
    _min: NotificationHistoryMinAggregateOutputType | null
    _max: NotificationHistoryMaxAggregateOutputType | null
  }

  type GetNotificationHistoryGroupByPayload<T extends NotificationHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationHistoryGroupByOutputType[P]>
        }
      >
    >


  export type NotificationHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    type?: boolean
    status?: boolean
    content?: boolean
    metadata?: boolean
    cost?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationHistory$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationHistory"]>

  export type NotificationHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    type?: boolean
    status?: boolean
    content?: boolean
    metadata?: boolean
    cost?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationHistory$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationHistory"]>

  export type NotificationHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    type?: boolean
    status?: boolean
    content?: boolean
    metadata?: boolean
    cost?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationHistory$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationHistory"]>

  export type NotificationHistorySelectScalar = {
    id?: boolean
    customerId?: boolean
    templateId?: boolean
    triggerId?: boolean
    branchId?: boolean
    type?: boolean
    status?: boolean
    content?: boolean
    metadata?: boolean
    cost?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    createdAt?: boolean
  }

  export type NotificationHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "templateId" | "triggerId" | "branchId" | "type" | "status" | "content" | "metadata" | "cost" | "sentAt" | "deliveredAt" | "readAt" | "createdAt", ExtArgs["result"]["notificationHistory"]>
  export type NotificationHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationHistory$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationHistory$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    template?: boolean | NotificationTemplateDefaultArgs<ExtArgs>
    trigger?: boolean | NotificationHistory$triggerArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $NotificationHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationHistory"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      template: Prisma.$NotificationTemplatePayload<ExtArgs>
      trigger: Prisma.$NotificationTriggerPayload<ExtArgs> | null
      branch: Prisma.$BranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      templateId: string
      triggerId: string | null
      branchId: string
      type: $Enums.NotificationType
      status: $Enums.NotificationDeliveryStatus
      content: string
      metadata: Prisma.JsonValue | null
      cost: number | null
      sentAt: Date
      deliveredAt: Date | null
      readAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notificationHistory"]>
    composites: {}
  }

  type NotificationHistoryGetPayload<S extends boolean | null | undefined | NotificationHistoryDefaultArgs> = $Result.GetResult<Prisma.$NotificationHistoryPayload, S>

  type NotificationHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationHistoryCountAggregateInputType | true
    }

  export interface NotificationHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationHistory'], meta: { name: 'NotificationHistory' } }
    /**
     * Find zero or one NotificationHistory that matches the filter.
     * @param {NotificationHistoryFindUniqueArgs} args - Arguments to find a NotificationHistory
     * @example
     * // Get one NotificationHistory
     * const notificationHistory = await prisma.notificationHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationHistoryFindUniqueArgs>(args: SelectSubset<T, NotificationHistoryFindUniqueArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationHistoryFindUniqueOrThrowArgs} args - Arguments to find a NotificationHistory
     * @example
     * // Get one NotificationHistory
     * const notificationHistory = await prisma.notificationHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryFindFirstArgs} args - Arguments to find a NotificationHistory
     * @example
     * // Get one NotificationHistory
     * const notificationHistory = await prisma.notificationHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationHistoryFindFirstArgs>(args?: SelectSubset<T, NotificationHistoryFindFirstArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryFindFirstOrThrowArgs} args - Arguments to find a NotificationHistory
     * @example
     * // Get one NotificationHistory
     * const notificationHistory = await prisma.notificationHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationHistories
     * const notificationHistories = await prisma.notificationHistory.findMany()
     * 
     * // Get first 10 NotificationHistories
     * const notificationHistories = await prisma.notificationHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationHistoryWithIdOnly = await prisma.notificationHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationHistoryFindManyArgs>(args?: SelectSubset<T, NotificationHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationHistory.
     * @param {NotificationHistoryCreateArgs} args - Arguments to create a NotificationHistory.
     * @example
     * // Create one NotificationHistory
     * const NotificationHistory = await prisma.notificationHistory.create({
     *   data: {
     *     // ... data to create a NotificationHistory
     *   }
     * })
     * 
     */
    create<T extends NotificationHistoryCreateArgs>(args: SelectSubset<T, NotificationHistoryCreateArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationHistories.
     * @param {NotificationHistoryCreateManyArgs} args - Arguments to create many NotificationHistories.
     * @example
     * // Create many NotificationHistories
     * const notificationHistory = await prisma.notificationHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationHistoryCreateManyArgs>(args?: SelectSubset<T, NotificationHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationHistories and returns the data saved in the database.
     * @param {NotificationHistoryCreateManyAndReturnArgs} args - Arguments to create many NotificationHistories.
     * @example
     * // Create many NotificationHistories
     * const notificationHistory = await prisma.notificationHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationHistories and only return the `id`
     * const notificationHistoryWithIdOnly = await prisma.notificationHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationHistory.
     * @param {NotificationHistoryDeleteArgs} args - Arguments to delete one NotificationHistory.
     * @example
     * // Delete one NotificationHistory
     * const NotificationHistory = await prisma.notificationHistory.delete({
     *   where: {
     *     // ... filter to delete one NotificationHistory
     *   }
     * })
     * 
     */
    delete<T extends NotificationHistoryDeleteArgs>(args: SelectSubset<T, NotificationHistoryDeleteArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationHistory.
     * @param {NotificationHistoryUpdateArgs} args - Arguments to update one NotificationHistory.
     * @example
     * // Update one NotificationHistory
     * const notificationHistory = await prisma.notificationHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationHistoryUpdateArgs>(args: SelectSubset<T, NotificationHistoryUpdateArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationHistories.
     * @param {NotificationHistoryDeleteManyArgs} args - Arguments to filter NotificationHistories to delete.
     * @example
     * // Delete a few NotificationHistories
     * const { count } = await prisma.notificationHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationHistoryDeleteManyArgs>(args?: SelectSubset<T, NotificationHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationHistories
     * const notificationHistory = await prisma.notificationHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationHistoryUpdateManyArgs>(args: SelectSubset<T, NotificationHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationHistories and returns the data updated in the database.
     * @param {NotificationHistoryUpdateManyAndReturnArgs} args - Arguments to update many NotificationHistories.
     * @example
     * // Update many NotificationHistories
     * const notificationHistory = await prisma.notificationHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationHistories and only return the `id`
     * const notificationHistoryWithIdOnly = await prisma.notificationHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationHistory.
     * @param {NotificationHistoryUpsertArgs} args - Arguments to update or create a NotificationHistory.
     * @example
     * // Update or create a NotificationHistory
     * const notificationHistory = await prisma.notificationHistory.upsert({
     *   create: {
     *     // ... data to create a NotificationHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationHistory we want to update
     *   }
     * })
     */
    upsert<T extends NotificationHistoryUpsertArgs>(args: SelectSubset<T, NotificationHistoryUpsertArgs<ExtArgs>>): Prisma__NotificationHistoryClient<$Result.GetResult<Prisma.$NotificationHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryCountArgs} args - Arguments to filter NotificationHistories to count.
     * @example
     * // Count the number of NotificationHistories
     * const count = await prisma.notificationHistory.count({
     *   where: {
     *     // ... the filter for the NotificationHistories we want to count
     *   }
     * })
    **/
    count<T extends NotificationHistoryCountArgs>(
      args?: Subset<T, NotificationHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationHistoryAggregateArgs>(args: Subset<T, NotificationHistoryAggregateArgs>): Prisma.PrismaPromise<GetNotificationHistoryAggregateType<T>>

    /**
     * Group by NotificationHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationHistoryGroupByArgs['orderBy'] }
        : { orderBy?: NotificationHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationHistory model
   */
  readonly fields: NotificationHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    template<T extends NotificationTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTemplateDefaultArgs<ExtArgs>>): Prisma__NotificationTemplateClient<$Result.GetResult<Prisma.$NotificationTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    trigger<T extends NotificationHistory$triggerArgs<ExtArgs> = {}>(args?: Subset<T, NotificationHistory$triggerArgs<ExtArgs>>): Prisma__NotificationTriggerClient<$Result.GetResult<Prisma.$NotificationTriggerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationHistory model
   */
  interface NotificationHistoryFieldRefs {
    readonly id: FieldRef<"NotificationHistory", 'String'>
    readonly customerId: FieldRef<"NotificationHistory", 'String'>
    readonly templateId: FieldRef<"NotificationHistory", 'String'>
    readonly triggerId: FieldRef<"NotificationHistory", 'String'>
    readonly branchId: FieldRef<"NotificationHistory", 'String'>
    readonly type: FieldRef<"NotificationHistory", 'NotificationType'>
    readonly status: FieldRef<"NotificationHistory", 'NotificationDeliveryStatus'>
    readonly content: FieldRef<"NotificationHistory", 'String'>
    readonly metadata: FieldRef<"NotificationHistory", 'Json'>
    readonly cost: FieldRef<"NotificationHistory", 'Float'>
    readonly sentAt: FieldRef<"NotificationHistory", 'DateTime'>
    readonly deliveredAt: FieldRef<"NotificationHistory", 'DateTime'>
    readonly readAt: FieldRef<"NotificationHistory", 'DateTime'>
    readonly createdAt: FieldRef<"NotificationHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationHistory findUnique
   */
  export type NotificationHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which NotificationHistory to fetch.
     */
    where: NotificationHistoryWhereUniqueInput
  }

  /**
   * NotificationHistory findUniqueOrThrow
   */
  export type NotificationHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which NotificationHistory to fetch.
     */
    where: NotificationHistoryWhereUniqueInput
  }

  /**
   * NotificationHistory findFirst
   */
  export type NotificationHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which NotificationHistory to fetch.
     */
    where?: NotificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationHistories to fetch.
     */
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationHistories.
     */
    cursor?: NotificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationHistories.
     */
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * NotificationHistory findFirstOrThrow
   */
  export type NotificationHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which NotificationHistory to fetch.
     */
    where?: NotificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationHistories to fetch.
     */
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationHistories.
     */
    cursor?: NotificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationHistories.
     */
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * NotificationHistory findMany
   */
  export type NotificationHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * Filter, which NotificationHistories to fetch.
     */
    where?: NotificationHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationHistories to fetch.
     */
    orderBy?: NotificationHistoryOrderByWithRelationInput | NotificationHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationHistories.
     */
    cursor?: NotificationHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationHistories.
     */
    skip?: number
    distinct?: NotificationHistoryScalarFieldEnum | NotificationHistoryScalarFieldEnum[]
  }

  /**
   * NotificationHistory create
   */
  export type NotificationHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationHistory.
     */
    data: XOR<NotificationHistoryCreateInput, NotificationHistoryUncheckedCreateInput>
  }

  /**
   * NotificationHistory createMany
   */
  export type NotificationHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationHistories.
     */
    data: NotificationHistoryCreateManyInput | NotificationHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationHistory createManyAndReturn
   */
  export type NotificationHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationHistories.
     */
    data: NotificationHistoryCreateManyInput | NotificationHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationHistory update
   */
  export type NotificationHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationHistory.
     */
    data: XOR<NotificationHistoryUpdateInput, NotificationHistoryUncheckedUpdateInput>
    /**
     * Choose, which NotificationHistory to update.
     */
    where: NotificationHistoryWhereUniqueInput
  }

  /**
   * NotificationHistory updateMany
   */
  export type NotificationHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationHistories.
     */
    data: XOR<NotificationHistoryUpdateManyMutationInput, NotificationHistoryUncheckedUpdateManyInput>
    /**
     * Filter which NotificationHistories to update
     */
    where?: NotificationHistoryWhereInput
    /**
     * Limit how many NotificationHistories to update.
     */
    limit?: number
  }

  /**
   * NotificationHistory updateManyAndReturn
   */
  export type NotificationHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * The data used to update NotificationHistories.
     */
    data: XOR<NotificationHistoryUpdateManyMutationInput, NotificationHistoryUncheckedUpdateManyInput>
    /**
     * Filter which NotificationHistories to update
     */
    where?: NotificationHistoryWhereInput
    /**
     * Limit how many NotificationHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationHistory upsert
   */
  export type NotificationHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationHistory to update in case it exists.
     */
    where: NotificationHistoryWhereUniqueInput
    /**
     * In case the NotificationHistory found by the `where` argument doesn't exist, create a new NotificationHistory with this data.
     */
    create: XOR<NotificationHistoryCreateInput, NotificationHistoryUncheckedCreateInput>
    /**
     * In case the NotificationHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationHistoryUpdateInput, NotificationHistoryUncheckedUpdateInput>
  }

  /**
   * NotificationHistory delete
   */
  export type NotificationHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
    /**
     * Filter which NotificationHistory to delete.
     */
    where: NotificationHistoryWhereUniqueInput
  }

  /**
   * NotificationHistory deleteMany
   */
  export type NotificationHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationHistories to delete
     */
    where?: NotificationHistoryWhereInput
    /**
     * Limit how many NotificationHistories to delete.
     */
    limit?: number
  }

  /**
   * NotificationHistory.trigger
   */
  export type NotificationHistory$triggerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTrigger
     */
    select?: NotificationTriggerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationTrigger
     */
    omit?: NotificationTriggerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTriggerInclude<ExtArgs> | null
    where?: NotificationTriggerWhereInput
  }

  /**
   * NotificationHistory without action
   */
  export type NotificationHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationHistory
     */
    select?: NotificationHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationHistory
     */
    omit?: NotificationHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationHistoryInclude<ExtArgs> | null
  }


  /**
   * Model NotificationSettings
   */

  export type AggregateNotificationSettings = {
    _count: NotificationSettingsCountAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  export type NotificationSettingsMinAggregateOutputType = {
    id: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSettingsMaxAggregateOutputType = {
    id: string | null
    branchId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSettingsCountAggregateOutputType = {
    id: number
    branchId: number
    smsConfig: number
    whatsappConfig: number
    emailConfig: number
    generalSettings: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationSettingsMinAggregateInputType = {
    id?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSettingsMaxAggregateInputType = {
    id?: true
    branchId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSettingsCountAggregateInputType = {
    id?: true
    branchId?: true
    smsConfig?: true
    whatsappConfig?: true
    emailConfig?: true
    generalSettings?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to aggregate.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationSettings
    **/
    _count?: true | NotificationSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type GetNotificationSettingsAggregateType<T extends NotificationSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationSettings[P]>
      : GetScalarType<T[P], AggregateNotificationSettings[P]>
  }




  export type NotificationSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSettingsWhereInput
    orderBy?: NotificationSettingsOrderByWithAggregationInput | NotificationSettingsOrderByWithAggregationInput[]
    by: NotificationSettingsScalarFieldEnum[] | NotificationSettingsScalarFieldEnum
    having?: NotificationSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationSettingsCountAggregateInputType | true
    _min?: NotificationSettingsMinAggregateInputType
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type NotificationSettingsGroupByOutputType = {
    id: string
    branchId: string
    smsConfig: JsonValue | null
    whatsappConfig: JsonValue | null
    emailConfig: JsonValue | null
    generalSettings: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationSettingsCountAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  type GetNotificationSettingsGroupByPayload<T extends NotificationSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    smsConfig?: boolean
    whatsappConfig?: boolean
    emailConfig?: boolean
    generalSettings?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    smsConfig?: boolean
    whatsappConfig?: boolean
    emailConfig?: boolean
    generalSettings?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    smsConfig?: boolean
    whatsappConfig?: boolean
    emailConfig?: boolean
    generalSettings?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectScalar = {
    id?: boolean
    branchId?: boolean
    smsConfig?: boolean
    whatsappConfig?: boolean
    emailConfig?: boolean
    generalSettings?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "branchId" | "smsConfig" | "whatsappConfig" | "emailConfig" | "generalSettings" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationSettings"]>
  export type NotificationSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }
  export type NotificationSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $NotificationSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationSettings"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      branchId: string
      smsConfig: Prisma.JsonValue | null
      whatsappConfig: Prisma.JsonValue | null
      emailConfig: Prisma.JsonValue | null
      generalSettings: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationSettings"]>
    composites: {}
  }

  type NotificationSettingsGetPayload<S extends boolean | null | undefined | NotificationSettingsDefaultArgs> = $Result.GetResult<Prisma.$NotificationSettingsPayload, S>

  type NotificationSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationSettingsCountAggregateInputType | true
    }

  export interface NotificationSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationSettings'], meta: { name: 'NotificationSettings' } }
    /**
     * Find zero or one NotificationSettings that matches the filter.
     * @param {NotificationSettingsFindUniqueArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationSettingsFindUniqueArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationSettingsFindUniqueOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationSettingsFindFirstArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany()
     * 
     * // Get first 10 NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationSettingsFindManyArgs>(args?: SelectSubset<T, NotificationSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationSettings.
     * @param {NotificationSettingsCreateArgs} args - Arguments to create a NotificationSettings.
     * @example
     * // Create one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.create({
     *   data: {
     *     // ... data to create a NotificationSettings
     *   }
     * })
     * 
     */
    create<T extends NotificationSettingsCreateArgs>(args: SelectSubset<T, NotificationSettingsCreateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationSettings.
     * @param {NotificationSettingsCreateManyArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationSettingsCreateManyArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationSettings and returns the data saved in the database.
     * @param {NotificationSettingsCreateManyAndReturnArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationSettings and only return the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationSettings.
     * @param {NotificationSettingsDeleteArgs} args - Arguments to delete one NotificationSettings.
     * @example
     * // Delete one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.delete({
     *   where: {
     *     // ... filter to delete one NotificationSettings
     *   }
     * })
     * 
     */
    delete<T extends NotificationSettingsDeleteArgs>(args: SelectSubset<T, NotificationSettingsDeleteArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationSettings.
     * @param {NotificationSettingsUpdateArgs} args - Arguments to update one NotificationSettings.
     * @example
     * // Update one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationSettingsUpdateArgs>(args: SelectSubset<T, NotificationSettingsUpdateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationSettings.
     * @param {NotificationSettingsDeleteManyArgs} args - Arguments to filter NotificationSettings to delete.
     * @example
     * // Delete a few NotificationSettings
     * const { count } = await prisma.notificationSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationSettingsDeleteManyArgs>(args?: SelectSubset<T, NotificationSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationSettingsUpdateManyArgs>(args: SelectSubset<T, NotificationSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings and returns the data updated in the database.
     * @param {NotificationSettingsUpdateManyAndReturnArgs} args - Arguments to update many NotificationSettings.
     * @example
     * // Update many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationSettings and only return the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationSettings.
     * @param {NotificationSettingsUpsertArgs} args - Arguments to update or create a NotificationSettings.
     * @example
     * // Update or create a NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.upsert({
     *   create: {
     *     // ... data to create a NotificationSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationSettings we want to update
     *   }
     * })
     */
    upsert<T extends NotificationSettingsUpsertArgs>(args: SelectSubset<T, NotificationSettingsUpsertArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsCountArgs} args - Arguments to filter NotificationSettings to count.
     * @example
     * // Count the number of NotificationSettings
     * const count = await prisma.notificationSettings.count({
     *   where: {
     *     // ... the filter for the NotificationSettings we want to count
     *   }
     * })
    **/
    count<T extends NotificationSettingsCountArgs>(
      args?: Subset<T, NotificationSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationSettingsAggregateArgs>(args: Subset<T, NotificationSettingsAggregateArgs>): Prisma.PrismaPromise<GetNotificationSettingsAggregateType<T>>

    /**
     * Group by NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationSettingsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationSettings model
   */
  readonly fields: NotificationSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationSettings model
   */
  interface NotificationSettingsFieldRefs {
    readonly id: FieldRef<"NotificationSettings", 'String'>
    readonly branchId: FieldRef<"NotificationSettings", 'String'>
    readonly smsConfig: FieldRef<"NotificationSettings", 'Json'>
    readonly whatsappConfig: FieldRef<"NotificationSettings", 'Json'>
    readonly emailConfig: FieldRef<"NotificationSettings", 'Json'>
    readonly generalSettings: FieldRef<"NotificationSettings", 'Json'>
    readonly isActive: FieldRef<"NotificationSettings", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationSettings findUnique
   */
  export type NotificationSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findUniqueOrThrow
   */
  export type NotificationSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findFirst
   */
  export type NotificationSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findFirstOrThrow
   */
  export type NotificationSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findMany
   */
  export type NotificationSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings create
   */
  export type NotificationSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationSettings.
     */
    data: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
  }

  /**
   * NotificationSettings createMany
   */
  export type NotificationSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationSettings createManyAndReturn
   */
  export type NotificationSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationSettings update
   */
  export type NotificationSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
    /**
     * Choose, which NotificationSettings to update.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings updateMany
   */
  export type NotificationSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateManyMutationInput, NotificationSettingsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to update.
     */
    limit?: number
  }

  /**
   * NotificationSettings updateManyAndReturn
   */
  export type NotificationSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateManyMutationInput, NotificationSettingsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationSettings upsert
   */
  export type NotificationSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationSettings to update in case it exists.
     */
    where: NotificationSettingsWhereUniqueInput
    /**
     * In case the NotificationSettings found by the `where` argument doesn't exist, create a new NotificationSettings with this data.
     */
    create: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
    /**
     * In case the NotificationSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
  }

  /**
   * NotificationSettings delete
   */
  export type NotificationSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter which NotificationSettings to delete.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings deleteMany
   */
  export type NotificationSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to delete
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to delete.
     */
    limit?: number
  }

  /**
   * NotificationSettings without action
   */
  export type NotificationSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    branchId: 'branchId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkHourScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    branchId: 'branchId',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime',
    isOff: 'isOff',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkHourScalarFieldEnum = (typeof WorkHourScalarFieldEnum)[keyof typeof WorkHourScalarFieldEnum]


  export const BranchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    phone: 'phone',
    description: 'description',
    parentBranchId: 'parentBranchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    notes: 'notes',
    branchId: 'branchId',
    discountRate: 'discountRate',
    creditBalance: 'creditBalance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const CustomerTagScalarFieldEnum: {
    customerId: 'customerId',
    tagId: 'tagId'
  };

  export type CustomerTagScalarFieldEnum = (typeof CustomerTagScalarFieldEnum)[keyof typeof CustomerTagScalarFieldEnum]


  export const ServiceCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    branchId: 'branchId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceCategoryScalarFieldEnum = (typeof ServiceCategoryScalarFieldEnum)[keyof typeof ServiceCategoryScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    duration: 'duration',
    description: 'description',
    categoryId: 'categoryId',
    branchId: 'branchId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const StaffServiceScalarFieldEnum: {
    userId: 'userId',
    serviceId: 'serviceId'
  };

  export type StaffServiceScalarFieldEnum = (typeof StaffServiceScalarFieldEnum)[keyof typeof StaffServiceScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    notes: 'notes',
    customerId: 'customerId',
    serviceId: 'serviceId',
    staffId: 'staffId',
    branchId: 'branchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    type: 'type',
    totalSessions: 'totalSessions',
    totalMinutes: 'totalMinutes',
    validityDays: 'validityDays',
    description: 'description',
    branchId: 'branchId',
    commissionRate: 'commissionRate',
    commissionFixed: 'commissionFixed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const PackageServiceScalarFieldEnum: {
    packageId: 'packageId',
    serviceId: 'serviceId',
    quantity: 'quantity'
  };

  export type PackageServiceScalarFieldEnum = (typeof PackageServiceScalarFieldEnum)[keyof typeof PackageServiceScalarFieldEnum]


  export const CustomerPackageScalarFieldEnum: {
    id: 'id',
    purchaseDate: 'purchaseDate',
    expiryDate: 'expiryDate',
    remainingSessions: 'remainingSessions',
    notes: 'notes',
    salesCode: 'salesCode',
    customerId: 'customerId',
    packageId: 'packageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerPackageScalarFieldEnum = (typeof CustomerPackageScalarFieldEnum)[keyof typeof CustomerPackageScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    totalAmount: 'totalAmount',
    amountPaid: 'amountPaid',
    debt: 'debt',
    status: 'status',
    customerId: 'customerId',
    branchId: 'branchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    appointmentId: 'appointmentId',
    customerPackageId: 'customerPackageId'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    method: 'method',
    paymentDate: 'paymentDate',
    invoiceId: 'invoiceId',
    cashRegisterLogId: 'cashRegisterLogId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const CommissionRuleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    ruleType: 'ruleType',
    type: 'type',
    rate: 'rate',
    fixedAmount: 'fixedAmount',
    startDate: 'startDate',
    endDate: 'endDate',
    branchId: 'branchId',
    serviceId: 'serviceId',
    staffId: 'staffId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommissionRuleScalarFieldEnum = (typeof CommissionRuleScalarFieldEnum)[keyof typeof CommissionRuleScalarFieldEnum]


  export const CommissionItemScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    serviceId: 'serviceId',
    amount: 'amount',
    status: 'status',
    appliedRuleId: 'appliedRuleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommissionItemScalarFieldEnum = (typeof CommissionItemScalarFieldEnum)[keyof typeof CommissionItemScalarFieldEnum]


  export const StaffCommissionScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    commissionItemId: 'commissionItemId',
    amount: 'amount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    appliedRuleId: 'appliedRuleId',
    invoiceId: 'invoiceId',
    serviceId: 'serviceId'
  };

  export type StaffCommissionScalarFieldEnum = (typeof StaffCommissionScalarFieldEnum)[keyof typeof StaffCommissionScalarFieldEnum]


  export const CashRegisterLogScalarFieldEnum: {
    id: 'id',
    type: 'type',
    amount: 'amount',
    description: 'description',
    branchId: 'branchId',
    userId: 'userId',
    createdAt: 'createdAt',
    category: 'category'
  };

  export type CashRegisterLogScalarFieldEnum = (typeof CashRegisterLogScalarFieldEnum)[keyof typeof CashRegisterLogScalarFieldEnum]


  export const NotificationProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    config: 'config',
    branchId: 'branchId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationProviderScalarFieldEnum = (typeof NotificationProviderScalarFieldEnum)[keyof typeof NotificationProviderScalarFieldEnum]


  export const NotificationTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    subject: 'subject',
    content: 'content',
    variables: 'variables',
    language: 'language',
    branchId: 'branchId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationTemplateScalarFieldEnum = (typeof NotificationTemplateScalarFieldEnum)[keyof typeof NotificationTemplateScalarFieldEnum]


  export const NotificationTriggerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    eventType: 'eventType',
    conditions: 'conditions',
    templateId: 'templateId',
    branchId: 'branchId',
    isActive: 'isActive',
    priority: 'priority',
    schedule: 'schedule',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationTriggerScalarFieldEnum = (typeof NotificationTriggerScalarFieldEnum)[keyof typeof NotificationTriggerScalarFieldEnum]


  export const NotificationQueueScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    templateId: 'templateId',
    triggerId: 'triggerId',
    branchId: 'branchId',
    status: 'status',
    data: 'data',
    scheduledAt: 'scheduledAt',
    sentAt: 'sentAt',
    errorMessage: 'errorMessage',
    retryCount: 'retryCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationQueueScalarFieldEnum = (typeof NotificationQueueScalarFieldEnum)[keyof typeof NotificationQueueScalarFieldEnum]


  export const NotificationHistoryScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    templateId: 'templateId',
    triggerId: 'triggerId',
    branchId: 'branchId',
    type: 'type',
    status: 'status',
    content: 'content',
    metadata: 'metadata',
    cost: 'cost',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    readAt: 'readAt',
    createdAt: 'createdAt'
  };

  export type NotificationHistoryScalarFieldEnum = (typeof NotificationHistoryScalarFieldEnum)[keyof typeof NotificationHistoryScalarFieldEnum]


  export const NotificationSettingsScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    smsConfig: 'smsConfig',
    whatsappConfig: 'whatsappConfig',
    emailConfig: 'emailConfig',
    generalSettings: 'generalSettings',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationSettingsScalarFieldEnum = (typeof NotificationSettingsScalarFieldEnum)[keyof typeof NotificationSettingsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'PackageType'
   */
  export type EnumPackageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackageType'>
    


  /**
   * Reference to a field of type 'PackageType[]'
   */
  export type ListEnumPackageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackageType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'CommissionRuleType'
   */
  export type EnumCommissionRuleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionRuleType'>
    


  /**
   * Reference to a field of type 'CommissionRuleType[]'
   */
  export type ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionRuleType[]'>
    


  /**
   * Reference to a field of type 'CommissionType'
   */
  export type EnumCommissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionType'>
    


  /**
   * Reference to a field of type 'CommissionType[]'
   */
  export type ListEnumCommissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionType[]'>
    


  /**
   * Reference to a field of type 'CommissionStatus'
   */
  export type EnumCommissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionStatus'>
    


  /**
   * Reference to a field of type 'CommissionStatus[]'
   */
  export type ListEnumCommissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionStatus[]'>
    


  /**
   * Reference to a field of type 'CashLogType'
   */
  export type EnumCashLogTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CashLogType'>
    


  /**
   * Reference to a field of type 'CashLogType[]'
   */
  export type ListEnumCashLogTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CashLogType[]'>
    


  /**
   * Reference to a field of type 'CashMovementCategory'
   */
  export type EnumCashMovementCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CashMovementCategory'>
    


  /**
   * Reference to a field of type 'CashMovementCategory[]'
   */
  export type ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CashMovementCategory[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationEventType'
   */
  export type EnumNotificationEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationEventType'>
    


  /**
   * Reference to a field of type 'NotificationEventType[]'
   */
  export type ListEnumNotificationEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationEventType[]'>
    


  /**
   * Reference to a field of type 'NotificationStatus'
   */
  export type EnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus'>
    


  /**
   * Reference to a field of type 'NotificationStatus[]'
   */
  export type ListEnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationDeliveryStatus'
   */
  export type EnumNotificationDeliveryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationDeliveryStatus'>
    


  /**
   * Reference to a field of type 'NotificationDeliveryStatus[]'
   */
  export type ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationDeliveryStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    branchId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    appointments?: AppointmentListRelationFilter
    CashRegisterLog?: CashRegisterLogListRelationFilter
    staffCommissionRules?: CommissionRuleListRelationFilter
    commissions?: StaffCommissionListRelationFilter
    services?: StaffServiceListRelationFilter
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    workHours?: WorkHourListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    branchId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    CashRegisterLog?: CashRegisterLogOrderByRelationAggregateInput
    staffCommissionRules?: CommissionRuleOrderByRelationAggregateInput
    commissions?: StaffCommissionOrderByRelationAggregateInput
    services?: StaffServiceOrderByRelationAggregateInput
    branch?: BranchOrderByWithRelationInput
    workHours?: WorkHourOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    branchId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    appointments?: AppointmentListRelationFilter
    CashRegisterLog?: CashRegisterLogListRelationFilter
    staffCommissionRules?: CommissionRuleListRelationFilter
    commissions?: StaffCommissionListRelationFilter
    services?: StaffServiceListRelationFilter
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    workHours?: WorkHourListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    branchId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    branchId?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WorkHourWhereInput = {
    AND?: WorkHourWhereInput | WorkHourWhereInput[]
    OR?: WorkHourWhereInput[]
    NOT?: WorkHourWhereInput | WorkHourWhereInput[]
    id?: StringFilter<"WorkHour"> | string
    staffId?: StringFilter<"WorkHour"> | string
    branchId?: StringFilter<"WorkHour"> | string
    dayOfWeek?: IntFilter<"WorkHour"> | number
    startTime?: StringFilter<"WorkHour"> | string
    endTime?: StringFilter<"WorkHour"> | string
    isOff?: BoolFilter<"WorkHour"> | boolean
    createdAt?: DateTimeFilter<"WorkHour"> | Date | string
    updatedAt?: DateTimeFilter<"WorkHour"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WorkHourOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isOff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
    staff?: UserOrderByWithRelationInput
  }

  export type WorkHourWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    staffId_branchId_dayOfWeek?: WorkHourStaffIdBranchIdDayOfWeekCompoundUniqueInput
    AND?: WorkHourWhereInput | WorkHourWhereInput[]
    OR?: WorkHourWhereInput[]
    NOT?: WorkHourWhereInput | WorkHourWhereInput[]
    staffId?: StringFilter<"WorkHour"> | string
    branchId?: StringFilter<"WorkHour"> | string
    dayOfWeek?: IntFilter<"WorkHour"> | number
    startTime?: StringFilter<"WorkHour"> | string
    endTime?: StringFilter<"WorkHour"> | string
    isOff?: BoolFilter<"WorkHour"> | boolean
    createdAt?: DateTimeFilter<"WorkHour"> | Date | string
    updatedAt?: DateTimeFilter<"WorkHour"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "staffId_branchId_dayOfWeek">

  export type WorkHourOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isOff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkHourCountOrderByAggregateInput
    _avg?: WorkHourAvgOrderByAggregateInput
    _max?: WorkHourMaxOrderByAggregateInput
    _min?: WorkHourMinOrderByAggregateInput
    _sum?: WorkHourSumOrderByAggregateInput
  }

  export type WorkHourScalarWhereWithAggregatesInput = {
    AND?: WorkHourScalarWhereWithAggregatesInput | WorkHourScalarWhereWithAggregatesInput[]
    OR?: WorkHourScalarWhereWithAggregatesInput[]
    NOT?: WorkHourScalarWhereWithAggregatesInput | WorkHourScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkHour"> | string
    staffId?: StringWithAggregatesFilter<"WorkHour"> | string
    branchId?: StringWithAggregatesFilter<"WorkHour"> | string
    dayOfWeek?: IntWithAggregatesFilter<"WorkHour"> | number
    startTime?: StringWithAggregatesFilter<"WorkHour"> | string
    endTime?: StringWithAggregatesFilter<"WorkHour"> | string
    isOff?: BoolWithAggregatesFilter<"WorkHour"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WorkHour"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkHour"> | Date | string
  }

  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    address?: StringNullableFilter<"Branch"> | string | null
    phone?: StringNullableFilter<"Branch"> | string | null
    description?: StringNullableFilter<"Branch"> | string | null
    parentBranchId?: StringNullableFilter<"Branch"> | string | null
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    appointments?: AppointmentListRelationFilter
    parentBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    subBranches?: BranchListRelationFilter
    users?: UserListRelationFilter
    services?: ServiceListRelationFilter
    packages?: PackageListRelationFilter
    invoices?: InvoiceListRelationFilter
    customers?: CustomerListRelationFilter
    workHours?: WorkHourListRelationFilter
    CashRegisterLog?: CashRegisterLogListRelationFilter
    commissionRules?: CommissionRuleListRelationFilter
    serviceCategories?: ServiceCategoryListRelationFilter
    notificationProviders?: NotificationProviderListRelationFilter
    notificationTemplates?: NotificationTemplateListRelationFilter
    notificationTriggers?: NotificationTriggerListRelationFilter
    notificationQueue?: NotificationQueueListRelationFilter
    notificationHistory?: NotificationHistoryListRelationFilter
    notificationSettings?: XOR<NotificationSettingsNullableScalarRelationFilter, NotificationSettingsWhereInput> | null
  }

  export type BranchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    parentBranchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    parentBranch?: BranchOrderByWithRelationInput
    subBranches?: BranchOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    services?: ServiceOrderByRelationAggregateInput
    packages?: PackageOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    workHours?: WorkHourOrderByRelationAggregateInput
    CashRegisterLog?: CashRegisterLogOrderByRelationAggregateInput
    commissionRules?: CommissionRuleOrderByRelationAggregateInput
    serviceCategories?: ServiceCategoryOrderByRelationAggregateInput
    notificationProviders?: NotificationProviderOrderByRelationAggregateInput
    notificationTemplates?: NotificationTemplateOrderByRelationAggregateInput
    notificationTriggers?: NotificationTriggerOrderByRelationAggregateInput
    notificationQueue?: NotificationQueueOrderByRelationAggregateInput
    notificationHistory?: NotificationHistoryOrderByRelationAggregateInput
    notificationSettings?: NotificationSettingsOrderByWithRelationInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    name?: StringFilter<"Branch"> | string
    address?: StringNullableFilter<"Branch"> | string | null
    phone?: StringNullableFilter<"Branch"> | string | null
    description?: StringNullableFilter<"Branch"> | string | null
    parentBranchId?: StringNullableFilter<"Branch"> | string | null
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    appointments?: AppointmentListRelationFilter
    parentBranch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    subBranches?: BranchListRelationFilter
    users?: UserListRelationFilter
    services?: ServiceListRelationFilter
    packages?: PackageListRelationFilter
    invoices?: InvoiceListRelationFilter
    customers?: CustomerListRelationFilter
    workHours?: WorkHourListRelationFilter
    CashRegisterLog?: CashRegisterLogListRelationFilter
    commissionRules?: CommissionRuleListRelationFilter
    serviceCategories?: ServiceCategoryListRelationFilter
    notificationProviders?: NotificationProviderListRelationFilter
    notificationTemplates?: NotificationTemplateListRelationFilter
    notificationTriggers?: NotificationTriggerListRelationFilter
    notificationQueue?: NotificationQueueListRelationFilter
    notificationHistory?: NotificationHistoryListRelationFilter
    notificationSettings?: XOR<NotificationSettingsNullableScalarRelationFilter, NotificationSettingsWhereInput> | null
  }, "id">

  export type BranchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    parentBranchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BranchCountOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Branch"> | string
    name?: StringWithAggregatesFilter<"Branch"> | string
    address?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    description?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    parentBranchId?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    notes?: StringNullableFilter<"Customer"> | string | null
    branchId?: StringFilter<"Customer"> | string
    discountRate?: FloatFilter<"Customer"> | number
    creditBalance?: FloatFilter<"Customer"> | number
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    appointments?: AppointmentListRelationFilter
    packages?: CustomerPackageListRelationFilter
    invoices?: InvoiceListRelationFilter
    tags?: CustomerTagListRelationFilter
    notificationQueue?: NotificationQueueListRelationFilter
    notificationHistory?: NotificationHistoryListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    branchId?: SortOrder
    discountRate?: SortOrder
    creditBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
    appointments?: AppointmentOrderByRelationAggregateInput
    packages?: CustomerPackageOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    tags?: CustomerTagOrderByRelationAggregateInput
    notificationQueue?: NotificationQueueOrderByRelationAggregateInput
    notificationHistory?: NotificationHistoryOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phone?: string
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    notes?: StringNullableFilter<"Customer"> | string | null
    branchId?: StringFilter<"Customer"> | string
    discountRate?: FloatFilter<"Customer"> | number
    creditBalance?: FloatFilter<"Customer"> | number
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    appointments?: AppointmentListRelationFilter
    packages?: CustomerPackageListRelationFilter
    invoices?: InvoiceListRelationFilter
    tags?: CustomerTagListRelationFilter
    notificationQueue?: NotificationQueueListRelationFilter
    notificationHistory?: NotificationHistoryListRelationFilter
  }, "id" | "phone" | "email">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    branchId?: SortOrder
    discountRate?: SortOrder
    creditBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    name?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    branchId?: StringWithAggregatesFilter<"Customer"> | string
    discountRate?: FloatWithAggregatesFilter<"Customer"> | number
    creditBalance?: FloatWithAggregatesFilter<"Customer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    color?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    customers?: CustomerTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customers?: CustomerTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    name?: StringFilter<"Tag"> | string
    color?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    customers?: CustomerTagListRelationFilter
  }, "id">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    color?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type CustomerTagWhereInput = {
    AND?: CustomerTagWhereInput | CustomerTagWhereInput[]
    OR?: CustomerTagWhereInput[]
    NOT?: CustomerTagWhereInput | CustomerTagWhereInput[]
    customerId?: StringFilter<"CustomerTag"> | string
    tagId?: StringFilter<"CustomerTag"> | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type CustomerTagOrderByWithRelationInput = {
    customerId?: SortOrder
    tagId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type CustomerTagWhereUniqueInput = Prisma.AtLeast<{
    customerId_tagId?: CustomerTagCustomerIdTagIdCompoundUniqueInput
    AND?: CustomerTagWhereInput | CustomerTagWhereInput[]
    OR?: CustomerTagWhereInput[]
    NOT?: CustomerTagWhereInput | CustomerTagWhereInput[]
    customerId?: StringFilter<"CustomerTag"> | string
    tagId?: StringFilter<"CustomerTag"> | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "customerId_tagId">

  export type CustomerTagOrderByWithAggregationInput = {
    customerId?: SortOrder
    tagId?: SortOrder
    _count?: CustomerTagCountOrderByAggregateInput
    _max?: CustomerTagMaxOrderByAggregateInput
    _min?: CustomerTagMinOrderByAggregateInput
  }

  export type CustomerTagScalarWhereWithAggregatesInput = {
    AND?: CustomerTagScalarWhereWithAggregatesInput | CustomerTagScalarWhereWithAggregatesInput[]
    OR?: CustomerTagScalarWhereWithAggregatesInput[]
    NOT?: CustomerTagScalarWhereWithAggregatesInput | CustomerTagScalarWhereWithAggregatesInput[]
    customerId?: StringWithAggregatesFilter<"CustomerTag"> | string
    tagId?: StringWithAggregatesFilter<"CustomerTag"> | string
  }

  export type ServiceCategoryWhereInput = {
    AND?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    OR?: ServiceCategoryWhereInput[]
    NOT?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    id?: StringFilter<"ServiceCategory"> | string
    name?: StringFilter<"ServiceCategory"> | string
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    branchId?: StringNullableFilter<"ServiceCategory"> | string | null
    isActive?: BoolFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    services?: ServiceListRelationFilter
  }

  export type ServiceCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    branchId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
    services?: ServiceOrderByRelationAggregateInput
  }

  export type ServiceCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    OR?: ServiceCategoryWhereInput[]
    NOT?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    name?: StringFilter<"ServiceCategory"> | string
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    branchId?: StringNullableFilter<"ServiceCategory"> | string | null
    isActive?: BoolFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    services?: ServiceListRelationFilter
  }, "id">

  export type ServiceCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    branchId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCategoryCountOrderByAggregateInput
    _max?: ServiceCategoryMaxOrderByAggregateInput
    _min?: ServiceCategoryMinOrderByAggregateInput
  }

  export type ServiceCategoryScalarWhereWithAggregatesInput = {
    AND?: ServiceCategoryScalarWhereWithAggregatesInput | ServiceCategoryScalarWhereWithAggregatesInput[]
    OR?: ServiceCategoryScalarWhereWithAggregatesInput[]
    NOT?: ServiceCategoryScalarWhereWithAggregatesInput | ServiceCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceCategory"> | string
    name?: StringWithAggregatesFilter<"ServiceCategory"> | string
    description?: StringNullableWithAggregatesFilter<"ServiceCategory"> | string | null
    branchId?: StringNullableWithAggregatesFilter<"ServiceCategory"> | string | null
    isActive?: BoolWithAggregatesFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceCategory"> | Date | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    price?: FloatFilter<"Service"> | number
    duration?: IntFilter<"Service"> | number
    description?: StringNullableFilter<"Service"> | string | null
    categoryId?: StringFilter<"Service"> | string
    branchId?: StringFilter<"Service"> | string
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    category?: XOR<ServiceCategoryScalarRelationFilter, ServiceCategoryWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    appointments?: AppointmentListRelationFilter
    staff?: StaffServiceListRelationFilter
    packages?: PackageServiceListRelationFilter
    commissionItems?: CommissionItemListRelationFilter
    StaffCommission?: StaffCommissionListRelationFilter
    commissionRules?: CommissionRuleListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: ServiceCategoryOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    appointments?: AppointmentOrderByRelationAggregateInput
    staff?: StaffServiceOrderByRelationAggregateInput
    packages?: PackageServiceOrderByRelationAggregateInput
    commissionItems?: CommissionItemOrderByRelationAggregateInput
    StaffCommission?: StaffCommissionOrderByRelationAggregateInput
    commissionRules?: CommissionRuleOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    name?: StringFilter<"Service"> | string
    price?: FloatFilter<"Service"> | number
    duration?: IntFilter<"Service"> | number
    description?: StringNullableFilter<"Service"> | string | null
    categoryId?: StringFilter<"Service"> | string
    branchId?: StringFilter<"Service"> | string
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    category?: XOR<ServiceCategoryScalarRelationFilter, ServiceCategoryWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    appointments?: AppointmentListRelationFilter
    staff?: StaffServiceListRelationFilter
    packages?: PackageServiceListRelationFilter
    commissionItems?: CommissionItemListRelationFilter
    StaffCommission?: StaffCommissionListRelationFilter
    commissionRules?: CommissionRuleListRelationFilter
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Service"> | string
    name?: StringWithAggregatesFilter<"Service"> | string
    price?: FloatWithAggregatesFilter<"Service"> | number
    duration?: IntWithAggregatesFilter<"Service"> | number
    description?: StringNullableWithAggregatesFilter<"Service"> | string | null
    categoryId?: StringWithAggregatesFilter<"Service"> | string
    branchId?: StringWithAggregatesFilter<"Service"> | string
    isActive?: BoolWithAggregatesFilter<"Service"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
  }

  export type StaffServiceWhereInput = {
    AND?: StaffServiceWhereInput | StaffServiceWhereInput[]
    OR?: StaffServiceWhereInput[]
    NOT?: StaffServiceWhereInput | StaffServiceWhereInput[]
    userId?: StringFilter<"StaffService"> | string
    serviceId?: StringFilter<"StaffService"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }

  export type StaffServiceOrderByWithRelationInput = {
    userId?: SortOrder
    serviceId?: SortOrder
    user?: UserOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type StaffServiceWhereUniqueInput = Prisma.AtLeast<{
    userId_serviceId?: StaffServiceUserIdServiceIdCompoundUniqueInput
    AND?: StaffServiceWhereInput | StaffServiceWhereInput[]
    OR?: StaffServiceWhereInput[]
    NOT?: StaffServiceWhereInput | StaffServiceWhereInput[]
    userId?: StringFilter<"StaffService"> | string
    serviceId?: StringFilter<"StaffService"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }, "userId_serviceId">

  export type StaffServiceOrderByWithAggregationInput = {
    userId?: SortOrder
    serviceId?: SortOrder
    _count?: StaffServiceCountOrderByAggregateInput
    _max?: StaffServiceMaxOrderByAggregateInput
    _min?: StaffServiceMinOrderByAggregateInput
  }

  export type StaffServiceScalarWhereWithAggregatesInput = {
    AND?: StaffServiceScalarWhereWithAggregatesInput | StaffServiceScalarWhereWithAggregatesInput[]
    OR?: StaffServiceScalarWhereWithAggregatesInput[]
    NOT?: StaffServiceScalarWhereWithAggregatesInput | StaffServiceScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"StaffService"> | string
    serviceId?: StringWithAggregatesFilter<"StaffService"> | string
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    startTime?: DateTimeFilter<"Appointment"> | Date | string
    endTime?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    customerId?: StringFilter<"Appointment"> | string
    serviceId?: StringFilter<"Appointment"> | string
    staffId?: StringFilter<"Appointment"> | string
    branchId?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    invoice?: XOR<InvoiceNullableScalarRelationFilter, InvoiceWhereInput> | null
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    customerId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    staff?: UserOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    startTime?: DateTimeFilter<"Appointment"> | Date | string
    endTime?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    customerId?: StringFilter<"Appointment"> | string
    serviceId?: StringFilter<"Appointment"> | string
    staffId?: StringFilter<"Appointment"> | string
    branchId?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    invoice?: XOR<InvoiceNullableScalarRelationFilter, InvoiceWhereInput> | null
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    customerId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    startTime?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    customerId?: StringWithAggregatesFilter<"Appointment"> | string
    serviceId?: StringWithAggregatesFilter<"Appointment"> | string
    staffId?: StringWithAggregatesFilter<"Appointment"> | string
    branchId?: StringWithAggregatesFilter<"Appointment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    price?: FloatFilter<"Package"> | number
    type?: EnumPackageTypeFilter<"Package"> | $Enums.PackageType
    totalSessions?: IntNullableFilter<"Package"> | number | null
    totalMinutes?: IntNullableFilter<"Package"> | number | null
    validityDays?: IntNullableFilter<"Package"> | number | null
    description?: StringNullableFilter<"Package"> | string | null
    branchId?: StringFilter<"Package"> | string
    commissionRate?: FloatNullableFilter<"Package"> | number | null
    commissionFixed?: FloatNullableFilter<"Package"> | number | null
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    services?: PackageServiceListRelationFilter
    customerPackages?: CustomerPackageListRelationFilter
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    totalSessions?: SortOrderInput | SortOrder
    totalMinutes?: SortOrderInput | SortOrder
    validityDays?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    branchId?: SortOrder
    commissionRate?: SortOrderInput | SortOrder
    commissionFixed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
    services?: PackageServiceOrderByRelationAggregateInput
    customerPackages?: CustomerPackageOrderByRelationAggregateInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    name?: StringFilter<"Package"> | string
    price?: FloatFilter<"Package"> | number
    type?: EnumPackageTypeFilter<"Package"> | $Enums.PackageType
    totalSessions?: IntNullableFilter<"Package"> | number | null
    totalMinutes?: IntNullableFilter<"Package"> | number | null
    validityDays?: IntNullableFilter<"Package"> | number | null
    description?: StringNullableFilter<"Package"> | string | null
    branchId?: StringFilter<"Package"> | string
    commissionRate?: FloatNullableFilter<"Package"> | number | null
    commissionFixed?: FloatNullableFilter<"Package"> | number | null
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    services?: PackageServiceListRelationFilter
    customerPackages?: CustomerPackageListRelationFilter
  }, "id">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    totalSessions?: SortOrderInput | SortOrder
    totalMinutes?: SortOrderInput | SortOrder
    validityDays?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    branchId?: SortOrder
    commissionRate?: SortOrderInput | SortOrder
    commissionFixed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Package"> | string
    name?: StringWithAggregatesFilter<"Package"> | string
    price?: FloatWithAggregatesFilter<"Package"> | number
    type?: EnumPackageTypeWithAggregatesFilter<"Package"> | $Enums.PackageType
    totalSessions?: IntNullableWithAggregatesFilter<"Package"> | number | null
    totalMinutes?: IntNullableWithAggregatesFilter<"Package"> | number | null
    validityDays?: IntNullableWithAggregatesFilter<"Package"> | number | null
    description?: StringNullableWithAggregatesFilter<"Package"> | string | null
    branchId?: StringWithAggregatesFilter<"Package"> | string
    commissionRate?: FloatNullableWithAggregatesFilter<"Package"> | number | null
    commissionFixed?: FloatNullableWithAggregatesFilter<"Package"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
  }

  export type PackageServiceWhereInput = {
    AND?: PackageServiceWhereInput | PackageServiceWhereInput[]
    OR?: PackageServiceWhereInput[]
    NOT?: PackageServiceWhereInput | PackageServiceWhereInput[]
    packageId?: StringFilter<"PackageService"> | string
    serviceId?: StringFilter<"PackageService"> | string
    quantity?: IntFilter<"PackageService"> | number
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }

  export type PackageServiceOrderByWithRelationInput = {
    packageId?: SortOrder
    serviceId?: SortOrder
    quantity?: SortOrder
    package?: PackageOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type PackageServiceWhereUniqueInput = Prisma.AtLeast<{
    packageId_serviceId?: PackageServicePackageIdServiceIdCompoundUniqueInput
    AND?: PackageServiceWhereInput | PackageServiceWhereInput[]
    OR?: PackageServiceWhereInput[]
    NOT?: PackageServiceWhereInput | PackageServiceWhereInput[]
    packageId?: StringFilter<"PackageService"> | string
    serviceId?: StringFilter<"PackageService"> | string
    quantity?: IntFilter<"PackageService"> | number
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }, "packageId_serviceId">

  export type PackageServiceOrderByWithAggregationInput = {
    packageId?: SortOrder
    serviceId?: SortOrder
    quantity?: SortOrder
    _count?: PackageServiceCountOrderByAggregateInput
    _avg?: PackageServiceAvgOrderByAggregateInput
    _max?: PackageServiceMaxOrderByAggregateInput
    _min?: PackageServiceMinOrderByAggregateInput
    _sum?: PackageServiceSumOrderByAggregateInput
  }

  export type PackageServiceScalarWhereWithAggregatesInput = {
    AND?: PackageServiceScalarWhereWithAggregatesInput | PackageServiceScalarWhereWithAggregatesInput[]
    OR?: PackageServiceScalarWhereWithAggregatesInput[]
    NOT?: PackageServiceScalarWhereWithAggregatesInput | PackageServiceScalarWhereWithAggregatesInput[]
    packageId?: StringWithAggregatesFilter<"PackageService"> | string
    serviceId?: StringWithAggregatesFilter<"PackageService"> | string
    quantity?: IntWithAggregatesFilter<"PackageService"> | number
  }

  export type CustomerPackageWhereInput = {
    AND?: CustomerPackageWhereInput | CustomerPackageWhereInput[]
    OR?: CustomerPackageWhereInput[]
    NOT?: CustomerPackageWhereInput | CustomerPackageWhereInput[]
    id?: StringFilter<"CustomerPackage"> | string
    purchaseDate?: DateTimeFilter<"CustomerPackage"> | Date | string
    expiryDate?: DateTimeNullableFilter<"CustomerPackage"> | Date | string | null
    remainingSessions?: JsonNullableFilter<"CustomerPackage">
    notes?: StringNullableFilter<"CustomerPackage"> | string | null
    salesCode?: StringNullableFilter<"CustomerPackage"> | string | null
    customerId?: StringFilter<"CustomerPackage"> | string
    packageId?: StringFilter<"CustomerPackage"> | string
    createdAt?: DateTimeFilter<"CustomerPackage"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPackage"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    invoice?: XOR<InvoiceNullableScalarRelationFilter, InvoiceWhereInput> | null
  }

  export type CustomerPackageOrderByWithRelationInput = {
    id?: SortOrder
    purchaseDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    remainingSessions?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    salesCode?: SortOrderInput | SortOrder
    customerId?: SortOrder
    packageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type CustomerPackageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    salesCode?: string
    AND?: CustomerPackageWhereInput | CustomerPackageWhereInput[]
    OR?: CustomerPackageWhereInput[]
    NOT?: CustomerPackageWhereInput | CustomerPackageWhereInput[]
    purchaseDate?: DateTimeFilter<"CustomerPackage"> | Date | string
    expiryDate?: DateTimeNullableFilter<"CustomerPackage"> | Date | string | null
    remainingSessions?: JsonNullableFilter<"CustomerPackage">
    notes?: StringNullableFilter<"CustomerPackage"> | string | null
    customerId?: StringFilter<"CustomerPackage"> | string
    packageId?: StringFilter<"CustomerPackage"> | string
    createdAt?: DateTimeFilter<"CustomerPackage"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPackage"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    invoice?: XOR<InvoiceNullableScalarRelationFilter, InvoiceWhereInput> | null
  }, "id" | "salesCode">

  export type CustomerPackageOrderByWithAggregationInput = {
    id?: SortOrder
    purchaseDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    remainingSessions?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    salesCode?: SortOrderInput | SortOrder
    customerId?: SortOrder
    packageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerPackageCountOrderByAggregateInput
    _max?: CustomerPackageMaxOrderByAggregateInput
    _min?: CustomerPackageMinOrderByAggregateInput
  }

  export type CustomerPackageScalarWhereWithAggregatesInput = {
    AND?: CustomerPackageScalarWhereWithAggregatesInput | CustomerPackageScalarWhereWithAggregatesInput[]
    OR?: CustomerPackageScalarWhereWithAggregatesInput[]
    NOT?: CustomerPackageScalarWhereWithAggregatesInput | CustomerPackageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerPackage"> | string
    purchaseDate?: DateTimeWithAggregatesFilter<"CustomerPackage"> | Date | string
    expiryDate?: DateTimeNullableWithAggregatesFilter<"CustomerPackage"> | Date | string | null
    remainingSessions?: JsonNullableWithAggregatesFilter<"CustomerPackage">
    notes?: StringNullableWithAggregatesFilter<"CustomerPackage"> | string | null
    salesCode?: StringNullableWithAggregatesFilter<"CustomerPackage"> | string | null
    customerId?: StringWithAggregatesFilter<"CustomerPackage"> | string
    packageId?: StringWithAggregatesFilter<"CustomerPackage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CustomerPackage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerPackage"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: StringFilter<"Invoice"> | string
    totalAmount?: FloatFilter<"Invoice"> | number
    amountPaid?: FloatFilter<"Invoice"> | number
    debt?: FloatFilter<"Invoice"> | number
    status?: EnumPaymentStatusFilter<"Invoice"> | $Enums.PaymentStatus
    customerId?: StringFilter<"Invoice"> | string
    branchId?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    appointmentId?: StringNullableFilter<"Invoice"> | string | null
    customerPackageId?: StringNullableFilter<"Invoice"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    customerPackage?: XOR<CustomerPackageNullableScalarRelationFilter, CustomerPackageWhereInput> | null
    payments?: PaymentListRelationFilter
    commissionItems?: CommissionItemListRelationFilter
    StaffCommission?: StaffCommissionListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointmentId?: SortOrderInput | SortOrder
    customerPackageId?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
    customerPackage?: CustomerPackageOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
    commissionItems?: CommissionItemOrderByRelationAggregateInput
    StaffCommission?: StaffCommissionOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    appointmentId?: string
    customerPackageId?: string
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    totalAmount?: FloatFilter<"Invoice"> | number
    amountPaid?: FloatFilter<"Invoice"> | number
    debt?: FloatFilter<"Invoice"> | number
    status?: EnumPaymentStatusFilter<"Invoice"> | $Enums.PaymentStatus
    customerId?: StringFilter<"Invoice"> | string
    branchId?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    customerPackage?: XOR<CustomerPackageNullableScalarRelationFilter, CustomerPackageWhereInput> | null
    payments?: PaymentListRelationFilter
    commissionItems?: CommissionItemListRelationFilter
    StaffCommission?: StaffCommissionListRelationFilter
  }, "id" | "appointmentId" | "customerPackageId">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointmentId?: SortOrderInput | SortOrder
    customerPackageId?: SortOrderInput | SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invoice"> | string
    totalAmount?: FloatWithAggregatesFilter<"Invoice"> | number
    amountPaid?: FloatWithAggregatesFilter<"Invoice"> | number
    debt?: FloatWithAggregatesFilter<"Invoice"> | number
    status?: EnumPaymentStatusWithAggregatesFilter<"Invoice"> | $Enums.PaymentStatus
    customerId?: StringWithAggregatesFilter<"Invoice"> | string
    branchId?: StringWithAggregatesFilter<"Invoice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    appointmentId?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
    customerPackageId?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    invoiceId?: StringFilter<"Payment"> | string
    cashRegisterLogId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    cashLog?: XOR<CashRegisterLogNullableScalarRelationFilter, CashRegisterLogWhereInput> | null
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    paymentDate?: SortOrder
    invoiceId?: SortOrder
    cashRegisterLogId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
    cashLog?: CashRegisterLogOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    amount?: FloatFilter<"Payment"> | number
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    invoiceId?: StringFilter<"Payment"> | string
    cashRegisterLogId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    cashLog?: XOR<CashRegisterLogNullableScalarRelationFilter, CashRegisterLogWhereInput> | null
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    paymentDate?: SortOrder
    invoiceId?: SortOrder
    cashRegisterLogId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    amount?: FloatWithAggregatesFilter<"Payment"> | number
    method?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    paymentDate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    invoiceId?: StringWithAggregatesFilter<"Payment"> | string
    cashRegisterLogId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type CommissionRuleWhereInput = {
    AND?: CommissionRuleWhereInput | CommissionRuleWhereInput[]
    OR?: CommissionRuleWhereInput[]
    NOT?: CommissionRuleWhereInput | CommissionRuleWhereInput[]
    id?: StringFilter<"CommissionRule"> | string
    name?: StringFilter<"CommissionRule"> | string
    description?: StringNullableFilter<"CommissionRule"> | string | null
    ruleType?: EnumCommissionRuleTypeFilter<"CommissionRule"> | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFilter<"CommissionRule"> | $Enums.CommissionType
    rate?: FloatFilter<"CommissionRule"> | number
    fixedAmount?: FloatFilter<"CommissionRule"> | number
    startDate?: DateTimeFilter<"CommissionRule"> | Date | string
    endDate?: DateTimeNullableFilter<"CommissionRule"> | Date | string | null
    branchId?: StringFilter<"CommissionRule"> | string
    serviceId?: StringNullableFilter<"CommissionRule"> | string | null
    staffId?: StringNullableFilter<"CommissionRule"> | string | null
    isActive?: BoolFilter<"CommissionRule"> | boolean
    createdAt?: DateTimeFilter<"CommissionRule"> | Date | string
    updatedAt?: DateTimeFilter<"CommissionRule"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    staff?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    commissionItems?: CommissionItemListRelationFilter
  }

  export type CommissionRuleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ruleType?: SortOrder
    type?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    branchId?: SortOrder
    serviceId?: SortOrderInput | SortOrder
    staffId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    staff?: UserOrderByWithRelationInput
    commissionItems?: CommissionItemOrderByRelationAggregateInput
  }

  export type CommissionRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommissionRuleWhereInput | CommissionRuleWhereInput[]
    OR?: CommissionRuleWhereInput[]
    NOT?: CommissionRuleWhereInput | CommissionRuleWhereInput[]
    name?: StringFilter<"CommissionRule"> | string
    description?: StringNullableFilter<"CommissionRule"> | string | null
    ruleType?: EnumCommissionRuleTypeFilter<"CommissionRule"> | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFilter<"CommissionRule"> | $Enums.CommissionType
    rate?: FloatFilter<"CommissionRule"> | number
    fixedAmount?: FloatFilter<"CommissionRule"> | number
    startDate?: DateTimeFilter<"CommissionRule"> | Date | string
    endDate?: DateTimeNullableFilter<"CommissionRule"> | Date | string | null
    branchId?: StringFilter<"CommissionRule"> | string
    serviceId?: StringNullableFilter<"CommissionRule"> | string | null
    staffId?: StringNullableFilter<"CommissionRule"> | string | null
    isActive?: BoolFilter<"CommissionRule"> | boolean
    createdAt?: DateTimeFilter<"CommissionRule"> | Date | string
    updatedAt?: DateTimeFilter<"CommissionRule"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    staff?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    commissionItems?: CommissionItemListRelationFilter
  }, "id">

  export type CommissionRuleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ruleType?: SortOrder
    type?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    branchId?: SortOrder
    serviceId?: SortOrderInput | SortOrder
    staffId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommissionRuleCountOrderByAggregateInput
    _avg?: CommissionRuleAvgOrderByAggregateInput
    _max?: CommissionRuleMaxOrderByAggregateInput
    _min?: CommissionRuleMinOrderByAggregateInput
    _sum?: CommissionRuleSumOrderByAggregateInput
  }

  export type CommissionRuleScalarWhereWithAggregatesInput = {
    AND?: CommissionRuleScalarWhereWithAggregatesInput | CommissionRuleScalarWhereWithAggregatesInput[]
    OR?: CommissionRuleScalarWhereWithAggregatesInput[]
    NOT?: CommissionRuleScalarWhereWithAggregatesInput | CommissionRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CommissionRule"> | string
    name?: StringWithAggregatesFilter<"CommissionRule"> | string
    description?: StringNullableWithAggregatesFilter<"CommissionRule"> | string | null
    ruleType?: EnumCommissionRuleTypeWithAggregatesFilter<"CommissionRule"> | $Enums.CommissionRuleType
    type?: EnumCommissionTypeWithAggregatesFilter<"CommissionRule"> | $Enums.CommissionType
    rate?: FloatWithAggregatesFilter<"CommissionRule"> | number
    fixedAmount?: FloatWithAggregatesFilter<"CommissionRule"> | number
    startDate?: DateTimeWithAggregatesFilter<"CommissionRule"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"CommissionRule"> | Date | string | null
    branchId?: StringWithAggregatesFilter<"CommissionRule"> | string
    serviceId?: StringNullableWithAggregatesFilter<"CommissionRule"> | string | null
    staffId?: StringNullableWithAggregatesFilter<"CommissionRule"> | string | null
    isActive?: BoolWithAggregatesFilter<"CommissionRule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CommissionRule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CommissionRule"> | Date | string
  }

  export type CommissionItemWhereInput = {
    AND?: CommissionItemWhereInput | CommissionItemWhereInput[]
    OR?: CommissionItemWhereInput[]
    NOT?: CommissionItemWhereInput | CommissionItemWhereInput[]
    id?: StringFilter<"CommissionItem"> | string
    invoiceId?: StringFilter<"CommissionItem"> | string
    serviceId?: StringNullableFilter<"CommissionItem"> | string | null
    amount?: FloatFilter<"CommissionItem"> | number
    status?: EnumCommissionStatusFilter<"CommissionItem"> | $Enums.CommissionStatus
    appliedRuleId?: StringNullableFilter<"CommissionItem"> | string | null
    createdAt?: DateTimeFilter<"CommissionItem"> | Date | string
    updatedAt?: DateTimeFilter<"CommissionItem"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    commissions?: StaffCommissionListRelationFilter
    appliedRule?: XOR<CommissionRuleNullableScalarRelationFilter, CommissionRuleWhereInput> | null
  }

  export type CommissionItemOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrder
    appliedRuleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    commissions?: StaffCommissionOrderByRelationAggregateInput
    appliedRule?: CommissionRuleOrderByWithRelationInput
  }

  export type CommissionItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommissionItemWhereInput | CommissionItemWhereInput[]
    OR?: CommissionItemWhereInput[]
    NOT?: CommissionItemWhereInput | CommissionItemWhereInput[]
    invoiceId?: StringFilter<"CommissionItem"> | string
    serviceId?: StringNullableFilter<"CommissionItem"> | string | null
    amount?: FloatFilter<"CommissionItem"> | number
    status?: EnumCommissionStatusFilter<"CommissionItem"> | $Enums.CommissionStatus
    appliedRuleId?: StringNullableFilter<"CommissionItem"> | string | null
    createdAt?: DateTimeFilter<"CommissionItem"> | Date | string
    updatedAt?: DateTimeFilter<"CommissionItem"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    commissions?: StaffCommissionListRelationFilter
    appliedRule?: XOR<CommissionRuleNullableScalarRelationFilter, CommissionRuleWhereInput> | null
  }, "id">

  export type CommissionItemOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrder
    appliedRuleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommissionItemCountOrderByAggregateInput
    _avg?: CommissionItemAvgOrderByAggregateInput
    _max?: CommissionItemMaxOrderByAggregateInput
    _min?: CommissionItemMinOrderByAggregateInput
    _sum?: CommissionItemSumOrderByAggregateInput
  }

  export type CommissionItemScalarWhereWithAggregatesInput = {
    AND?: CommissionItemScalarWhereWithAggregatesInput | CommissionItemScalarWhereWithAggregatesInput[]
    OR?: CommissionItemScalarWhereWithAggregatesInput[]
    NOT?: CommissionItemScalarWhereWithAggregatesInput | CommissionItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CommissionItem"> | string
    invoiceId?: StringWithAggregatesFilter<"CommissionItem"> | string
    serviceId?: StringNullableWithAggregatesFilter<"CommissionItem"> | string | null
    amount?: FloatWithAggregatesFilter<"CommissionItem"> | number
    status?: EnumCommissionStatusWithAggregatesFilter<"CommissionItem"> | $Enums.CommissionStatus
    appliedRuleId?: StringNullableWithAggregatesFilter<"CommissionItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CommissionItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CommissionItem"> | Date | string
  }

  export type StaffCommissionWhereInput = {
    AND?: StaffCommissionWhereInput | StaffCommissionWhereInput[]
    OR?: StaffCommissionWhereInput[]
    NOT?: StaffCommissionWhereInput | StaffCommissionWhereInput[]
    id?: StringFilter<"StaffCommission"> | string
    staffId?: StringFilter<"StaffCommission"> | string
    commissionItemId?: StringFilter<"StaffCommission"> | string
    amount?: FloatFilter<"StaffCommission"> | number
    status?: EnumCommissionStatusFilter<"StaffCommission"> | $Enums.CommissionStatus
    createdAt?: DateTimeFilter<"StaffCommission"> | Date | string
    updatedAt?: DateTimeFilter<"StaffCommission"> | Date | string
    appliedRuleId?: StringNullableFilter<"StaffCommission"> | string | null
    invoiceId?: StringFilter<"StaffCommission"> | string
    serviceId?: StringNullableFilter<"StaffCommission"> | string | null
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
    commissionItem?: XOR<CommissionItemScalarRelationFilter, CommissionItemWhereInput>
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
  }

  export type StaffCommissionOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    commissionItemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appliedRuleId?: SortOrderInput | SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrderInput | SortOrder
    staff?: UserOrderByWithRelationInput
    commissionItem?: CommissionItemOrderByWithRelationInput
    invoice?: InvoiceOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type StaffCommissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StaffCommissionWhereInput | StaffCommissionWhereInput[]
    OR?: StaffCommissionWhereInput[]
    NOT?: StaffCommissionWhereInput | StaffCommissionWhereInput[]
    staffId?: StringFilter<"StaffCommission"> | string
    commissionItemId?: StringFilter<"StaffCommission"> | string
    amount?: FloatFilter<"StaffCommission"> | number
    status?: EnumCommissionStatusFilter<"StaffCommission"> | $Enums.CommissionStatus
    createdAt?: DateTimeFilter<"StaffCommission"> | Date | string
    updatedAt?: DateTimeFilter<"StaffCommission"> | Date | string
    appliedRuleId?: StringNullableFilter<"StaffCommission"> | string | null
    invoiceId?: StringFilter<"StaffCommission"> | string
    serviceId?: StringNullableFilter<"StaffCommission"> | string | null
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
    commissionItem?: XOR<CommissionItemScalarRelationFilter, CommissionItemWhereInput>
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
  }, "id">

  export type StaffCommissionOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    commissionItemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appliedRuleId?: SortOrderInput | SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrderInput | SortOrder
    _count?: StaffCommissionCountOrderByAggregateInput
    _avg?: StaffCommissionAvgOrderByAggregateInput
    _max?: StaffCommissionMaxOrderByAggregateInput
    _min?: StaffCommissionMinOrderByAggregateInput
    _sum?: StaffCommissionSumOrderByAggregateInput
  }

  export type StaffCommissionScalarWhereWithAggregatesInput = {
    AND?: StaffCommissionScalarWhereWithAggregatesInput | StaffCommissionScalarWhereWithAggregatesInput[]
    OR?: StaffCommissionScalarWhereWithAggregatesInput[]
    NOT?: StaffCommissionScalarWhereWithAggregatesInput | StaffCommissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffCommission"> | string
    staffId?: StringWithAggregatesFilter<"StaffCommission"> | string
    commissionItemId?: StringWithAggregatesFilter<"StaffCommission"> | string
    amount?: FloatWithAggregatesFilter<"StaffCommission"> | number
    status?: EnumCommissionStatusWithAggregatesFilter<"StaffCommission"> | $Enums.CommissionStatus
    createdAt?: DateTimeWithAggregatesFilter<"StaffCommission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StaffCommission"> | Date | string
    appliedRuleId?: StringNullableWithAggregatesFilter<"StaffCommission"> | string | null
    invoiceId?: StringWithAggregatesFilter<"StaffCommission"> | string
    serviceId?: StringNullableWithAggregatesFilter<"StaffCommission"> | string | null
  }

  export type CashRegisterLogWhereInput = {
    AND?: CashRegisterLogWhereInput | CashRegisterLogWhereInput[]
    OR?: CashRegisterLogWhereInput[]
    NOT?: CashRegisterLogWhereInput | CashRegisterLogWhereInput[]
    id?: StringFilter<"CashRegisterLog"> | string
    type?: EnumCashLogTypeFilter<"CashRegisterLog"> | $Enums.CashLogType
    amount?: FloatFilter<"CashRegisterLog"> | number
    description?: StringNullableFilter<"CashRegisterLog"> | string | null
    branchId?: StringFilter<"CashRegisterLog"> | string
    userId?: StringFilter<"CashRegisterLog"> | string
    createdAt?: DateTimeFilter<"CashRegisterLog"> | Date | string
    category?: EnumCashMovementCategoryNullableFilter<"CashRegisterLog"> | $Enums.CashMovementCategory | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    payments?: PaymentListRelationFilter
  }

  export type CashRegisterLogOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    branchId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    category?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type CashRegisterLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CashRegisterLogWhereInput | CashRegisterLogWhereInput[]
    OR?: CashRegisterLogWhereInput[]
    NOT?: CashRegisterLogWhereInput | CashRegisterLogWhereInput[]
    type?: EnumCashLogTypeFilter<"CashRegisterLog"> | $Enums.CashLogType
    amount?: FloatFilter<"CashRegisterLog"> | number
    description?: StringNullableFilter<"CashRegisterLog"> | string | null
    branchId?: StringFilter<"CashRegisterLog"> | string
    userId?: StringFilter<"CashRegisterLog"> | string
    createdAt?: DateTimeFilter<"CashRegisterLog"> | Date | string
    category?: EnumCashMovementCategoryNullableFilter<"CashRegisterLog"> | $Enums.CashMovementCategory | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    payments?: PaymentListRelationFilter
  }, "id">

  export type CashRegisterLogOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    branchId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    category?: SortOrderInput | SortOrder
    _count?: CashRegisterLogCountOrderByAggregateInput
    _avg?: CashRegisterLogAvgOrderByAggregateInput
    _max?: CashRegisterLogMaxOrderByAggregateInput
    _min?: CashRegisterLogMinOrderByAggregateInput
    _sum?: CashRegisterLogSumOrderByAggregateInput
  }

  export type CashRegisterLogScalarWhereWithAggregatesInput = {
    AND?: CashRegisterLogScalarWhereWithAggregatesInput | CashRegisterLogScalarWhereWithAggregatesInput[]
    OR?: CashRegisterLogScalarWhereWithAggregatesInput[]
    NOT?: CashRegisterLogScalarWhereWithAggregatesInput | CashRegisterLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CashRegisterLog"> | string
    type?: EnumCashLogTypeWithAggregatesFilter<"CashRegisterLog"> | $Enums.CashLogType
    amount?: FloatWithAggregatesFilter<"CashRegisterLog"> | number
    description?: StringNullableWithAggregatesFilter<"CashRegisterLog"> | string | null
    branchId?: StringWithAggregatesFilter<"CashRegisterLog"> | string
    userId?: StringWithAggregatesFilter<"CashRegisterLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CashRegisterLog"> | Date | string
    category?: EnumCashMovementCategoryNullableWithAggregatesFilter<"CashRegisterLog"> | $Enums.CashMovementCategory | null
  }

  export type NotificationProviderWhereInput = {
    AND?: NotificationProviderWhereInput | NotificationProviderWhereInput[]
    OR?: NotificationProviderWhereInput[]
    NOT?: NotificationProviderWhereInput | NotificationProviderWhereInput[]
    id?: StringFilter<"NotificationProvider"> | string
    name?: StringFilter<"NotificationProvider"> | string
    type?: EnumNotificationTypeFilter<"NotificationProvider"> | $Enums.NotificationType
    config?: JsonFilter<"NotificationProvider">
    branchId?: StringFilter<"NotificationProvider"> | string
    isActive?: BoolFilter<"NotificationProvider"> | boolean
    createdAt?: DateTimeFilter<"NotificationProvider"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationProvider"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }

  export type NotificationProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    config?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
  }

  export type NotificationProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationProviderWhereInput | NotificationProviderWhereInput[]
    OR?: NotificationProviderWhereInput[]
    NOT?: NotificationProviderWhereInput | NotificationProviderWhereInput[]
    name?: StringFilter<"NotificationProvider"> | string
    type?: EnumNotificationTypeFilter<"NotificationProvider"> | $Enums.NotificationType
    config?: JsonFilter<"NotificationProvider">
    branchId?: StringFilter<"NotificationProvider"> | string
    isActive?: BoolFilter<"NotificationProvider"> | boolean
    createdAt?: DateTimeFilter<"NotificationProvider"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationProvider"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }, "id">

  export type NotificationProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    config?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationProviderCountOrderByAggregateInput
    _max?: NotificationProviderMaxOrderByAggregateInput
    _min?: NotificationProviderMinOrderByAggregateInput
  }

  export type NotificationProviderScalarWhereWithAggregatesInput = {
    AND?: NotificationProviderScalarWhereWithAggregatesInput | NotificationProviderScalarWhereWithAggregatesInput[]
    OR?: NotificationProviderScalarWhereWithAggregatesInput[]
    NOT?: NotificationProviderScalarWhereWithAggregatesInput | NotificationProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationProvider"> | string
    name?: StringWithAggregatesFilter<"NotificationProvider"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"NotificationProvider"> | $Enums.NotificationType
    config?: JsonWithAggregatesFilter<"NotificationProvider">
    branchId?: StringWithAggregatesFilter<"NotificationProvider"> | string
    isActive?: BoolWithAggregatesFilter<"NotificationProvider"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationProvider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationProvider"> | Date | string
  }

  export type NotificationTemplateWhereInput = {
    AND?: NotificationTemplateWhereInput | NotificationTemplateWhereInput[]
    OR?: NotificationTemplateWhereInput[]
    NOT?: NotificationTemplateWhereInput | NotificationTemplateWhereInput[]
    id?: StringFilter<"NotificationTemplate"> | string
    name?: StringFilter<"NotificationTemplate"> | string
    type?: EnumNotificationTypeFilter<"NotificationTemplate"> | $Enums.NotificationType
    subject?: StringNullableFilter<"NotificationTemplate"> | string | null
    content?: StringFilter<"NotificationTemplate"> | string
    variables?: JsonFilter<"NotificationTemplate">
    language?: StringFilter<"NotificationTemplate"> | string
    branchId?: StringFilter<"NotificationTemplate"> | string
    isActive?: BoolFilter<"NotificationTemplate"> | boolean
    createdAt?: DateTimeFilter<"NotificationTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationTemplate"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    triggers?: NotificationTriggerListRelationFilter
    queue?: NotificationQueueListRelationFilter
    history?: NotificationHistoryListRelationFilter
  }

  export type NotificationTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    subject?: SortOrderInput | SortOrder
    content?: SortOrder
    variables?: SortOrder
    language?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
    triggers?: NotificationTriggerOrderByRelationAggregateInput
    queue?: NotificationQueueOrderByRelationAggregateInput
    history?: NotificationHistoryOrderByRelationAggregateInput
  }

  export type NotificationTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationTemplateWhereInput | NotificationTemplateWhereInput[]
    OR?: NotificationTemplateWhereInput[]
    NOT?: NotificationTemplateWhereInput | NotificationTemplateWhereInput[]
    name?: StringFilter<"NotificationTemplate"> | string
    type?: EnumNotificationTypeFilter<"NotificationTemplate"> | $Enums.NotificationType
    subject?: StringNullableFilter<"NotificationTemplate"> | string | null
    content?: StringFilter<"NotificationTemplate"> | string
    variables?: JsonFilter<"NotificationTemplate">
    language?: StringFilter<"NotificationTemplate"> | string
    branchId?: StringFilter<"NotificationTemplate"> | string
    isActive?: BoolFilter<"NotificationTemplate"> | boolean
    createdAt?: DateTimeFilter<"NotificationTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationTemplate"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    triggers?: NotificationTriggerListRelationFilter
    queue?: NotificationQueueListRelationFilter
    history?: NotificationHistoryListRelationFilter
  }, "id">

  export type NotificationTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    subject?: SortOrderInput | SortOrder
    content?: SortOrder
    variables?: SortOrder
    language?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationTemplateCountOrderByAggregateInput
    _max?: NotificationTemplateMaxOrderByAggregateInput
    _min?: NotificationTemplateMinOrderByAggregateInput
  }

  export type NotificationTemplateScalarWhereWithAggregatesInput = {
    AND?: NotificationTemplateScalarWhereWithAggregatesInput | NotificationTemplateScalarWhereWithAggregatesInput[]
    OR?: NotificationTemplateScalarWhereWithAggregatesInput[]
    NOT?: NotificationTemplateScalarWhereWithAggregatesInput | NotificationTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationTemplate"> | string
    name?: StringWithAggregatesFilter<"NotificationTemplate"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"NotificationTemplate"> | $Enums.NotificationType
    subject?: StringNullableWithAggregatesFilter<"NotificationTemplate"> | string | null
    content?: StringWithAggregatesFilter<"NotificationTemplate"> | string
    variables?: JsonWithAggregatesFilter<"NotificationTemplate">
    language?: StringWithAggregatesFilter<"NotificationTemplate"> | string
    branchId?: StringWithAggregatesFilter<"NotificationTemplate"> | string
    isActive?: BoolWithAggregatesFilter<"NotificationTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationTemplate"> | Date | string
  }

  export type NotificationTriggerWhereInput = {
    AND?: NotificationTriggerWhereInput | NotificationTriggerWhereInput[]
    OR?: NotificationTriggerWhereInput[]
    NOT?: NotificationTriggerWhereInput | NotificationTriggerWhereInput[]
    id?: StringFilter<"NotificationTrigger"> | string
    name?: StringFilter<"NotificationTrigger"> | string
    eventType?: EnumNotificationEventTypeFilter<"NotificationTrigger"> | $Enums.NotificationEventType
    conditions?: JsonFilter<"NotificationTrigger">
    templateId?: StringFilter<"NotificationTrigger"> | string
    branchId?: StringFilter<"NotificationTrigger"> | string
    isActive?: BoolFilter<"NotificationTrigger"> | boolean
    priority?: IntFilter<"NotificationTrigger"> | number
    schedule?: StringNullableFilter<"NotificationTrigger"> | string | null
    createdAt?: DateTimeFilter<"NotificationTrigger"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationTrigger"> | Date | string
    template?: XOR<NotificationTemplateScalarRelationFilter, NotificationTemplateWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    queue?: NotificationQueueListRelationFilter
    history?: NotificationHistoryListRelationFilter
  }

  export type NotificationTriggerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    eventType?: SortOrder
    conditions?: SortOrder
    templateId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    schedule?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    template?: NotificationTemplateOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    queue?: NotificationQueueOrderByRelationAggregateInput
    history?: NotificationHistoryOrderByRelationAggregateInput
  }

  export type NotificationTriggerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationTriggerWhereInput | NotificationTriggerWhereInput[]
    OR?: NotificationTriggerWhereInput[]
    NOT?: NotificationTriggerWhereInput | NotificationTriggerWhereInput[]
    name?: StringFilter<"NotificationTrigger"> | string
    eventType?: EnumNotificationEventTypeFilter<"NotificationTrigger"> | $Enums.NotificationEventType
    conditions?: JsonFilter<"NotificationTrigger">
    templateId?: StringFilter<"NotificationTrigger"> | string
    branchId?: StringFilter<"NotificationTrigger"> | string
    isActive?: BoolFilter<"NotificationTrigger"> | boolean
    priority?: IntFilter<"NotificationTrigger"> | number
    schedule?: StringNullableFilter<"NotificationTrigger"> | string | null
    createdAt?: DateTimeFilter<"NotificationTrigger"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationTrigger"> | Date | string
    template?: XOR<NotificationTemplateScalarRelationFilter, NotificationTemplateWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    queue?: NotificationQueueListRelationFilter
    history?: NotificationHistoryListRelationFilter
  }, "id">

  export type NotificationTriggerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    eventType?: SortOrder
    conditions?: SortOrder
    templateId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    schedule?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationTriggerCountOrderByAggregateInput
    _avg?: NotificationTriggerAvgOrderByAggregateInput
    _max?: NotificationTriggerMaxOrderByAggregateInput
    _min?: NotificationTriggerMinOrderByAggregateInput
    _sum?: NotificationTriggerSumOrderByAggregateInput
  }

  export type NotificationTriggerScalarWhereWithAggregatesInput = {
    AND?: NotificationTriggerScalarWhereWithAggregatesInput | NotificationTriggerScalarWhereWithAggregatesInput[]
    OR?: NotificationTriggerScalarWhereWithAggregatesInput[]
    NOT?: NotificationTriggerScalarWhereWithAggregatesInput | NotificationTriggerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationTrigger"> | string
    name?: StringWithAggregatesFilter<"NotificationTrigger"> | string
    eventType?: EnumNotificationEventTypeWithAggregatesFilter<"NotificationTrigger"> | $Enums.NotificationEventType
    conditions?: JsonWithAggregatesFilter<"NotificationTrigger">
    templateId?: StringWithAggregatesFilter<"NotificationTrigger"> | string
    branchId?: StringWithAggregatesFilter<"NotificationTrigger"> | string
    isActive?: BoolWithAggregatesFilter<"NotificationTrigger"> | boolean
    priority?: IntWithAggregatesFilter<"NotificationTrigger"> | number
    schedule?: StringNullableWithAggregatesFilter<"NotificationTrigger"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"NotificationTrigger"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationTrigger"> | Date | string
  }

  export type NotificationQueueWhereInput = {
    AND?: NotificationQueueWhereInput | NotificationQueueWhereInput[]
    OR?: NotificationQueueWhereInput[]
    NOT?: NotificationQueueWhereInput | NotificationQueueWhereInput[]
    id?: StringFilter<"NotificationQueue"> | string
    customerId?: StringFilter<"NotificationQueue"> | string
    templateId?: StringFilter<"NotificationQueue"> | string
    triggerId?: StringNullableFilter<"NotificationQueue"> | string | null
    branchId?: StringFilter<"NotificationQueue"> | string
    status?: EnumNotificationStatusFilter<"NotificationQueue"> | $Enums.NotificationStatus
    data?: JsonFilter<"NotificationQueue">
    scheduledAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    sentAt?: DateTimeNullableFilter<"NotificationQueue"> | Date | string | null
    errorMessage?: StringNullableFilter<"NotificationQueue"> | string | null
    retryCount?: IntFilter<"NotificationQueue"> | number
    createdAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    template?: XOR<NotificationTemplateScalarRelationFilter, NotificationTemplateWhereInput>
    trigger?: XOR<NotificationTriggerNullableScalarRelationFilter, NotificationTriggerWhereInput> | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }

  export type NotificationQueueOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrderInput | SortOrder
    branchId?: SortOrder
    status?: SortOrder
    data?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    template?: NotificationTemplateOrderByWithRelationInput
    trigger?: NotificationTriggerOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
  }

  export type NotificationQueueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationQueueWhereInput | NotificationQueueWhereInput[]
    OR?: NotificationQueueWhereInput[]
    NOT?: NotificationQueueWhereInput | NotificationQueueWhereInput[]
    customerId?: StringFilter<"NotificationQueue"> | string
    templateId?: StringFilter<"NotificationQueue"> | string
    triggerId?: StringNullableFilter<"NotificationQueue"> | string | null
    branchId?: StringFilter<"NotificationQueue"> | string
    status?: EnumNotificationStatusFilter<"NotificationQueue"> | $Enums.NotificationStatus
    data?: JsonFilter<"NotificationQueue">
    scheduledAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    sentAt?: DateTimeNullableFilter<"NotificationQueue"> | Date | string | null
    errorMessage?: StringNullableFilter<"NotificationQueue"> | string | null
    retryCount?: IntFilter<"NotificationQueue"> | number
    createdAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    template?: XOR<NotificationTemplateScalarRelationFilter, NotificationTemplateWhereInput>
    trigger?: XOR<NotificationTriggerNullableScalarRelationFilter, NotificationTriggerWhereInput> | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }, "id">

  export type NotificationQueueOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrderInput | SortOrder
    branchId?: SortOrder
    status?: SortOrder
    data?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationQueueCountOrderByAggregateInput
    _avg?: NotificationQueueAvgOrderByAggregateInput
    _max?: NotificationQueueMaxOrderByAggregateInput
    _min?: NotificationQueueMinOrderByAggregateInput
    _sum?: NotificationQueueSumOrderByAggregateInput
  }

  export type NotificationQueueScalarWhereWithAggregatesInput = {
    AND?: NotificationQueueScalarWhereWithAggregatesInput | NotificationQueueScalarWhereWithAggregatesInput[]
    OR?: NotificationQueueScalarWhereWithAggregatesInput[]
    NOT?: NotificationQueueScalarWhereWithAggregatesInput | NotificationQueueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationQueue"> | string
    customerId?: StringWithAggregatesFilter<"NotificationQueue"> | string
    templateId?: StringWithAggregatesFilter<"NotificationQueue"> | string
    triggerId?: StringNullableWithAggregatesFilter<"NotificationQueue"> | string | null
    branchId?: StringWithAggregatesFilter<"NotificationQueue"> | string
    status?: EnumNotificationStatusWithAggregatesFilter<"NotificationQueue"> | $Enums.NotificationStatus
    data?: JsonWithAggregatesFilter<"NotificationQueue">
    scheduledAt?: DateTimeWithAggregatesFilter<"NotificationQueue"> | Date | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"NotificationQueue"> | Date | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"NotificationQueue"> | string | null
    retryCount?: IntWithAggregatesFilter<"NotificationQueue"> | number
    createdAt?: DateTimeWithAggregatesFilter<"NotificationQueue"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationQueue"> | Date | string
  }

  export type NotificationHistoryWhereInput = {
    AND?: NotificationHistoryWhereInput | NotificationHistoryWhereInput[]
    OR?: NotificationHistoryWhereInput[]
    NOT?: NotificationHistoryWhereInput | NotificationHistoryWhereInput[]
    id?: StringFilter<"NotificationHistory"> | string
    customerId?: StringFilter<"NotificationHistory"> | string
    templateId?: StringFilter<"NotificationHistory"> | string
    triggerId?: StringNullableFilter<"NotificationHistory"> | string | null
    branchId?: StringFilter<"NotificationHistory"> | string
    type?: EnumNotificationTypeFilter<"NotificationHistory"> | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFilter<"NotificationHistory"> | $Enums.NotificationDeliveryStatus
    content?: StringFilter<"NotificationHistory"> | string
    metadata?: JsonNullableFilter<"NotificationHistory">
    cost?: FloatNullableFilter<"NotificationHistory"> | number | null
    sentAt?: DateTimeFilter<"NotificationHistory"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"NotificationHistory"> | Date | string | null
    readAt?: DateTimeNullableFilter<"NotificationHistory"> | Date | string | null
    createdAt?: DateTimeFilter<"NotificationHistory"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    template?: XOR<NotificationTemplateScalarRelationFilter, NotificationTemplateWhereInput>
    trigger?: XOR<NotificationTriggerNullableScalarRelationFilter, NotificationTriggerWhereInput> | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }

  export type NotificationHistoryOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrderInput | SortOrder
    branchId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    content?: SortOrder
    metadata?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    readAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    template?: NotificationTemplateOrderByWithRelationInput
    trigger?: NotificationTriggerOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
  }

  export type NotificationHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationHistoryWhereInput | NotificationHistoryWhereInput[]
    OR?: NotificationHistoryWhereInput[]
    NOT?: NotificationHistoryWhereInput | NotificationHistoryWhereInput[]
    customerId?: StringFilter<"NotificationHistory"> | string
    templateId?: StringFilter<"NotificationHistory"> | string
    triggerId?: StringNullableFilter<"NotificationHistory"> | string | null
    branchId?: StringFilter<"NotificationHistory"> | string
    type?: EnumNotificationTypeFilter<"NotificationHistory"> | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFilter<"NotificationHistory"> | $Enums.NotificationDeliveryStatus
    content?: StringFilter<"NotificationHistory"> | string
    metadata?: JsonNullableFilter<"NotificationHistory">
    cost?: FloatNullableFilter<"NotificationHistory"> | number | null
    sentAt?: DateTimeFilter<"NotificationHistory"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"NotificationHistory"> | Date | string | null
    readAt?: DateTimeNullableFilter<"NotificationHistory"> | Date | string | null
    createdAt?: DateTimeFilter<"NotificationHistory"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    template?: XOR<NotificationTemplateScalarRelationFilter, NotificationTemplateWhereInput>
    trigger?: XOR<NotificationTriggerNullableScalarRelationFilter, NotificationTriggerWhereInput> | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }, "id">

  export type NotificationHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrderInput | SortOrder
    branchId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    content?: SortOrder
    metadata?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    readAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationHistoryCountOrderByAggregateInput
    _avg?: NotificationHistoryAvgOrderByAggregateInput
    _max?: NotificationHistoryMaxOrderByAggregateInput
    _min?: NotificationHistoryMinOrderByAggregateInput
    _sum?: NotificationHistorySumOrderByAggregateInput
  }

  export type NotificationHistoryScalarWhereWithAggregatesInput = {
    AND?: NotificationHistoryScalarWhereWithAggregatesInput | NotificationHistoryScalarWhereWithAggregatesInput[]
    OR?: NotificationHistoryScalarWhereWithAggregatesInput[]
    NOT?: NotificationHistoryScalarWhereWithAggregatesInput | NotificationHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationHistory"> | string
    customerId?: StringWithAggregatesFilter<"NotificationHistory"> | string
    templateId?: StringWithAggregatesFilter<"NotificationHistory"> | string
    triggerId?: StringNullableWithAggregatesFilter<"NotificationHistory"> | string | null
    branchId?: StringWithAggregatesFilter<"NotificationHistory"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"NotificationHistory"> | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusWithAggregatesFilter<"NotificationHistory"> | $Enums.NotificationDeliveryStatus
    content?: StringWithAggregatesFilter<"NotificationHistory"> | string
    metadata?: JsonNullableWithAggregatesFilter<"NotificationHistory">
    cost?: FloatNullableWithAggregatesFilter<"NotificationHistory"> | number | null
    sentAt?: DateTimeWithAggregatesFilter<"NotificationHistory"> | Date | string
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"NotificationHistory"> | Date | string | null
    readAt?: DateTimeNullableWithAggregatesFilter<"NotificationHistory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"NotificationHistory"> | Date | string
  }

  export type NotificationSettingsWhereInput = {
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    id?: StringFilter<"NotificationSettings"> | string
    branchId?: StringFilter<"NotificationSettings"> | string
    smsConfig?: JsonNullableFilter<"NotificationSettings">
    whatsappConfig?: JsonNullableFilter<"NotificationSettings">
    emailConfig?: JsonNullableFilter<"NotificationSettings">
    generalSettings?: JsonNullableFilter<"NotificationSettings">
    isActive?: BoolFilter<"NotificationSettings"> | boolean
    createdAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }

  export type NotificationSettingsOrderByWithRelationInput = {
    id?: SortOrder
    branchId?: SortOrder
    smsConfig?: SortOrderInput | SortOrder
    whatsappConfig?: SortOrderInput | SortOrder
    emailConfig?: SortOrderInput | SortOrder
    generalSettings?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    branch?: BranchOrderByWithRelationInput
  }

  export type NotificationSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    branchId?: string
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    smsConfig?: JsonNullableFilter<"NotificationSettings">
    whatsappConfig?: JsonNullableFilter<"NotificationSettings">
    emailConfig?: JsonNullableFilter<"NotificationSettings">
    generalSettings?: JsonNullableFilter<"NotificationSettings">
    isActive?: BoolFilter<"NotificationSettings"> | boolean
    createdAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }, "id" | "branchId">

  export type NotificationSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    smsConfig?: SortOrderInput | SortOrder
    whatsappConfig?: SortOrderInput | SortOrder
    emailConfig?: SortOrderInput | SortOrder
    generalSettings?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationSettingsCountOrderByAggregateInput
    _max?: NotificationSettingsMaxOrderByAggregateInput
    _min?: NotificationSettingsMinOrderByAggregateInput
  }

  export type NotificationSettingsScalarWhereWithAggregatesInput = {
    AND?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    OR?: NotificationSettingsScalarWhereWithAggregatesInput[]
    NOT?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationSettings"> | string
    branchId?: StringWithAggregatesFilter<"NotificationSettings"> | string
    smsConfig?: JsonNullableWithAggregatesFilter<"NotificationSettings">
    whatsappConfig?: JsonNullableWithAggregatesFilter<"NotificationSettings">
    emailConfig?: JsonNullableWithAggregatesFilter<"NotificationSettings">
    generalSettings?: JsonNullableWithAggregatesFilter<"NotificationSettings">
    isActive?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationSettings"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    branch?: BranchCreateNestedOneWithoutUsersInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHourCreateInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutWorkHoursInput
    staff: UserCreateNestedOneWithoutWorkHoursInput
  }

  export type WorkHourUncheckedCreateInput = {
    id?: string
    staffId: string
    branchId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkHourUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutWorkHoursNestedInput
    staff?: UserUpdateOneRequiredWithoutWorkHoursNestedInput
  }

  export type WorkHourUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHourCreateManyInput = {
    id?: string
    staffId: string
    branchId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkHourUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHourUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchCreateInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type BranchCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BranchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customers?: CustomerTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customers?: CustomerTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customers?: CustomerTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customers?: CustomerTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerTagCreateInput = {
    customer: CustomerCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutCustomersInput
  }

  export type CustomerTagUncheckedCreateInput = {
    customerId: string
    tagId: string
  }

  export type CustomerTagUpdateInput = {
    customer?: CustomerUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutCustomersNestedInput
  }

  export type CustomerTagUncheckedUpdateInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerTagCreateManyInput = {
    customerId: string
    tagId: string
  }

  export type CustomerTagUpdateManyMutationInput = {

  }

  export type CustomerTagUncheckedUpdateManyInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutServiceCategoriesInput
    services?: ServiceCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutServiceCategoriesNestedInput
    services?: ServiceUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffServiceCreateInput = {
    user: UserCreateNestedOneWithoutServicesInput
    service: ServiceCreateNestedOneWithoutStaffInput
  }

  export type StaffServiceUncheckedCreateInput = {
    userId: string
    serviceId: string
  }

  export type StaffServiceUpdateInput = {
    user?: UserUpdateOneRequiredWithoutServicesNestedInput
    service?: ServiceUpdateOneRequiredWithoutStaffNestedInput
  }

  export type StaffServiceUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type StaffServiceCreateManyInput = {
    userId: string
    serviceId: string
  }

  export type StaffServiceUpdateManyMutationInput = {

  }

  export type StaffServiceUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    branch: BranchCreateNestedOneWithoutAppointmentsInput
    invoice?: InvoiceCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    branch?: BranchUpdateOneRequiredWithoutAppointmentsNestedInput
    invoice?: InvoiceUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageCreateInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutPackagesInput
    services?: PackageServiceCreateNestedManyWithoutPackageInput
    customerPackages?: CustomerPackageCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    branchId: string
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: PackageServiceUncheckedCreateNestedManyWithoutPackageInput
    customerPackages?: CustomerPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutPackagesNestedInput
    services?: PackageServiceUpdateManyWithoutPackageNestedInput
    customerPackages?: CustomerPackageUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: PackageServiceUncheckedUpdateManyWithoutPackageNestedInput
    customerPackages?: CustomerPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    branchId: string
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageServiceCreateInput = {
    quantity: number
    package: PackageCreateNestedOneWithoutServicesInput
    service: ServiceCreateNestedOneWithoutPackagesInput
  }

  export type PackageServiceUncheckedCreateInput = {
    packageId: string
    serviceId: string
    quantity: number
  }

  export type PackageServiceUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    package?: PackageUpdateOneRequiredWithoutServicesNestedInput
    service?: ServiceUpdateOneRequiredWithoutPackagesNestedInput
  }

  export type PackageServiceUncheckedUpdateInput = {
    packageId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PackageServiceCreateManyInput = {
    packageId: string
    serviceId: string
    quantity: number
  }

  export type PackageServiceUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PackageServiceUncheckedUpdateManyInput = {
    packageId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerPackageCreateInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutPackagesInput
    package: PackageCreateNestedOneWithoutCustomerPackagesInput
    invoice?: InvoiceCreateNestedOneWithoutCustomerPackageInput
  }

  export type CustomerPackageUncheckedCreateInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    customerId: string
    packageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutCustomerPackageInput
  }

  export type CustomerPackageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutPackagesNestedInput
    package?: PackageUpdateOneRequiredWithoutCustomerPackagesNestedInput
    invoice?: InvoiceUpdateOneWithoutCustomerPackageNestedInput
  }

  export type CustomerPackageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutCustomerPackageNestedInput
  }

  export type CustomerPackageCreateManyInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    customerId: string
    packageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerPackageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPackageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    branch: BranchCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutPaymentsInput
    cashLog?: CashRegisterLogCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    invoiceId: string
    cashRegisterLogId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutPaymentsNestedInput
    cashLog?: CashRegisterLogUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    cashRegisterLogId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    invoiceId: string
    cashRegisterLogId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    cashRegisterLogId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommissionRuleCreateInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCommissionRulesInput
    service?: ServiceCreateNestedOneWithoutCommissionRulesInput
    staff?: UserCreateNestedOneWithoutStaffCommissionRulesInput
    commissionItems?: CommissionItemCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    serviceId?: string | null
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCommissionRulesNestedInput
    service?: ServiceUpdateOneWithoutCommissionRulesNestedInput
    staff?: UserUpdateOneWithoutStaffCommissionRulesNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    serviceId?: string | null
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommissionRuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommissionRuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommissionItemCreateInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutCommissionItemsInput
    service?: ServiceCreateNestedOneWithoutCommissionItemsInput
    commissions?: StaffCommissionCreateNestedManyWithoutCommissionItemInput
    appliedRule?: CommissionRuleCreateNestedOneWithoutCommissionItemsInput
  }

  export type CommissionItemUncheckedCreateInput = {
    id?: string
    invoiceId: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutCommissionItemInput
  }

  export type CommissionItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutCommissionItemsNestedInput
    service?: ServiceUpdateOneWithoutCommissionItemsNestedInput
    commissions?: StaffCommissionUpdateManyWithoutCommissionItemNestedInput
    appliedRule?: CommissionRuleUpdateOneWithoutCommissionItemsNestedInput
  }

  export type CommissionItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissions?: StaffCommissionUncheckedUpdateManyWithoutCommissionItemNestedInput
  }

  export type CommissionItemCreateManyInput = {
    id?: string
    invoiceId: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommissionItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommissionItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCommissionCreateInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    staff: UserCreateNestedOneWithoutCommissionsInput
    commissionItem: CommissionItemCreateNestedOneWithoutCommissionsInput
    invoice: InvoiceCreateNestedOneWithoutStaffCommissionInput
    service?: ServiceCreateNestedOneWithoutStaffCommissionInput
  }

  export type StaffCommissionUncheckedCreateInput = {
    id?: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
    serviceId?: string | null
  }

  export type StaffCommissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    staff?: UserUpdateOneRequiredWithoutCommissionsNestedInput
    commissionItem?: CommissionItemUpdateOneRequiredWithoutCommissionsNestedInput
    invoice?: InvoiceUpdateOneRequiredWithoutStaffCommissionNestedInput
    service?: ServiceUpdateOneWithoutStaffCommissionNestedInput
  }

  export type StaffCommissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffCommissionCreateManyInput = {
    id?: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
    serviceId?: string | null
  }

  export type StaffCommissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffCommissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashRegisterLogCreateInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    branch: BranchCreateNestedOneWithoutCashRegisterLogInput
    user: UserCreateNestedOneWithoutCashRegisterLogInput
    payments?: PaymentCreateNestedManyWithoutCashLogInput
  }

  export type CashRegisterLogUncheckedCreateInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    branchId: string
    userId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    payments?: PaymentUncheckedCreateNestedManyWithoutCashLogInput
  }

  export type CashRegisterLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    branch?: BranchUpdateOneRequiredWithoutCashRegisterLogNestedInput
    user?: UserUpdateOneRequiredWithoutCashRegisterLogNestedInput
    payments?: PaymentUpdateManyWithoutCashLogNestedInput
  }

  export type CashRegisterLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    payments?: PaymentUncheckedUpdateManyWithoutCashLogNestedInput
  }

  export type CashRegisterLogCreateManyInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    branchId: string
    userId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
  }

  export type CashRegisterLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
  }

  export type CashRegisterLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
  }

  export type NotificationProviderCreateInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    config: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationProvidersInput
  }

  export type NotificationProviderUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    config: JsonNullValueInput | InputJsonValue
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationProvidersNestedInput
  }

  export type NotificationProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationProviderCreateManyInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    config: JsonNullValueInput | InputJsonValue
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTemplateCreateInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationTemplatesInput
    triggers?: NotificationTriggerCreateNestedManyWithoutTemplateInput
    queue?: NotificationQueueCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    triggers?: NotificationTriggerUncheckedCreateNestedManyWithoutTemplateInput
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationTemplatesNestedInput
    triggers?: NotificationTriggerUpdateManyWithoutTemplateNestedInput
    queue?: NotificationQueueUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triggers?: NotificationTriggerUncheckedUpdateManyWithoutTemplateNestedInput
    queue?: NotificationQueueUncheckedUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateCreateManyInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTriggerCreateInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: NotificationTemplateCreateNestedOneWithoutTriggersInput
    branch: BranchCreateNestedOneWithoutNotificationTriggersInput
    queue?: NotificationQueueCreateNestedManyWithoutTriggerInput
    history?: NotificationHistoryCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerUncheckedCreateInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    templateId: string
    branchId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTriggerInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: NotificationTemplateUpdateOneRequiredWithoutTriggersNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationTriggersNestedInput
    queue?: NotificationQueueUpdateManyWithoutTriggerNestedInput
    history?: NotificationHistoryUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: NotificationQueueUncheckedUpdateManyWithoutTriggerNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerCreateManyInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    templateId: string
    branchId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationTriggerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTriggerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueCreateInput = {
    id?: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationQueueInput
    template: NotificationTemplateCreateNestedOneWithoutQueueInput
    trigger?: NotificationTriggerCreateNestedOneWithoutQueueInput
    branch: BranchCreateNestedOneWithoutNotificationQueueInput
  }

  export type NotificationQueueUncheckedCreateInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationQueueNestedInput
    template?: NotificationTemplateUpdateOneRequiredWithoutQueueNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutQueueNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationQueueNestedInput
  }

  export type NotificationQueueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueCreateManyInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryCreateInput = {
    id?: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationHistoryInput
    template: NotificationTemplateCreateNestedOneWithoutHistoryInput
    trigger?: NotificationTriggerCreateNestedOneWithoutHistoryInput
    branch: BranchCreateNestedOneWithoutNotificationHistoryInput
  }

  export type NotificationHistoryUncheckedCreateInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationHistoryNestedInput
    template?: NotificationTemplateUpdateOneRequiredWithoutHistoryNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutHistoryNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationHistoryNestedInput
  }

  export type NotificationHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryCreateManyInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsCreateInput = {
    id?: string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationSettingsInput
  }

  export type NotificationSettingsUncheckedCreateInput = {
    id?: string
    branchId: string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationSettingsNestedInput
  }

  export type NotificationSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsCreateManyInput = {
    id?: string
    branchId: string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type CashRegisterLogListRelationFilter = {
    every?: CashRegisterLogWhereInput
    some?: CashRegisterLogWhereInput
    none?: CashRegisterLogWhereInput
  }

  export type CommissionRuleListRelationFilter = {
    every?: CommissionRuleWhereInput
    some?: CommissionRuleWhereInput
    none?: CommissionRuleWhereInput
  }

  export type StaffCommissionListRelationFilter = {
    every?: StaffCommissionWhereInput
    some?: StaffCommissionWhereInput
    none?: StaffCommissionWhereInput
  }

  export type StaffServiceListRelationFilter = {
    every?: StaffServiceWhereInput
    some?: StaffServiceWhereInput
    none?: StaffServiceWhereInput
  }

  export type BranchNullableScalarRelationFilter = {
    is?: BranchWhereInput | null
    isNot?: BranchWhereInput | null
  }

  export type WorkHourListRelationFilter = {
    every?: WorkHourWhereInput
    some?: WorkHourWhereInput
    none?: WorkHourWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CashRegisterLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommissionRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffCommissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkHourOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BranchScalarRelationFilter = {
    is?: BranchWhereInput
    isNot?: BranchWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WorkHourStaffIdBranchIdDayOfWeekCompoundUniqueInput = {
    staffId: string
    branchId: string
    dayOfWeek: number
  }

  export type WorkHourCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isOff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkHourAvgOrderByAggregateInput = {
    dayOfWeek?: SortOrder
  }

  export type WorkHourMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isOff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkHourMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isOff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkHourSumOrderByAggregateInput = {
    dayOfWeek?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BranchListRelationFilter = {
    every?: BranchWhereInput
    some?: BranchWhereInput
    none?: BranchWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type PackageListRelationFilter = {
    every?: PackageWhereInput
    some?: PackageWhereInput
    none?: PackageWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type ServiceCategoryListRelationFilter = {
    every?: ServiceCategoryWhereInput
    some?: ServiceCategoryWhereInput
    none?: ServiceCategoryWhereInput
  }

  export type NotificationProviderListRelationFilter = {
    every?: NotificationProviderWhereInput
    some?: NotificationProviderWhereInput
    none?: NotificationProviderWhereInput
  }

  export type NotificationTemplateListRelationFilter = {
    every?: NotificationTemplateWhereInput
    some?: NotificationTemplateWhereInput
    none?: NotificationTemplateWhereInput
  }

  export type NotificationTriggerListRelationFilter = {
    every?: NotificationTriggerWhereInput
    some?: NotificationTriggerWhereInput
    none?: NotificationTriggerWhereInput
  }

  export type NotificationQueueListRelationFilter = {
    every?: NotificationQueueWhereInput
    some?: NotificationQueueWhereInput
    none?: NotificationQueueWhereInput
  }

  export type NotificationHistoryListRelationFilter = {
    every?: NotificationHistoryWhereInput
    some?: NotificationHistoryWhereInput
    none?: NotificationHistoryWhereInput
  }

  export type NotificationSettingsNullableScalarRelationFilter = {
    is?: NotificationSettingsWhereInput | null
    isNot?: NotificationSettingsWhereInput | null
  }

  export type BranchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationTriggerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationQueueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BranchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    parentBranchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    parentBranchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    parentBranchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CustomerPackageListRelationFilter = {
    every?: CustomerPackageWhereInput
    some?: CustomerPackageWhereInput
    none?: CustomerPackageWhereInput
  }

  export type CustomerTagListRelationFilter = {
    every?: CustomerTagWhereInput
    some?: CustomerTagWhereInput
    none?: CustomerTagWhereInput
  }

  export type CustomerPackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    notes?: SortOrder
    branchId?: SortOrder
    discountRate?: SortOrder
    creditBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    discountRate?: SortOrder
    creditBalance?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    notes?: SortOrder
    branchId?: SortOrder
    discountRate?: SortOrder
    creditBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    notes?: SortOrder
    branchId?: SortOrder
    discountRate?: SortOrder
    creditBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    discountRate?: SortOrder
    creditBalance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type CustomerTagCustomerIdTagIdCompoundUniqueInput = {
    customerId: string
    tagId: string
  }

  export type CustomerTagCountOrderByAggregateInput = {
    customerId?: SortOrder
    tagId?: SortOrder
  }

  export type CustomerTagMaxOrderByAggregateInput = {
    customerId?: SortOrder
    tagId?: SortOrder
  }

  export type CustomerTagMinOrderByAggregateInput = {
    customerId?: SortOrder
    tagId?: SortOrder
  }

  export type ServiceCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryScalarRelationFilter = {
    is?: ServiceCategoryWhereInput
    isNot?: ServiceCategoryWhereInput
  }

  export type PackageServiceListRelationFilter = {
    every?: PackageServiceWhereInput
    some?: PackageServiceWhereInput
    none?: PackageServiceWhereInput
  }

  export type CommissionItemListRelationFilter = {
    every?: CommissionItemWhereInput
    some?: CommissionItemWhereInput
    none?: CommissionItemWhereInput
  }

  export type PackageServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommissionItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    price?: SortOrder
    duration?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    price?: SortOrder
    duration?: SortOrder
  }

  export type ServiceScalarRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type StaffServiceUserIdServiceIdCompoundUniqueInput = {
    userId: string
    serviceId: string
  }

  export type StaffServiceCountOrderByAggregateInput = {
    userId?: SortOrder
    serviceId?: SortOrder
  }

  export type StaffServiceMaxOrderByAggregateInput = {
    userId?: SortOrder
    serviceId?: SortOrder
  }

  export type StaffServiceMinOrderByAggregateInput = {
    userId?: SortOrder
    serviceId?: SortOrder
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type InvoiceNullableScalarRelationFilter = {
    is?: InvoiceWhereInput | null
    isNot?: InvoiceWhereInput | null
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    customerId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    customerId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    customerId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type EnumPackageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageType | EnumPackageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageTypeFilter<$PrismaModel> | $Enums.PackageType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    totalSessions?: SortOrder
    totalMinutes?: SortOrder
    validityDays?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    commissionRate?: SortOrder
    commissionFixed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    price?: SortOrder
    totalSessions?: SortOrder
    totalMinutes?: SortOrder
    validityDays?: SortOrder
    commissionRate?: SortOrder
    commissionFixed?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    totalSessions?: SortOrder
    totalMinutes?: SortOrder
    validityDays?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    commissionRate?: SortOrder
    commissionFixed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    totalSessions?: SortOrder
    totalMinutes?: SortOrder
    validityDays?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    commissionRate?: SortOrder
    commissionFixed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    price?: SortOrder
    totalSessions?: SortOrder
    totalMinutes?: SortOrder
    validityDays?: SortOrder
    commissionRate?: SortOrder
    commissionFixed?: SortOrder
  }

  export type EnumPackageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageType | EnumPackageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageTypeWithAggregatesFilter<$PrismaModel> | $Enums.PackageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackageTypeFilter<$PrismaModel>
    _max?: NestedEnumPackageTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PackageScalarRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type PackageServicePackageIdServiceIdCompoundUniqueInput = {
    packageId: string
    serviceId: string
  }

  export type PackageServiceCountOrderByAggregateInput = {
    packageId?: SortOrder
    serviceId?: SortOrder
    quantity?: SortOrder
  }

  export type PackageServiceAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type PackageServiceMaxOrderByAggregateInput = {
    packageId?: SortOrder
    serviceId?: SortOrder
    quantity?: SortOrder
  }

  export type PackageServiceMinOrderByAggregateInput = {
    packageId?: SortOrder
    serviceId?: SortOrder
    quantity?: SortOrder
  }

  export type PackageServiceSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CustomerPackageCountOrderByAggregateInput = {
    id?: SortOrder
    purchaseDate?: SortOrder
    expiryDate?: SortOrder
    remainingSessions?: SortOrder
    notes?: SortOrder
    salesCode?: SortOrder
    customerId?: SortOrder
    packageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPackageMaxOrderByAggregateInput = {
    id?: SortOrder
    purchaseDate?: SortOrder
    expiryDate?: SortOrder
    notes?: SortOrder
    salesCode?: SortOrder
    customerId?: SortOrder
    packageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPackageMinOrderByAggregateInput = {
    id?: SortOrder
    purchaseDate?: SortOrder
    expiryDate?: SortOrder
    notes?: SortOrder
    salesCode?: SortOrder
    customerId?: SortOrder
    packageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type AppointmentNullableScalarRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type CustomerPackageNullableScalarRelationFilter = {
    is?: CustomerPackageWhereInput | null
    isNot?: CustomerPackageWhereInput | null
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointmentId?: SortOrder
    customerPackageId?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointmentId?: SortOrder
    customerPackageId?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    branchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointmentId?: SortOrder
    customerPackageId?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    totalAmount?: SortOrder
    amountPaid?: SortOrder
    debt?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type CashRegisterLogNullableScalarRelationFilter = {
    is?: CashRegisterLogWhereInput | null
    isNot?: CashRegisterLogWhereInput | null
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    paymentDate?: SortOrder
    invoiceId?: SortOrder
    cashRegisterLogId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    paymentDate?: SortOrder
    invoiceId?: SortOrder
    cashRegisterLogId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    paymentDate?: SortOrder
    invoiceId?: SortOrder
    cashRegisterLogId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumCommissionRuleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionRuleType | EnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionRuleTypeFilter<$PrismaModel> | $Enums.CommissionRuleType
  }

  export type EnumCommissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeFilter<$PrismaModel> | $Enums.CommissionType
  }

  export type ServiceNullableScalarRelationFilter = {
    is?: ServiceWhereInput | null
    isNot?: ServiceWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CommissionRuleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ruleType?: SortOrder
    type?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    branchId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommissionRuleAvgOrderByAggregateInput = {
    rate?: SortOrder
    fixedAmount?: SortOrder
  }

  export type CommissionRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ruleType?: SortOrder
    type?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    branchId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommissionRuleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ruleType?: SortOrder
    type?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    branchId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommissionRuleSumOrderByAggregateInput = {
    rate?: SortOrder
    fixedAmount?: SortOrder
  }

  export type EnumCommissionRuleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionRuleType | EnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionRuleTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommissionRuleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionRuleTypeFilter<$PrismaModel>
    _max?: NestedEnumCommissionRuleTypeFilter<$PrismaModel>
  }

  export type EnumCommissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionTypeFilter<$PrismaModel>
    _max?: NestedEnumCommissionTypeFilter<$PrismaModel>
  }

  export type EnumCommissionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionStatus | EnumCommissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionStatusFilter<$PrismaModel> | $Enums.CommissionStatus
  }

  export type CommissionRuleNullableScalarRelationFilter = {
    is?: CommissionRuleWhereInput | null
    isNot?: CommissionRuleWhereInput | null
  }

  export type CommissionItemCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    appliedRuleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommissionItemAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CommissionItemMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    appliedRuleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommissionItemMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    appliedRuleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommissionItemSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumCommissionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionStatus | EnumCommissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionStatusWithAggregatesFilter<$PrismaModel> | $Enums.CommissionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionStatusFilter<$PrismaModel>
    _max?: NestedEnumCommissionStatusFilter<$PrismaModel>
  }

  export type CommissionItemScalarRelationFilter = {
    is?: CommissionItemWhereInput
    isNot?: CommissionItemWhereInput
  }

  export type StaffCommissionCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    commissionItemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appliedRuleId?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrder
  }

  export type StaffCommissionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type StaffCommissionMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    commissionItemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appliedRuleId?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrder
  }

  export type StaffCommissionMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    commissionItemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appliedRuleId?: SortOrder
    invoiceId?: SortOrder
    serviceId?: SortOrder
  }

  export type StaffCommissionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumCashLogTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CashLogType | EnumCashLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCashLogTypeFilter<$PrismaModel> | $Enums.CashLogType
  }

  export type EnumCashMovementCategoryNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CashMovementCategory | EnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCashMovementCategoryNullableFilter<$PrismaModel> | $Enums.CashMovementCategory | null
  }

  export type CashRegisterLogCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    category?: SortOrder
  }

  export type CashRegisterLogAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CashRegisterLogMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    category?: SortOrder
  }

  export type CashRegisterLogMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    branchId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    category?: SortOrder
  }

  export type CashRegisterLogSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumCashLogTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CashLogType | EnumCashLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCashLogTypeWithAggregatesFilter<$PrismaModel> | $Enums.CashLogType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCashLogTypeFilter<$PrismaModel>
    _max?: NestedEnumCashLogTypeFilter<$PrismaModel>
  }

  export type EnumCashMovementCategoryNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CashMovementCategory | EnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCashMovementCategoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.CashMovementCategory | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCashMovementCategoryNullableFilter<$PrismaModel>
    _max?: NestedEnumCashMovementCategoryNullableFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NotificationProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    config?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type NotificationTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    variables?: SortOrder
    language?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    language?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    language?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationEventType | EnumNotificationEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationEventTypeFilter<$PrismaModel> | $Enums.NotificationEventType
  }

  export type NotificationTemplateScalarRelationFilter = {
    is?: NotificationTemplateWhereInput
    isNot?: NotificationTemplateWhereInput
  }

  export type NotificationTriggerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventType?: SortOrder
    conditions?: SortOrder
    templateId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    schedule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTriggerAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type NotificationTriggerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventType?: SortOrder
    templateId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    schedule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTriggerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventType?: SortOrder
    templateId?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    schedule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTriggerSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumNotificationEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationEventType | EnumNotificationEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationEventTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationEventTypeFilter<$PrismaModel>
  }

  export type EnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type NotificationTriggerNullableScalarRelationFilter = {
    is?: NotificationTriggerWhereInput | null
    isNot?: NotificationTriggerWhereInput | null
  }

  export type NotificationQueueCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrder
    branchId?: SortOrder
    status?: SortOrder
    data?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrder
    errorMessage?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationQueueAvgOrderByAggregateInput = {
    retryCount?: SortOrder
  }

  export type NotificationQueueMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrder
    branchId?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrder
    errorMessage?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationQueueMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrder
    branchId?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrder
    errorMessage?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationQueueSumOrderByAggregateInput = {
    retryCount?: SortOrder
  }

  export type EnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type EnumNotificationDeliveryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationDeliveryStatus | EnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationDeliveryStatusFilter<$PrismaModel> | $Enums.NotificationDeliveryStatus
  }

  export type NotificationHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    cost?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationHistoryAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type NotificationHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    content?: SortOrder
    cost?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    templateId?: SortOrder
    triggerId?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    content?: SortOrder
    cost?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationHistorySumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type EnumNotificationDeliveryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationDeliveryStatus | EnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationDeliveryStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationDeliveryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationDeliveryStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationDeliveryStatusFilter<$PrismaModel>
  }

  export type NotificationSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    smsConfig?: SortOrder
    whatsappConfig?: SortOrder
    emailConfig?: SortOrder
    generalSettings?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentCreateNestedManyWithoutStaffInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CashRegisterLogCreateNestedManyWithoutUserInput = {
    create?: XOR<CashRegisterLogCreateWithoutUserInput, CashRegisterLogUncheckedCreateWithoutUserInput> | CashRegisterLogCreateWithoutUserInput[] | CashRegisterLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutUserInput | CashRegisterLogCreateOrConnectWithoutUserInput[]
    createMany?: CashRegisterLogCreateManyUserInputEnvelope
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
  }

  export type CommissionRuleCreateNestedManyWithoutStaffInput = {
    create?: XOR<CommissionRuleCreateWithoutStaffInput, CommissionRuleUncheckedCreateWithoutStaffInput> | CommissionRuleCreateWithoutStaffInput[] | CommissionRuleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutStaffInput | CommissionRuleCreateOrConnectWithoutStaffInput[]
    createMany?: CommissionRuleCreateManyStaffInputEnvelope
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
  }

  export type StaffCommissionCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffCommissionCreateWithoutStaffInput, StaffCommissionUncheckedCreateWithoutStaffInput> | StaffCommissionCreateWithoutStaffInput[] | StaffCommissionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutStaffInput | StaffCommissionCreateOrConnectWithoutStaffInput[]
    createMany?: StaffCommissionCreateManyStaffInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type StaffServiceCreateNestedManyWithoutUserInput = {
    create?: XOR<StaffServiceCreateWithoutUserInput, StaffServiceUncheckedCreateWithoutUserInput> | StaffServiceCreateWithoutUserInput[] | StaffServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutUserInput | StaffServiceCreateOrConnectWithoutUserInput[]
    createMany?: StaffServiceCreateManyUserInputEnvelope
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
  }

  export type BranchCreateNestedOneWithoutUsersInput = {
    create?: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutUsersInput
    connect?: BranchWhereUniqueInput
  }

  export type WorkHourCreateNestedManyWithoutStaffInput = {
    create?: XOR<WorkHourCreateWithoutStaffInput, WorkHourUncheckedCreateWithoutStaffInput> | WorkHourCreateWithoutStaffInput[] | WorkHourUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutStaffInput | WorkHourCreateOrConnectWithoutStaffInput[]
    createMany?: WorkHourCreateManyStaffInputEnvelope
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CashRegisterLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CashRegisterLogCreateWithoutUserInput, CashRegisterLogUncheckedCreateWithoutUserInput> | CashRegisterLogCreateWithoutUserInput[] | CashRegisterLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutUserInput | CashRegisterLogCreateOrConnectWithoutUserInput[]
    createMany?: CashRegisterLogCreateManyUserInputEnvelope
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
  }

  export type CommissionRuleUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<CommissionRuleCreateWithoutStaffInput, CommissionRuleUncheckedCreateWithoutStaffInput> | CommissionRuleCreateWithoutStaffInput[] | CommissionRuleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutStaffInput | CommissionRuleCreateOrConnectWithoutStaffInput[]
    createMany?: CommissionRuleCreateManyStaffInputEnvelope
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
  }

  export type StaffCommissionUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffCommissionCreateWithoutStaffInput, StaffCommissionUncheckedCreateWithoutStaffInput> | StaffCommissionCreateWithoutStaffInput[] | StaffCommissionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutStaffInput | StaffCommissionCreateOrConnectWithoutStaffInput[]
    createMany?: StaffCommissionCreateManyStaffInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type StaffServiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StaffServiceCreateWithoutUserInput, StaffServiceUncheckedCreateWithoutUserInput> | StaffServiceCreateWithoutUserInput[] | StaffServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutUserInput | StaffServiceCreateOrConnectWithoutUserInput[]
    createMany?: StaffServiceCreateManyUserInputEnvelope
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
  }

  export type WorkHourUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<WorkHourCreateWithoutStaffInput, WorkHourUncheckedCreateWithoutStaffInput> | WorkHourCreateWithoutStaffInput[] | WorkHourUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutStaffInput | WorkHourCreateOrConnectWithoutStaffInput[]
    createMany?: WorkHourCreateManyStaffInputEnvelope
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AppointmentUpdateManyWithoutStaffNestedInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutStaffInput | AppointmentUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutStaffInput | AppointmentUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutStaffInput | AppointmentUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CashRegisterLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<CashRegisterLogCreateWithoutUserInput, CashRegisterLogUncheckedCreateWithoutUserInput> | CashRegisterLogCreateWithoutUserInput[] | CashRegisterLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutUserInput | CashRegisterLogCreateOrConnectWithoutUserInput[]
    upsert?: CashRegisterLogUpsertWithWhereUniqueWithoutUserInput | CashRegisterLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CashRegisterLogCreateManyUserInputEnvelope
    set?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    disconnect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    delete?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    update?: CashRegisterLogUpdateWithWhereUniqueWithoutUserInput | CashRegisterLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CashRegisterLogUpdateManyWithWhereWithoutUserInput | CashRegisterLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CashRegisterLogScalarWhereInput | CashRegisterLogScalarWhereInput[]
  }

  export type CommissionRuleUpdateManyWithoutStaffNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutStaffInput, CommissionRuleUncheckedCreateWithoutStaffInput> | CommissionRuleCreateWithoutStaffInput[] | CommissionRuleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutStaffInput | CommissionRuleCreateOrConnectWithoutStaffInput[]
    upsert?: CommissionRuleUpsertWithWhereUniqueWithoutStaffInput | CommissionRuleUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: CommissionRuleCreateManyStaffInputEnvelope
    set?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    disconnect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    delete?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    update?: CommissionRuleUpdateWithWhereUniqueWithoutStaffInput | CommissionRuleUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: CommissionRuleUpdateManyWithWhereWithoutStaffInput | CommissionRuleUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
  }

  export type StaffCommissionUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutStaffInput, StaffCommissionUncheckedCreateWithoutStaffInput> | StaffCommissionCreateWithoutStaffInput[] | StaffCommissionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutStaffInput | StaffCommissionCreateOrConnectWithoutStaffInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutStaffInput | StaffCommissionUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffCommissionCreateManyStaffInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutStaffInput | StaffCommissionUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutStaffInput | StaffCommissionUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type StaffServiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<StaffServiceCreateWithoutUserInput, StaffServiceUncheckedCreateWithoutUserInput> | StaffServiceCreateWithoutUserInput[] | StaffServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutUserInput | StaffServiceCreateOrConnectWithoutUserInput[]
    upsert?: StaffServiceUpsertWithWhereUniqueWithoutUserInput | StaffServiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StaffServiceCreateManyUserInputEnvelope
    set?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    disconnect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    delete?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    update?: StaffServiceUpdateWithWhereUniqueWithoutUserInput | StaffServiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StaffServiceUpdateManyWithWhereWithoutUserInput | StaffServiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StaffServiceScalarWhereInput | StaffServiceScalarWhereInput[]
  }

  export type BranchUpdateOneWithoutUsersNestedInput = {
    create?: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutUsersInput
    upsert?: BranchUpsertWithoutUsersInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutUsersInput, BranchUpdateWithoutUsersInput>, BranchUncheckedUpdateWithoutUsersInput>
  }

  export type WorkHourUpdateManyWithoutStaffNestedInput = {
    create?: XOR<WorkHourCreateWithoutStaffInput, WorkHourUncheckedCreateWithoutStaffInput> | WorkHourCreateWithoutStaffInput[] | WorkHourUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutStaffInput | WorkHourCreateOrConnectWithoutStaffInput[]
    upsert?: WorkHourUpsertWithWhereUniqueWithoutStaffInput | WorkHourUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: WorkHourCreateManyStaffInputEnvelope
    set?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    disconnect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    delete?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    update?: WorkHourUpdateWithWhereUniqueWithoutStaffInput | WorkHourUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: WorkHourUpdateManyWithWhereWithoutStaffInput | WorkHourUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: WorkHourScalarWhereInput | WorkHourScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutStaffInput | AppointmentUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutStaffInput | AppointmentUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutStaffInput | AppointmentUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CashRegisterLogCreateWithoutUserInput, CashRegisterLogUncheckedCreateWithoutUserInput> | CashRegisterLogCreateWithoutUserInput[] | CashRegisterLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutUserInput | CashRegisterLogCreateOrConnectWithoutUserInput[]
    upsert?: CashRegisterLogUpsertWithWhereUniqueWithoutUserInput | CashRegisterLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CashRegisterLogCreateManyUserInputEnvelope
    set?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    disconnect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    delete?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    update?: CashRegisterLogUpdateWithWhereUniqueWithoutUserInput | CashRegisterLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CashRegisterLogUpdateManyWithWhereWithoutUserInput | CashRegisterLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CashRegisterLogScalarWhereInput | CashRegisterLogScalarWhereInput[]
  }

  export type CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutStaffInput, CommissionRuleUncheckedCreateWithoutStaffInput> | CommissionRuleCreateWithoutStaffInput[] | CommissionRuleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutStaffInput | CommissionRuleCreateOrConnectWithoutStaffInput[]
    upsert?: CommissionRuleUpsertWithWhereUniqueWithoutStaffInput | CommissionRuleUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: CommissionRuleCreateManyStaffInputEnvelope
    set?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    disconnect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    delete?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    update?: CommissionRuleUpdateWithWhereUniqueWithoutStaffInput | CommissionRuleUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: CommissionRuleUpdateManyWithWhereWithoutStaffInput | CommissionRuleUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
  }

  export type StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutStaffInput, StaffCommissionUncheckedCreateWithoutStaffInput> | StaffCommissionCreateWithoutStaffInput[] | StaffCommissionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutStaffInput | StaffCommissionCreateOrConnectWithoutStaffInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutStaffInput | StaffCommissionUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffCommissionCreateManyStaffInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutStaffInput | StaffCommissionUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutStaffInput | StaffCommissionUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type StaffServiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StaffServiceCreateWithoutUserInput, StaffServiceUncheckedCreateWithoutUserInput> | StaffServiceCreateWithoutUserInput[] | StaffServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutUserInput | StaffServiceCreateOrConnectWithoutUserInput[]
    upsert?: StaffServiceUpsertWithWhereUniqueWithoutUserInput | StaffServiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StaffServiceCreateManyUserInputEnvelope
    set?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    disconnect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    delete?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    update?: StaffServiceUpdateWithWhereUniqueWithoutUserInput | StaffServiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StaffServiceUpdateManyWithWhereWithoutUserInput | StaffServiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StaffServiceScalarWhereInput | StaffServiceScalarWhereInput[]
  }

  export type WorkHourUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<WorkHourCreateWithoutStaffInput, WorkHourUncheckedCreateWithoutStaffInput> | WorkHourCreateWithoutStaffInput[] | WorkHourUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutStaffInput | WorkHourCreateOrConnectWithoutStaffInput[]
    upsert?: WorkHourUpsertWithWhereUniqueWithoutStaffInput | WorkHourUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: WorkHourCreateManyStaffInputEnvelope
    set?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    disconnect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    delete?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    update?: WorkHourUpdateWithWhereUniqueWithoutStaffInput | WorkHourUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: WorkHourUpdateManyWithWhereWithoutStaffInput | WorkHourUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: WorkHourScalarWhereInput | WorkHourScalarWhereInput[]
  }

  export type BranchCreateNestedOneWithoutWorkHoursInput = {
    create?: XOR<BranchCreateWithoutWorkHoursInput, BranchUncheckedCreateWithoutWorkHoursInput>
    connectOrCreate?: BranchCreateOrConnectWithoutWorkHoursInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkHoursInput = {
    create?: XOR<UserCreateWithoutWorkHoursInput, UserUncheckedCreateWithoutWorkHoursInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkHoursInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BranchUpdateOneRequiredWithoutWorkHoursNestedInput = {
    create?: XOR<BranchCreateWithoutWorkHoursInput, BranchUncheckedCreateWithoutWorkHoursInput>
    connectOrCreate?: BranchCreateOrConnectWithoutWorkHoursInput
    upsert?: BranchUpsertWithoutWorkHoursInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutWorkHoursInput, BranchUpdateWithoutWorkHoursInput>, BranchUncheckedUpdateWithoutWorkHoursInput>
  }

  export type UserUpdateOneRequiredWithoutWorkHoursNestedInput = {
    create?: XOR<UserCreateWithoutWorkHoursInput, UserUncheckedCreateWithoutWorkHoursInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkHoursInput
    upsert?: UserUpsertWithoutWorkHoursInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkHoursInput, UserUpdateWithoutWorkHoursInput>, UserUncheckedUpdateWithoutWorkHoursInput>
  }

  export type AppointmentCreateNestedManyWithoutBranchInput = {
    create?: XOR<AppointmentCreateWithoutBranchInput, AppointmentUncheckedCreateWithoutBranchInput> | AppointmentCreateWithoutBranchInput[] | AppointmentUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutBranchInput | AppointmentCreateOrConnectWithoutBranchInput[]
    createMany?: AppointmentCreateManyBranchInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type BranchCreateNestedOneWithoutSubBranchesInput = {
    create?: XOR<BranchCreateWithoutSubBranchesInput, BranchUncheckedCreateWithoutSubBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutSubBranchesInput
    connect?: BranchWhereUniqueInput
  }

  export type BranchCreateNestedManyWithoutParentBranchInput = {
    create?: XOR<BranchCreateWithoutParentBranchInput, BranchUncheckedCreateWithoutParentBranchInput> | BranchCreateWithoutParentBranchInput[] | BranchUncheckedCreateWithoutParentBranchInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutParentBranchInput | BranchCreateOrConnectWithoutParentBranchInput[]
    createMany?: BranchCreateManyParentBranchInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutBranchInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutBranchInput = {
    create?: XOR<ServiceCreateWithoutBranchInput, ServiceUncheckedCreateWithoutBranchInput> | ServiceCreateWithoutBranchInput[] | ServiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutBranchInput | ServiceCreateOrConnectWithoutBranchInput[]
    createMany?: ServiceCreateManyBranchInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type PackageCreateNestedManyWithoutBranchInput = {
    create?: XOR<PackageCreateWithoutBranchInput, PackageUncheckedCreateWithoutBranchInput> | PackageCreateWithoutBranchInput[] | PackageUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutBranchInput | PackageCreateOrConnectWithoutBranchInput[]
    createMany?: PackageCreateManyBranchInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutBranchInput = {
    create?: XOR<InvoiceCreateWithoutBranchInput, InvoiceUncheckedCreateWithoutBranchInput> | InvoiceCreateWithoutBranchInput[] | InvoiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBranchInput | InvoiceCreateOrConnectWithoutBranchInput[]
    createMany?: InvoiceCreateManyBranchInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutBranchInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type WorkHourCreateNestedManyWithoutBranchInput = {
    create?: XOR<WorkHourCreateWithoutBranchInput, WorkHourUncheckedCreateWithoutBranchInput> | WorkHourCreateWithoutBranchInput[] | WorkHourUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutBranchInput | WorkHourCreateOrConnectWithoutBranchInput[]
    createMany?: WorkHourCreateManyBranchInputEnvelope
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
  }

  export type CashRegisterLogCreateNestedManyWithoutBranchInput = {
    create?: XOR<CashRegisterLogCreateWithoutBranchInput, CashRegisterLogUncheckedCreateWithoutBranchInput> | CashRegisterLogCreateWithoutBranchInput[] | CashRegisterLogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutBranchInput | CashRegisterLogCreateOrConnectWithoutBranchInput[]
    createMany?: CashRegisterLogCreateManyBranchInputEnvelope
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
  }

  export type CommissionRuleCreateNestedManyWithoutBranchInput = {
    create?: XOR<CommissionRuleCreateWithoutBranchInput, CommissionRuleUncheckedCreateWithoutBranchInput> | CommissionRuleCreateWithoutBranchInput[] | CommissionRuleUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutBranchInput | CommissionRuleCreateOrConnectWithoutBranchInput[]
    createMany?: CommissionRuleCreateManyBranchInputEnvelope
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
  }

  export type ServiceCategoryCreateNestedManyWithoutBranchInput = {
    create?: XOR<ServiceCategoryCreateWithoutBranchInput, ServiceCategoryUncheckedCreateWithoutBranchInput> | ServiceCategoryCreateWithoutBranchInput[] | ServiceCategoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutBranchInput | ServiceCategoryCreateOrConnectWithoutBranchInput[]
    createMany?: ServiceCategoryCreateManyBranchInputEnvelope
    connect?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
  }

  export type NotificationProviderCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationProviderCreateWithoutBranchInput, NotificationProviderUncheckedCreateWithoutBranchInput> | NotificationProviderCreateWithoutBranchInput[] | NotificationProviderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationProviderCreateOrConnectWithoutBranchInput | NotificationProviderCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationProviderCreateManyBranchInputEnvelope
    connect?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
  }

  export type NotificationTemplateCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationTemplateCreateWithoutBranchInput, NotificationTemplateUncheckedCreateWithoutBranchInput> | NotificationTemplateCreateWithoutBranchInput[] | NotificationTemplateUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutBranchInput | NotificationTemplateCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationTemplateCreateManyBranchInputEnvelope
    connect?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
  }

  export type NotificationTriggerCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationTriggerCreateWithoutBranchInput, NotificationTriggerUncheckedCreateWithoutBranchInput> | NotificationTriggerCreateWithoutBranchInput[] | NotificationTriggerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutBranchInput | NotificationTriggerCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationTriggerCreateManyBranchInputEnvelope
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
  }

  export type NotificationQueueCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationQueueCreateWithoutBranchInput, NotificationQueueUncheckedCreateWithoutBranchInput> | NotificationQueueCreateWithoutBranchInput[] | NotificationQueueUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutBranchInput | NotificationQueueCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationQueueCreateManyBranchInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationHistoryCreateWithoutBranchInput, NotificationHistoryUncheckedCreateWithoutBranchInput> | NotificationHistoryCreateWithoutBranchInput[] | NotificationHistoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutBranchInput | NotificationHistoryCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationHistoryCreateManyBranchInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type NotificationSettingsCreateNestedOneWithoutBranchInput = {
    create?: XOR<NotificationSettingsCreateWithoutBranchInput, NotificationSettingsUncheckedCreateWithoutBranchInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutBranchInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type AppointmentUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<AppointmentCreateWithoutBranchInput, AppointmentUncheckedCreateWithoutBranchInput> | AppointmentCreateWithoutBranchInput[] | AppointmentUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutBranchInput | AppointmentCreateOrConnectWithoutBranchInput[]
    createMany?: AppointmentCreateManyBranchInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type BranchUncheckedCreateNestedManyWithoutParentBranchInput = {
    create?: XOR<BranchCreateWithoutParentBranchInput, BranchUncheckedCreateWithoutParentBranchInput> | BranchCreateWithoutParentBranchInput[] | BranchUncheckedCreateWithoutParentBranchInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutParentBranchInput | BranchCreateOrConnectWithoutParentBranchInput[]
    createMany?: BranchCreateManyParentBranchInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<ServiceCreateWithoutBranchInput, ServiceUncheckedCreateWithoutBranchInput> | ServiceCreateWithoutBranchInput[] | ServiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutBranchInput | ServiceCreateOrConnectWithoutBranchInput[]
    createMany?: ServiceCreateManyBranchInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<PackageCreateWithoutBranchInput, PackageUncheckedCreateWithoutBranchInput> | PackageCreateWithoutBranchInput[] | PackageUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutBranchInput | PackageCreateOrConnectWithoutBranchInput[]
    createMany?: PackageCreateManyBranchInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<InvoiceCreateWithoutBranchInput, InvoiceUncheckedCreateWithoutBranchInput> | InvoiceCreateWithoutBranchInput[] | InvoiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBranchInput | InvoiceCreateOrConnectWithoutBranchInput[]
    createMany?: InvoiceCreateManyBranchInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type WorkHourUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<WorkHourCreateWithoutBranchInput, WorkHourUncheckedCreateWithoutBranchInput> | WorkHourCreateWithoutBranchInput[] | WorkHourUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutBranchInput | WorkHourCreateOrConnectWithoutBranchInput[]
    createMany?: WorkHourCreateManyBranchInputEnvelope
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
  }

  export type CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<CashRegisterLogCreateWithoutBranchInput, CashRegisterLogUncheckedCreateWithoutBranchInput> | CashRegisterLogCreateWithoutBranchInput[] | CashRegisterLogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutBranchInput | CashRegisterLogCreateOrConnectWithoutBranchInput[]
    createMany?: CashRegisterLogCreateManyBranchInputEnvelope
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
  }

  export type CommissionRuleUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<CommissionRuleCreateWithoutBranchInput, CommissionRuleUncheckedCreateWithoutBranchInput> | CommissionRuleCreateWithoutBranchInput[] | CommissionRuleUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutBranchInput | CommissionRuleCreateOrConnectWithoutBranchInput[]
    createMany?: CommissionRuleCreateManyBranchInputEnvelope
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
  }

  export type ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<ServiceCategoryCreateWithoutBranchInput, ServiceCategoryUncheckedCreateWithoutBranchInput> | ServiceCategoryCreateWithoutBranchInput[] | ServiceCategoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutBranchInput | ServiceCategoryCreateOrConnectWithoutBranchInput[]
    createMany?: ServiceCategoryCreateManyBranchInputEnvelope
    connect?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
  }

  export type NotificationProviderUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationProviderCreateWithoutBranchInput, NotificationProviderUncheckedCreateWithoutBranchInput> | NotificationProviderCreateWithoutBranchInput[] | NotificationProviderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationProviderCreateOrConnectWithoutBranchInput | NotificationProviderCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationProviderCreateManyBranchInputEnvelope
    connect?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
  }

  export type NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationTemplateCreateWithoutBranchInput, NotificationTemplateUncheckedCreateWithoutBranchInput> | NotificationTemplateCreateWithoutBranchInput[] | NotificationTemplateUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutBranchInput | NotificationTemplateCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationTemplateCreateManyBranchInputEnvelope
    connect?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
  }

  export type NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationTriggerCreateWithoutBranchInput, NotificationTriggerUncheckedCreateWithoutBranchInput> | NotificationTriggerCreateWithoutBranchInput[] | NotificationTriggerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutBranchInput | NotificationTriggerCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationTriggerCreateManyBranchInputEnvelope
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
  }

  export type NotificationQueueUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationQueueCreateWithoutBranchInput, NotificationQueueUncheckedCreateWithoutBranchInput> | NotificationQueueCreateWithoutBranchInput[] | NotificationQueueUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutBranchInput | NotificationQueueCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationQueueCreateManyBranchInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<NotificationHistoryCreateWithoutBranchInput, NotificationHistoryUncheckedCreateWithoutBranchInput> | NotificationHistoryCreateWithoutBranchInput[] | NotificationHistoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutBranchInput | NotificationHistoryCreateOrConnectWithoutBranchInput[]
    createMany?: NotificationHistoryCreateManyBranchInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput = {
    create?: XOR<NotificationSettingsCreateWithoutBranchInput, NotificationSettingsUncheckedCreateWithoutBranchInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutBranchInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type AppointmentUpdateManyWithoutBranchNestedInput = {
    create?: XOR<AppointmentCreateWithoutBranchInput, AppointmentUncheckedCreateWithoutBranchInput> | AppointmentCreateWithoutBranchInput[] | AppointmentUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutBranchInput | AppointmentCreateOrConnectWithoutBranchInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutBranchInput | AppointmentUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: AppointmentCreateManyBranchInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutBranchInput | AppointmentUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutBranchInput | AppointmentUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type BranchUpdateOneWithoutSubBranchesNestedInput = {
    create?: XOR<BranchCreateWithoutSubBranchesInput, BranchUncheckedCreateWithoutSubBranchesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutSubBranchesInput
    upsert?: BranchUpsertWithoutSubBranchesInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutSubBranchesInput, BranchUpdateWithoutSubBranchesInput>, BranchUncheckedUpdateWithoutSubBranchesInput>
  }

  export type BranchUpdateManyWithoutParentBranchNestedInput = {
    create?: XOR<BranchCreateWithoutParentBranchInput, BranchUncheckedCreateWithoutParentBranchInput> | BranchCreateWithoutParentBranchInput[] | BranchUncheckedCreateWithoutParentBranchInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutParentBranchInput | BranchCreateOrConnectWithoutParentBranchInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutParentBranchInput | BranchUpsertWithWhereUniqueWithoutParentBranchInput[]
    createMany?: BranchCreateManyParentBranchInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutParentBranchInput | BranchUpdateWithWhereUniqueWithoutParentBranchInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutParentBranchInput | BranchUpdateManyWithWhereWithoutParentBranchInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type UserUpdateManyWithoutBranchNestedInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBranchInput | UserUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBranchInput | UserUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBranchInput | UserUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ServiceCreateWithoutBranchInput, ServiceUncheckedCreateWithoutBranchInput> | ServiceCreateWithoutBranchInput[] | ServiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutBranchInput | ServiceCreateOrConnectWithoutBranchInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutBranchInput | ServiceUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ServiceCreateManyBranchInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutBranchInput | ServiceUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutBranchInput | ServiceUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type PackageUpdateManyWithoutBranchNestedInput = {
    create?: XOR<PackageCreateWithoutBranchInput, PackageUncheckedCreateWithoutBranchInput> | PackageCreateWithoutBranchInput[] | PackageUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutBranchInput | PackageCreateOrConnectWithoutBranchInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutBranchInput | PackageUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: PackageCreateManyBranchInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutBranchInput | PackageUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutBranchInput | PackageUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutBranchNestedInput = {
    create?: XOR<InvoiceCreateWithoutBranchInput, InvoiceUncheckedCreateWithoutBranchInput> | InvoiceCreateWithoutBranchInput[] | InvoiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBranchInput | InvoiceCreateOrConnectWithoutBranchInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutBranchInput | InvoiceUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: InvoiceCreateManyBranchInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutBranchInput | InvoiceUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutBranchInput | InvoiceUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutBranchInput | CustomerUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutBranchInput | CustomerUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutBranchInput | CustomerUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type WorkHourUpdateManyWithoutBranchNestedInput = {
    create?: XOR<WorkHourCreateWithoutBranchInput, WorkHourUncheckedCreateWithoutBranchInput> | WorkHourCreateWithoutBranchInput[] | WorkHourUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutBranchInput | WorkHourCreateOrConnectWithoutBranchInput[]
    upsert?: WorkHourUpsertWithWhereUniqueWithoutBranchInput | WorkHourUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: WorkHourCreateManyBranchInputEnvelope
    set?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    disconnect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    delete?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    update?: WorkHourUpdateWithWhereUniqueWithoutBranchInput | WorkHourUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: WorkHourUpdateManyWithWhereWithoutBranchInput | WorkHourUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: WorkHourScalarWhereInput | WorkHourScalarWhereInput[]
  }

  export type CashRegisterLogUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CashRegisterLogCreateWithoutBranchInput, CashRegisterLogUncheckedCreateWithoutBranchInput> | CashRegisterLogCreateWithoutBranchInput[] | CashRegisterLogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutBranchInput | CashRegisterLogCreateOrConnectWithoutBranchInput[]
    upsert?: CashRegisterLogUpsertWithWhereUniqueWithoutBranchInput | CashRegisterLogUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CashRegisterLogCreateManyBranchInputEnvelope
    set?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    disconnect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    delete?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    update?: CashRegisterLogUpdateWithWhereUniqueWithoutBranchInput | CashRegisterLogUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CashRegisterLogUpdateManyWithWhereWithoutBranchInput | CashRegisterLogUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CashRegisterLogScalarWhereInput | CashRegisterLogScalarWhereInput[]
  }

  export type CommissionRuleUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutBranchInput, CommissionRuleUncheckedCreateWithoutBranchInput> | CommissionRuleCreateWithoutBranchInput[] | CommissionRuleUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutBranchInput | CommissionRuleCreateOrConnectWithoutBranchInput[]
    upsert?: CommissionRuleUpsertWithWhereUniqueWithoutBranchInput | CommissionRuleUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CommissionRuleCreateManyBranchInputEnvelope
    set?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    disconnect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    delete?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    update?: CommissionRuleUpdateWithWhereUniqueWithoutBranchInput | CommissionRuleUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CommissionRuleUpdateManyWithWhereWithoutBranchInput | CommissionRuleUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
  }

  export type ServiceCategoryUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutBranchInput, ServiceCategoryUncheckedCreateWithoutBranchInput> | ServiceCategoryCreateWithoutBranchInput[] | ServiceCategoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutBranchInput | ServiceCategoryCreateOrConnectWithoutBranchInput[]
    upsert?: ServiceCategoryUpsertWithWhereUniqueWithoutBranchInput | ServiceCategoryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ServiceCategoryCreateManyBranchInputEnvelope
    set?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    disconnect?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    delete?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    connect?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    update?: ServiceCategoryUpdateWithWhereUniqueWithoutBranchInput | ServiceCategoryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ServiceCategoryUpdateManyWithWhereWithoutBranchInput | ServiceCategoryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ServiceCategoryScalarWhereInput | ServiceCategoryScalarWhereInput[]
  }

  export type NotificationProviderUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationProviderCreateWithoutBranchInput, NotificationProviderUncheckedCreateWithoutBranchInput> | NotificationProviderCreateWithoutBranchInput[] | NotificationProviderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationProviderCreateOrConnectWithoutBranchInput | NotificationProviderCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationProviderUpsertWithWhereUniqueWithoutBranchInput | NotificationProviderUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationProviderCreateManyBranchInputEnvelope
    set?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    disconnect?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    delete?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    connect?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    update?: NotificationProviderUpdateWithWhereUniqueWithoutBranchInput | NotificationProviderUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationProviderUpdateManyWithWhereWithoutBranchInput | NotificationProviderUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationProviderScalarWhereInput | NotificationProviderScalarWhereInput[]
  }

  export type NotificationTemplateUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationTemplateCreateWithoutBranchInput, NotificationTemplateUncheckedCreateWithoutBranchInput> | NotificationTemplateCreateWithoutBranchInput[] | NotificationTemplateUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutBranchInput | NotificationTemplateCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationTemplateUpsertWithWhereUniqueWithoutBranchInput | NotificationTemplateUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationTemplateCreateManyBranchInputEnvelope
    set?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    disconnect?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    delete?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    connect?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    update?: NotificationTemplateUpdateWithWhereUniqueWithoutBranchInput | NotificationTemplateUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationTemplateUpdateManyWithWhereWithoutBranchInput | NotificationTemplateUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationTemplateScalarWhereInput | NotificationTemplateScalarWhereInput[]
  }

  export type NotificationTriggerUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationTriggerCreateWithoutBranchInput, NotificationTriggerUncheckedCreateWithoutBranchInput> | NotificationTriggerCreateWithoutBranchInput[] | NotificationTriggerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutBranchInput | NotificationTriggerCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationTriggerUpsertWithWhereUniqueWithoutBranchInput | NotificationTriggerUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationTriggerCreateManyBranchInputEnvelope
    set?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    disconnect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    delete?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    update?: NotificationTriggerUpdateWithWhereUniqueWithoutBranchInput | NotificationTriggerUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationTriggerUpdateManyWithWhereWithoutBranchInput | NotificationTriggerUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationTriggerScalarWhereInput | NotificationTriggerScalarWhereInput[]
  }

  export type NotificationQueueUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutBranchInput, NotificationQueueUncheckedCreateWithoutBranchInput> | NotificationQueueCreateWithoutBranchInput[] | NotificationQueueUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutBranchInput | NotificationQueueCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutBranchInput | NotificationQueueUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationQueueCreateManyBranchInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutBranchInput | NotificationQueueUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutBranchInput | NotificationQueueUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutBranchInput, NotificationHistoryUncheckedCreateWithoutBranchInput> | NotificationHistoryCreateWithoutBranchInput[] | NotificationHistoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutBranchInput | NotificationHistoryCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutBranchInput | NotificationHistoryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationHistoryCreateManyBranchInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutBranchInput | NotificationHistoryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutBranchInput | NotificationHistoryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type NotificationSettingsUpdateOneWithoutBranchNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutBranchInput, NotificationSettingsUncheckedCreateWithoutBranchInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutBranchInput
    upsert?: NotificationSettingsUpsertWithoutBranchInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutBranchInput, NotificationSettingsUpdateWithoutBranchInput>, NotificationSettingsUncheckedUpdateWithoutBranchInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<AppointmentCreateWithoutBranchInput, AppointmentUncheckedCreateWithoutBranchInput> | AppointmentCreateWithoutBranchInput[] | AppointmentUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutBranchInput | AppointmentCreateOrConnectWithoutBranchInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutBranchInput | AppointmentUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: AppointmentCreateManyBranchInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutBranchInput | AppointmentUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutBranchInput | AppointmentUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type BranchUncheckedUpdateManyWithoutParentBranchNestedInput = {
    create?: XOR<BranchCreateWithoutParentBranchInput, BranchUncheckedCreateWithoutParentBranchInput> | BranchCreateWithoutParentBranchInput[] | BranchUncheckedCreateWithoutParentBranchInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutParentBranchInput | BranchCreateOrConnectWithoutParentBranchInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutParentBranchInput | BranchUpsertWithWhereUniqueWithoutParentBranchInput[]
    createMany?: BranchCreateManyParentBranchInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutParentBranchInput | BranchUpdateWithWhereUniqueWithoutParentBranchInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutParentBranchInput | BranchUpdateManyWithWhereWithoutParentBranchInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBranchInput | UserUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBranchInput | UserUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBranchInput | UserUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ServiceCreateWithoutBranchInput, ServiceUncheckedCreateWithoutBranchInput> | ServiceCreateWithoutBranchInput[] | ServiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutBranchInput | ServiceCreateOrConnectWithoutBranchInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutBranchInput | ServiceUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ServiceCreateManyBranchInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutBranchInput | ServiceUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutBranchInput | ServiceUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<PackageCreateWithoutBranchInput, PackageUncheckedCreateWithoutBranchInput> | PackageCreateWithoutBranchInput[] | PackageUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutBranchInput | PackageCreateOrConnectWithoutBranchInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutBranchInput | PackageUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: PackageCreateManyBranchInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutBranchInput | PackageUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutBranchInput | PackageUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<InvoiceCreateWithoutBranchInput, InvoiceUncheckedCreateWithoutBranchInput> | InvoiceCreateWithoutBranchInput[] | InvoiceUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBranchInput | InvoiceCreateOrConnectWithoutBranchInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutBranchInput | InvoiceUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: InvoiceCreateManyBranchInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutBranchInput | InvoiceUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutBranchInput | InvoiceUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput> | CustomerCreateWithoutBranchInput[] | CustomerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutBranchInput | CustomerCreateOrConnectWithoutBranchInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutBranchInput | CustomerUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CustomerCreateManyBranchInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutBranchInput | CustomerUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutBranchInput | CustomerUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type WorkHourUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<WorkHourCreateWithoutBranchInput, WorkHourUncheckedCreateWithoutBranchInput> | WorkHourCreateWithoutBranchInput[] | WorkHourUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: WorkHourCreateOrConnectWithoutBranchInput | WorkHourCreateOrConnectWithoutBranchInput[]
    upsert?: WorkHourUpsertWithWhereUniqueWithoutBranchInput | WorkHourUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: WorkHourCreateManyBranchInputEnvelope
    set?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    disconnect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    delete?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    connect?: WorkHourWhereUniqueInput | WorkHourWhereUniqueInput[]
    update?: WorkHourUpdateWithWhereUniqueWithoutBranchInput | WorkHourUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: WorkHourUpdateManyWithWhereWithoutBranchInput | WorkHourUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: WorkHourScalarWhereInput | WorkHourScalarWhereInput[]
  }

  export type CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CashRegisterLogCreateWithoutBranchInput, CashRegisterLogUncheckedCreateWithoutBranchInput> | CashRegisterLogCreateWithoutBranchInput[] | CashRegisterLogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutBranchInput | CashRegisterLogCreateOrConnectWithoutBranchInput[]
    upsert?: CashRegisterLogUpsertWithWhereUniqueWithoutBranchInput | CashRegisterLogUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CashRegisterLogCreateManyBranchInputEnvelope
    set?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    disconnect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    delete?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    connect?: CashRegisterLogWhereUniqueInput | CashRegisterLogWhereUniqueInput[]
    update?: CashRegisterLogUpdateWithWhereUniqueWithoutBranchInput | CashRegisterLogUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CashRegisterLogUpdateManyWithWhereWithoutBranchInput | CashRegisterLogUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CashRegisterLogScalarWhereInput | CashRegisterLogScalarWhereInput[]
  }

  export type CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutBranchInput, CommissionRuleUncheckedCreateWithoutBranchInput> | CommissionRuleCreateWithoutBranchInput[] | CommissionRuleUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutBranchInput | CommissionRuleCreateOrConnectWithoutBranchInput[]
    upsert?: CommissionRuleUpsertWithWhereUniqueWithoutBranchInput | CommissionRuleUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: CommissionRuleCreateManyBranchInputEnvelope
    set?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    disconnect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    delete?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    update?: CommissionRuleUpdateWithWhereUniqueWithoutBranchInput | CommissionRuleUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: CommissionRuleUpdateManyWithWhereWithoutBranchInput | CommissionRuleUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
  }

  export type ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutBranchInput, ServiceCategoryUncheckedCreateWithoutBranchInput> | ServiceCategoryCreateWithoutBranchInput[] | ServiceCategoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutBranchInput | ServiceCategoryCreateOrConnectWithoutBranchInput[]
    upsert?: ServiceCategoryUpsertWithWhereUniqueWithoutBranchInput | ServiceCategoryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ServiceCategoryCreateManyBranchInputEnvelope
    set?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    disconnect?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    delete?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    connect?: ServiceCategoryWhereUniqueInput | ServiceCategoryWhereUniqueInput[]
    update?: ServiceCategoryUpdateWithWhereUniqueWithoutBranchInput | ServiceCategoryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ServiceCategoryUpdateManyWithWhereWithoutBranchInput | ServiceCategoryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ServiceCategoryScalarWhereInput | ServiceCategoryScalarWhereInput[]
  }

  export type NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationProviderCreateWithoutBranchInput, NotificationProviderUncheckedCreateWithoutBranchInput> | NotificationProviderCreateWithoutBranchInput[] | NotificationProviderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationProviderCreateOrConnectWithoutBranchInput | NotificationProviderCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationProviderUpsertWithWhereUniqueWithoutBranchInput | NotificationProviderUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationProviderCreateManyBranchInputEnvelope
    set?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    disconnect?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    delete?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    connect?: NotificationProviderWhereUniqueInput | NotificationProviderWhereUniqueInput[]
    update?: NotificationProviderUpdateWithWhereUniqueWithoutBranchInput | NotificationProviderUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationProviderUpdateManyWithWhereWithoutBranchInput | NotificationProviderUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationProviderScalarWhereInput | NotificationProviderScalarWhereInput[]
  }

  export type NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationTemplateCreateWithoutBranchInput, NotificationTemplateUncheckedCreateWithoutBranchInput> | NotificationTemplateCreateWithoutBranchInput[] | NotificationTemplateUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutBranchInput | NotificationTemplateCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationTemplateUpsertWithWhereUniqueWithoutBranchInput | NotificationTemplateUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationTemplateCreateManyBranchInputEnvelope
    set?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    disconnect?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    delete?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    connect?: NotificationTemplateWhereUniqueInput | NotificationTemplateWhereUniqueInput[]
    update?: NotificationTemplateUpdateWithWhereUniqueWithoutBranchInput | NotificationTemplateUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationTemplateUpdateManyWithWhereWithoutBranchInput | NotificationTemplateUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationTemplateScalarWhereInput | NotificationTemplateScalarWhereInput[]
  }

  export type NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationTriggerCreateWithoutBranchInput, NotificationTriggerUncheckedCreateWithoutBranchInput> | NotificationTriggerCreateWithoutBranchInput[] | NotificationTriggerUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutBranchInput | NotificationTriggerCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationTriggerUpsertWithWhereUniqueWithoutBranchInput | NotificationTriggerUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationTriggerCreateManyBranchInputEnvelope
    set?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    disconnect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    delete?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    update?: NotificationTriggerUpdateWithWhereUniqueWithoutBranchInput | NotificationTriggerUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationTriggerUpdateManyWithWhereWithoutBranchInput | NotificationTriggerUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationTriggerScalarWhereInput | NotificationTriggerScalarWhereInput[]
  }

  export type NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutBranchInput, NotificationQueueUncheckedCreateWithoutBranchInput> | NotificationQueueCreateWithoutBranchInput[] | NotificationQueueUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutBranchInput | NotificationQueueCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutBranchInput | NotificationQueueUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationQueueCreateManyBranchInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutBranchInput | NotificationQueueUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutBranchInput | NotificationQueueUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutBranchInput, NotificationHistoryUncheckedCreateWithoutBranchInput> | NotificationHistoryCreateWithoutBranchInput[] | NotificationHistoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutBranchInput | NotificationHistoryCreateOrConnectWithoutBranchInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutBranchInput | NotificationHistoryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: NotificationHistoryCreateManyBranchInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutBranchInput | NotificationHistoryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutBranchInput | NotificationHistoryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutBranchInput, NotificationSettingsUncheckedCreateWithoutBranchInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutBranchInput
    upsert?: NotificationSettingsUpsertWithoutBranchInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutBranchInput, NotificationSettingsUpdateWithoutBranchInput>, NotificationSettingsUncheckedUpdateWithoutBranchInput>
  }

  export type BranchCreateNestedOneWithoutCustomersInput = {
    create?: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCustomersInput
    connect?: BranchWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CustomerPackageCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerPackageCreateWithoutCustomerInput, CustomerPackageUncheckedCreateWithoutCustomerInput> | CustomerPackageCreateWithoutCustomerInput[] | CustomerPackageUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutCustomerInput | CustomerPackageCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerPackageCreateManyCustomerInputEnvelope
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutCustomerInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerTagCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerTagCreateWithoutCustomerInput, CustomerTagUncheckedCreateWithoutCustomerInput> | CustomerTagCreateWithoutCustomerInput[] | CustomerTagUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutCustomerInput | CustomerTagCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerTagCreateManyCustomerInputEnvelope
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
  }

  export type NotificationQueueCreateNestedManyWithoutCustomerInput = {
    create?: XOR<NotificationQueueCreateWithoutCustomerInput, NotificationQueueUncheckedCreateWithoutCustomerInput> | NotificationQueueCreateWithoutCustomerInput[] | NotificationQueueUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutCustomerInput | NotificationQueueCreateOrConnectWithoutCustomerInput[]
    createMany?: NotificationQueueCreateManyCustomerInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryCreateNestedManyWithoutCustomerInput = {
    create?: XOR<NotificationHistoryCreateWithoutCustomerInput, NotificationHistoryUncheckedCreateWithoutCustomerInput> | NotificationHistoryCreateWithoutCustomerInput[] | NotificationHistoryUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutCustomerInput | NotificationHistoryCreateOrConnectWithoutCustomerInput[]
    createMany?: NotificationHistoryCreateManyCustomerInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerPackageCreateWithoutCustomerInput, CustomerPackageUncheckedCreateWithoutCustomerInput> | CustomerPackageCreateWithoutCustomerInput[] | CustomerPackageUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutCustomerInput | CustomerPackageCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerPackageCreateManyCustomerInputEnvelope
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerTagUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerTagCreateWithoutCustomerInput, CustomerTagUncheckedCreateWithoutCustomerInput> | CustomerTagCreateWithoutCustomerInput[] | CustomerTagUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutCustomerInput | CustomerTagCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerTagCreateManyCustomerInputEnvelope
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
  }

  export type NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<NotificationQueueCreateWithoutCustomerInput, NotificationQueueUncheckedCreateWithoutCustomerInput> | NotificationQueueCreateWithoutCustomerInput[] | NotificationQueueUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutCustomerInput | NotificationQueueCreateOrConnectWithoutCustomerInput[]
    createMany?: NotificationQueueCreateManyCustomerInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<NotificationHistoryCreateWithoutCustomerInput, NotificationHistoryUncheckedCreateWithoutCustomerInput> | NotificationHistoryCreateWithoutCustomerInput[] | NotificationHistoryUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutCustomerInput | NotificationHistoryCreateOrConnectWithoutCustomerInput[]
    createMany?: NotificationHistoryCreateManyCustomerInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BranchUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCustomersInput
    upsert?: BranchUpsertWithoutCustomersInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutCustomersInput, BranchUpdateWithoutCustomersInput>, BranchUncheckedUpdateWithoutCustomersInput>
  }

  export type AppointmentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCustomerInput | AppointmentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCustomerInput | AppointmentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCustomerInput | AppointmentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CustomerPackageUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerPackageCreateWithoutCustomerInput, CustomerPackageUncheckedCreateWithoutCustomerInput> | CustomerPackageCreateWithoutCustomerInput[] | CustomerPackageUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutCustomerInput | CustomerPackageCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerPackageUpsertWithWhereUniqueWithoutCustomerInput | CustomerPackageUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerPackageCreateManyCustomerInputEnvelope
    set?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    disconnect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    delete?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    update?: CustomerPackageUpdateWithWhereUniqueWithoutCustomerInput | CustomerPackageUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerPackageUpdateManyWithWhereWithoutCustomerInput | CustomerPackageUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerPackageScalarWhereInput | CustomerPackageScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCustomerInput | InvoiceUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCustomerInput | InvoiceUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCustomerInput | InvoiceUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerTagUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerTagCreateWithoutCustomerInput, CustomerTagUncheckedCreateWithoutCustomerInput> | CustomerTagCreateWithoutCustomerInput[] | CustomerTagUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutCustomerInput | CustomerTagCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerTagUpsertWithWhereUniqueWithoutCustomerInput | CustomerTagUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerTagCreateManyCustomerInputEnvelope
    set?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    disconnect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    delete?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    update?: CustomerTagUpdateWithWhereUniqueWithoutCustomerInput | CustomerTagUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerTagUpdateManyWithWhereWithoutCustomerInput | CustomerTagUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerTagScalarWhereInput | CustomerTagScalarWhereInput[]
  }

  export type NotificationQueueUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutCustomerInput, NotificationQueueUncheckedCreateWithoutCustomerInput> | NotificationQueueCreateWithoutCustomerInput[] | NotificationQueueUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutCustomerInput | NotificationQueueCreateOrConnectWithoutCustomerInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutCustomerInput | NotificationQueueUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: NotificationQueueCreateManyCustomerInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutCustomerInput | NotificationQueueUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutCustomerInput | NotificationQueueUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutCustomerInput, NotificationHistoryUncheckedCreateWithoutCustomerInput> | NotificationHistoryCreateWithoutCustomerInput[] | NotificationHistoryUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutCustomerInput | NotificationHistoryCreateOrConnectWithoutCustomerInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutCustomerInput | NotificationHistoryUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: NotificationHistoryCreateManyCustomerInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutCustomerInput | NotificationHistoryUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutCustomerInput | NotificationHistoryUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCustomerInput | AppointmentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCustomerInput | AppointmentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCustomerInput | AppointmentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerPackageCreateWithoutCustomerInput, CustomerPackageUncheckedCreateWithoutCustomerInput> | CustomerPackageCreateWithoutCustomerInput[] | CustomerPackageUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutCustomerInput | CustomerPackageCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerPackageUpsertWithWhereUniqueWithoutCustomerInput | CustomerPackageUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerPackageCreateManyCustomerInputEnvelope
    set?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    disconnect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    delete?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    update?: CustomerPackageUpdateWithWhereUniqueWithoutCustomerInput | CustomerPackageUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerPackageUpdateManyWithWhereWithoutCustomerInput | CustomerPackageUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerPackageScalarWhereInput | CustomerPackageScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput> | InvoiceCreateWithoutCustomerInput[] | InvoiceUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerInput | InvoiceCreateOrConnectWithoutCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCustomerInput | InvoiceUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: InvoiceCreateManyCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCustomerInput | InvoiceUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCustomerInput | InvoiceUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerTagCreateWithoutCustomerInput, CustomerTagUncheckedCreateWithoutCustomerInput> | CustomerTagCreateWithoutCustomerInput[] | CustomerTagUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutCustomerInput | CustomerTagCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerTagUpsertWithWhereUniqueWithoutCustomerInput | CustomerTagUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerTagCreateManyCustomerInputEnvelope
    set?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    disconnect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    delete?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    update?: CustomerTagUpdateWithWhereUniqueWithoutCustomerInput | CustomerTagUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerTagUpdateManyWithWhereWithoutCustomerInput | CustomerTagUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerTagScalarWhereInput | CustomerTagScalarWhereInput[]
  }

  export type NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutCustomerInput, NotificationQueueUncheckedCreateWithoutCustomerInput> | NotificationQueueCreateWithoutCustomerInput[] | NotificationQueueUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutCustomerInput | NotificationQueueCreateOrConnectWithoutCustomerInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutCustomerInput | NotificationQueueUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: NotificationQueueCreateManyCustomerInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutCustomerInput | NotificationQueueUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutCustomerInput | NotificationQueueUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutCustomerInput, NotificationHistoryUncheckedCreateWithoutCustomerInput> | NotificationHistoryCreateWithoutCustomerInput[] | NotificationHistoryUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutCustomerInput | NotificationHistoryCreateOrConnectWithoutCustomerInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutCustomerInput | NotificationHistoryUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: NotificationHistoryCreateManyCustomerInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutCustomerInput | NotificationHistoryUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutCustomerInput | NotificationHistoryUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type CustomerTagCreateNestedManyWithoutTagInput = {
    create?: XOR<CustomerTagCreateWithoutTagInput, CustomerTagUncheckedCreateWithoutTagInput> | CustomerTagCreateWithoutTagInput[] | CustomerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutTagInput | CustomerTagCreateOrConnectWithoutTagInput[]
    createMany?: CustomerTagCreateManyTagInputEnvelope
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
  }

  export type CustomerTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<CustomerTagCreateWithoutTagInput, CustomerTagUncheckedCreateWithoutTagInput> | CustomerTagCreateWithoutTagInput[] | CustomerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutTagInput | CustomerTagCreateOrConnectWithoutTagInput[]
    createMany?: CustomerTagCreateManyTagInputEnvelope
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
  }

  export type CustomerTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<CustomerTagCreateWithoutTagInput, CustomerTagUncheckedCreateWithoutTagInput> | CustomerTagCreateWithoutTagInput[] | CustomerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutTagInput | CustomerTagCreateOrConnectWithoutTagInput[]
    upsert?: CustomerTagUpsertWithWhereUniqueWithoutTagInput | CustomerTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: CustomerTagCreateManyTagInputEnvelope
    set?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    disconnect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    delete?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    update?: CustomerTagUpdateWithWhereUniqueWithoutTagInput | CustomerTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: CustomerTagUpdateManyWithWhereWithoutTagInput | CustomerTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: CustomerTagScalarWhereInput | CustomerTagScalarWhereInput[]
  }

  export type CustomerTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<CustomerTagCreateWithoutTagInput, CustomerTagUncheckedCreateWithoutTagInput> | CustomerTagCreateWithoutTagInput[] | CustomerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: CustomerTagCreateOrConnectWithoutTagInput | CustomerTagCreateOrConnectWithoutTagInput[]
    upsert?: CustomerTagUpsertWithWhereUniqueWithoutTagInput | CustomerTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: CustomerTagCreateManyTagInputEnvelope
    set?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    disconnect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    delete?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    connect?: CustomerTagWhereUniqueInput | CustomerTagWhereUniqueInput[]
    update?: CustomerTagUpdateWithWhereUniqueWithoutTagInput | CustomerTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: CustomerTagUpdateManyWithWhereWithoutTagInput | CustomerTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: CustomerTagScalarWhereInput | CustomerTagScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutTagsInput = {
    create?: XOR<CustomerCreateWithoutTagsInput, CustomerUncheckedCreateWithoutTagsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTagsInput
    connect?: CustomerWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutCustomersInput = {
    create?: XOR<TagCreateWithoutCustomersInput, TagUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: TagCreateOrConnectWithoutCustomersInput
    connect?: TagWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<CustomerCreateWithoutTagsInput, CustomerUncheckedCreateWithoutTagsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTagsInput
    upsert?: CustomerUpsertWithoutTagsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutTagsInput, CustomerUpdateWithoutTagsInput>, CustomerUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<TagCreateWithoutCustomersInput, TagUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: TagCreateOrConnectWithoutCustomersInput
    upsert?: TagUpsertWithoutCustomersInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutCustomersInput, TagUpdateWithoutCustomersInput>, TagUncheckedUpdateWithoutCustomersInput>
  }

  export type BranchCreateNestedOneWithoutServiceCategoriesInput = {
    create?: XOR<BranchCreateWithoutServiceCategoriesInput, BranchUncheckedCreateWithoutServiceCategoriesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutServiceCategoriesInput
    connect?: BranchWhereUniqueInput
  }

  export type ServiceCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type BranchUpdateOneWithoutServiceCategoriesNestedInput = {
    create?: XOR<BranchCreateWithoutServiceCategoriesInput, BranchUncheckedCreateWithoutServiceCategoriesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutServiceCategoriesInput
    upsert?: BranchUpsertWithoutServiceCategoriesInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutServiceCategoriesInput, BranchUpdateWithoutServiceCategoriesInput>, BranchUncheckedUpdateWithoutServiceCategoriesInput>
  }

  export type ServiceUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCategoryInput | ServiceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCategoryInput | ServiceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCategoryInput | ServiceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCategoryInput | ServiceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCategoryInput | ServiceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCategoryInput | ServiceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceCategoryCreateNestedOneWithoutServicesInput = {
    create?: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutServicesInput
    connect?: ServiceCategoryWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutServicesInput = {
    create?: XOR<BranchCreateWithoutServicesInput, BranchUncheckedCreateWithoutServicesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutServicesInput
    connect?: BranchWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutServiceInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type StaffServiceCreateNestedManyWithoutServiceInput = {
    create?: XOR<StaffServiceCreateWithoutServiceInput, StaffServiceUncheckedCreateWithoutServiceInput> | StaffServiceCreateWithoutServiceInput[] | StaffServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutServiceInput | StaffServiceCreateOrConnectWithoutServiceInput[]
    createMany?: StaffServiceCreateManyServiceInputEnvelope
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
  }

  export type PackageServiceCreateNestedManyWithoutServiceInput = {
    create?: XOR<PackageServiceCreateWithoutServiceInput, PackageServiceUncheckedCreateWithoutServiceInput> | PackageServiceCreateWithoutServiceInput[] | PackageServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutServiceInput | PackageServiceCreateOrConnectWithoutServiceInput[]
    createMany?: PackageServiceCreateManyServiceInputEnvelope
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
  }

  export type CommissionItemCreateNestedManyWithoutServiceInput = {
    create?: XOR<CommissionItemCreateWithoutServiceInput, CommissionItemUncheckedCreateWithoutServiceInput> | CommissionItemCreateWithoutServiceInput[] | CommissionItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutServiceInput | CommissionItemCreateOrConnectWithoutServiceInput[]
    createMany?: CommissionItemCreateManyServiceInputEnvelope
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
  }

  export type StaffCommissionCreateNestedManyWithoutServiceInput = {
    create?: XOR<StaffCommissionCreateWithoutServiceInput, StaffCommissionUncheckedCreateWithoutServiceInput> | StaffCommissionCreateWithoutServiceInput[] | StaffCommissionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutServiceInput | StaffCommissionCreateOrConnectWithoutServiceInput[]
    createMany?: StaffCommissionCreateManyServiceInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type CommissionRuleCreateNestedManyWithoutServiceInput = {
    create?: XOR<CommissionRuleCreateWithoutServiceInput, CommissionRuleUncheckedCreateWithoutServiceInput> | CommissionRuleCreateWithoutServiceInput[] | CommissionRuleUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutServiceInput | CommissionRuleCreateOrConnectWithoutServiceInput[]
    createMany?: CommissionRuleCreateManyServiceInputEnvelope
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type StaffServiceUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<StaffServiceCreateWithoutServiceInput, StaffServiceUncheckedCreateWithoutServiceInput> | StaffServiceCreateWithoutServiceInput[] | StaffServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutServiceInput | StaffServiceCreateOrConnectWithoutServiceInput[]
    createMany?: StaffServiceCreateManyServiceInputEnvelope
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
  }

  export type PackageServiceUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<PackageServiceCreateWithoutServiceInput, PackageServiceUncheckedCreateWithoutServiceInput> | PackageServiceCreateWithoutServiceInput[] | PackageServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutServiceInput | PackageServiceCreateOrConnectWithoutServiceInput[]
    createMany?: PackageServiceCreateManyServiceInputEnvelope
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
  }

  export type CommissionItemUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<CommissionItemCreateWithoutServiceInput, CommissionItemUncheckedCreateWithoutServiceInput> | CommissionItemCreateWithoutServiceInput[] | CommissionItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutServiceInput | CommissionItemCreateOrConnectWithoutServiceInput[]
    createMany?: CommissionItemCreateManyServiceInputEnvelope
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
  }

  export type StaffCommissionUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<StaffCommissionCreateWithoutServiceInput, StaffCommissionUncheckedCreateWithoutServiceInput> | StaffCommissionCreateWithoutServiceInput[] | StaffCommissionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutServiceInput | StaffCommissionCreateOrConnectWithoutServiceInput[]
    createMany?: StaffCommissionCreateManyServiceInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type CommissionRuleUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<CommissionRuleCreateWithoutServiceInput, CommissionRuleUncheckedCreateWithoutServiceInput> | CommissionRuleCreateWithoutServiceInput[] | CommissionRuleUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutServiceInput | CommissionRuleCreateOrConnectWithoutServiceInput[]
    createMany?: CommissionRuleCreateManyServiceInputEnvelope
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
  }

  export type ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutServicesInput
    upsert?: ServiceCategoryUpsertWithoutServicesInput
    connect?: ServiceCategoryWhereUniqueInput
    update?: XOR<XOR<ServiceCategoryUpdateToOneWithWhereWithoutServicesInput, ServiceCategoryUpdateWithoutServicesInput>, ServiceCategoryUncheckedUpdateWithoutServicesInput>
  }

  export type BranchUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<BranchCreateWithoutServicesInput, BranchUncheckedCreateWithoutServicesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutServicesInput
    upsert?: BranchUpsertWithoutServicesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutServicesInput, BranchUpdateWithoutServicesInput>, BranchUncheckedUpdateWithoutServicesInput>
  }

  export type AppointmentUpdateManyWithoutServiceNestedInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutServiceInput | AppointmentUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutServiceInput | AppointmentUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutServiceInput | AppointmentUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type StaffServiceUpdateManyWithoutServiceNestedInput = {
    create?: XOR<StaffServiceCreateWithoutServiceInput, StaffServiceUncheckedCreateWithoutServiceInput> | StaffServiceCreateWithoutServiceInput[] | StaffServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutServiceInput | StaffServiceCreateOrConnectWithoutServiceInput[]
    upsert?: StaffServiceUpsertWithWhereUniqueWithoutServiceInput | StaffServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: StaffServiceCreateManyServiceInputEnvelope
    set?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    disconnect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    delete?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    update?: StaffServiceUpdateWithWhereUniqueWithoutServiceInput | StaffServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: StaffServiceUpdateManyWithWhereWithoutServiceInput | StaffServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: StaffServiceScalarWhereInput | StaffServiceScalarWhereInput[]
  }

  export type PackageServiceUpdateManyWithoutServiceNestedInput = {
    create?: XOR<PackageServiceCreateWithoutServiceInput, PackageServiceUncheckedCreateWithoutServiceInput> | PackageServiceCreateWithoutServiceInput[] | PackageServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutServiceInput | PackageServiceCreateOrConnectWithoutServiceInput[]
    upsert?: PackageServiceUpsertWithWhereUniqueWithoutServiceInput | PackageServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: PackageServiceCreateManyServiceInputEnvelope
    set?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    disconnect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    delete?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    update?: PackageServiceUpdateWithWhereUniqueWithoutServiceInput | PackageServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: PackageServiceUpdateManyWithWhereWithoutServiceInput | PackageServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: PackageServiceScalarWhereInput | PackageServiceScalarWhereInput[]
  }

  export type CommissionItemUpdateManyWithoutServiceNestedInput = {
    create?: XOR<CommissionItemCreateWithoutServiceInput, CommissionItemUncheckedCreateWithoutServiceInput> | CommissionItemCreateWithoutServiceInput[] | CommissionItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutServiceInput | CommissionItemCreateOrConnectWithoutServiceInput[]
    upsert?: CommissionItemUpsertWithWhereUniqueWithoutServiceInput | CommissionItemUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: CommissionItemCreateManyServiceInputEnvelope
    set?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    disconnect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    delete?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    update?: CommissionItemUpdateWithWhereUniqueWithoutServiceInput | CommissionItemUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: CommissionItemUpdateManyWithWhereWithoutServiceInput | CommissionItemUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
  }

  export type StaffCommissionUpdateManyWithoutServiceNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutServiceInput, StaffCommissionUncheckedCreateWithoutServiceInput> | StaffCommissionCreateWithoutServiceInput[] | StaffCommissionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutServiceInput | StaffCommissionCreateOrConnectWithoutServiceInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutServiceInput | StaffCommissionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: StaffCommissionCreateManyServiceInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutServiceInput | StaffCommissionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutServiceInput | StaffCommissionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type CommissionRuleUpdateManyWithoutServiceNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutServiceInput, CommissionRuleUncheckedCreateWithoutServiceInput> | CommissionRuleCreateWithoutServiceInput[] | CommissionRuleUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutServiceInput | CommissionRuleCreateOrConnectWithoutServiceInput[]
    upsert?: CommissionRuleUpsertWithWhereUniqueWithoutServiceInput | CommissionRuleUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: CommissionRuleCreateManyServiceInputEnvelope
    set?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    disconnect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    delete?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    update?: CommissionRuleUpdateWithWhereUniqueWithoutServiceInput | CommissionRuleUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: CommissionRuleUpdateManyWithWhereWithoutServiceInput | CommissionRuleUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutServiceInput | AppointmentUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutServiceInput | AppointmentUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutServiceInput | AppointmentUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type StaffServiceUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<StaffServiceCreateWithoutServiceInput, StaffServiceUncheckedCreateWithoutServiceInput> | StaffServiceCreateWithoutServiceInput[] | StaffServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffServiceCreateOrConnectWithoutServiceInput | StaffServiceCreateOrConnectWithoutServiceInput[]
    upsert?: StaffServiceUpsertWithWhereUniqueWithoutServiceInput | StaffServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: StaffServiceCreateManyServiceInputEnvelope
    set?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    disconnect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    delete?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    connect?: StaffServiceWhereUniqueInput | StaffServiceWhereUniqueInput[]
    update?: StaffServiceUpdateWithWhereUniqueWithoutServiceInput | StaffServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: StaffServiceUpdateManyWithWhereWithoutServiceInput | StaffServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: StaffServiceScalarWhereInput | StaffServiceScalarWhereInput[]
  }

  export type PackageServiceUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<PackageServiceCreateWithoutServiceInput, PackageServiceUncheckedCreateWithoutServiceInput> | PackageServiceCreateWithoutServiceInput[] | PackageServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutServiceInput | PackageServiceCreateOrConnectWithoutServiceInput[]
    upsert?: PackageServiceUpsertWithWhereUniqueWithoutServiceInput | PackageServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: PackageServiceCreateManyServiceInputEnvelope
    set?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    disconnect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    delete?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    update?: PackageServiceUpdateWithWhereUniqueWithoutServiceInput | PackageServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: PackageServiceUpdateManyWithWhereWithoutServiceInput | PackageServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: PackageServiceScalarWhereInput | PackageServiceScalarWhereInput[]
  }

  export type CommissionItemUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<CommissionItemCreateWithoutServiceInput, CommissionItemUncheckedCreateWithoutServiceInput> | CommissionItemCreateWithoutServiceInput[] | CommissionItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutServiceInput | CommissionItemCreateOrConnectWithoutServiceInput[]
    upsert?: CommissionItemUpsertWithWhereUniqueWithoutServiceInput | CommissionItemUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: CommissionItemCreateManyServiceInputEnvelope
    set?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    disconnect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    delete?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    update?: CommissionItemUpdateWithWhereUniqueWithoutServiceInput | CommissionItemUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: CommissionItemUpdateManyWithWhereWithoutServiceInput | CommissionItemUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
  }

  export type StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutServiceInput, StaffCommissionUncheckedCreateWithoutServiceInput> | StaffCommissionCreateWithoutServiceInput[] | StaffCommissionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutServiceInput | StaffCommissionCreateOrConnectWithoutServiceInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutServiceInput | StaffCommissionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: StaffCommissionCreateManyServiceInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutServiceInput | StaffCommissionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutServiceInput | StaffCommissionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutServiceInput, CommissionRuleUncheckedCreateWithoutServiceInput> | CommissionRuleCreateWithoutServiceInput[] | CommissionRuleUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutServiceInput | CommissionRuleCreateOrConnectWithoutServiceInput[]
    upsert?: CommissionRuleUpsertWithWhereUniqueWithoutServiceInput | CommissionRuleUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: CommissionRuleCreateManyServiceInputEnvelope
    set?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    disconnect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    delete?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    connect?: CommissionRuleWhereUniqueInput | CommissionRuleWhereUniqueInput[]
    update?: CommissionRuleUpdateWithWhereUniqueWithoutServiceInput | CommissionRuleUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: CommissionRuleUpdateManyWithWhereWithoutServiceInput | CommissionRuleUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutServicesInput = {
    create?: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutStaffInput = {
    create?: XOR<ServiceCreateWithoutStaffInput, ServiceUncheckedCreateWithoutStaffInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutStaffInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesInput
    upsert?: UserUpsertWithoutServicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutServicesInput, UserUpdateWithoutServicesInput>, UserUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<ServiceCreateWithoutStaffInput, ServiceUncheckedCreateWithoutStaffInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutStaffInput
    upsert?: ServiceUpsertWithoutStaffInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutStaffInput, ServiceUpdateWithoutStaffInput>, ServiceUncheckedUpdateWithoutStaffInput>
  }

  export type CustomerCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAppointmentsInput
    connect?: CustomerWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutAppointmentsInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<BranchCreateWithoutAppointmentsInput, BranchUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutAppointmentsInput
    connect?: BranchWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<InvoiceCreateWithoutAppointmentInput, InvoiceUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutAppointmentInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<InvoiceCreateWithoutAppointmentInput, InvoiceUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutAppointmentInput
    connect?: InvoiceWhereUniqueInput
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type CustomerUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAppointmentsInput
    upsert?: CustomerUpsertWithoutAppointmentsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutAppointmentsInput, CustomerUpdateWithoutAppointmentsInput>, CustomerUncheckedUpdateWithoutAppointmentsInput>
  }

  export type ServiceUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutAppointmentsInput
    upsert?: ServiceUpsertWithoutAppointmentsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutAppointmentsInput, ServiceUpdateWithoutAppointmentsInput>, ServiceUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type BranchUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<BranchCreateWithoutAppointmentsInput, BranchUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutAppointmentsInput
    upsert?: BranchUpsertWithoutAppointmentsInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutAppointmentsInput, BranchUpdateWithoutAppointmentsInput>, BranchUncheckedUpdateWithoutAppointmentsInput>
  }

  export type InvoiceUpdateOneWithoutAppointmentNestedInput = {
    create?: XOR<InvoiceCreateWithoutAppointmentInput, InvoiceUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutAppointmentInput
    upsert?: InvoiceUpsertWithoutAppointmentInput
    disconnect?: InvoiceWhereInput | boolean
    delete?: InvoiceWhereInput | boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutAppointmentInput, InvoiceUpdateWithoutAppointmentInput>, InvoiceUncheckedUpdateWithoutAppointmentInput>
  }

  export type InvoiceUncheckedUpdateOneWithoutAppointmentNestedInput = {
    create?: XOR<InvoiceCreateWithoutAppointmentInput, InvoiceUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutAppointmentInput
    upsert?: InvoiceUpsertWithoutAppointmentInput
    disconnect?: InvoiceWhereInput | boolean
    delete?: InvoiceWhereInput | boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutAppointmentInput, InvoiceUpdateWithoutAppointmentInput>, InvoiceUncheckedUpdateWithoutAppointmentInput>
  }

  export type BranchCreateNestedOneWithoutPackagesInput = {
    create?: XOR<BranchCreateWithoutPackagesInput, BranchUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutPackagesInput
    connect?: BranchWhereUniqueInput
  }

  export type PackageServiceCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageServiceCreateWithoutPackageInput, PackageServiceUncheckedCreateWithoutPackageInput> | PackageServiceCreateWithoutPackageInput[] | PackageServiceUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutPackageInput | PackageServiceCreateOrConnectWithoutPackageInput[]
    createMany?: PackageServiceCreateManyPackageInputEnvelope
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
  }

  export type CustomerPackageCreateNestedManyWithoutPackageInput = {
    create?: XOR<CustomerPackageCreateWithoutPackageInput, CustomerPackageUncheckedCreateWithoutPackageInput> | CustomerPackageCreateWithoutPackageInput[] | CustomerPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutPackageInput | CustomerPackageCreateOrConnectWithoutPackageInput[]
    createMany?: CustomerPackageCreateManyPackageInputEnvelope
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
  }

  export type PackageServiceUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageServiceCreateWithoutPackageInput, PackageServiceUncheckedCreateWithoutPackageInput> | PackageServiceCreateWithoutPackageInput[] | PackageServiceUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutPackageInput | PackageServiceCreateOrConnectWithoutPackageInput[]
    createMany?: PackageServiceCreateManyPackageInputEnvelope
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
  }

  export type CustomerPackageUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<CustomerPackageCreateWithoutPackageInput, CustomerPackageUncheckedCreateWithoutPackageInput> | CustomerPackageCreateWithoutPackageInput[] | CustomerPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutPackageInput | CustomerPackageCreateOrConnectWithoutPackageInput[]
    createMany?: CustomerPackageCreateManyPackageInputEnvelope
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
  }

  export type EnumPackageTypeFieldUpdateOperationsInput = {
    set?: $Enums.PackageType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BranchUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<BranchCreateWithoutPackagesInput, BranchUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutPackagesInput
    upsert?: BranchUpsertWithoutPackagesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutPackagesInput, BranchUpdateWithoutPackagesInput>, BranchUncheckedUpdateWithoutPackagesInput>
  }

  export type PackageServiceUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageServiceCreateWithoutPackageInput, PackageServiceUncheckedCreateWithoutPackageInput> | PackageServiceCreateWithoutPackageInput[] | PackageServiceUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutPackageInput | PackageServiceCreateOrConnectWithoutPackageInput[]
    upsert?: PackageServiceUpsertWithWhereUniqueWithoutPackageInput | PackageServiceUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageServiceCreateManyPackageInputEnvelope
    set?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    disconnect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    delete?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    update?: PackageServiceUpdateWithWhereUniqueWithoutPackageInput | PackageServiceUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageServiceUpdateManyWithWhereWithoutPackageInput | PackageServiceUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageServiceScalarWhereInput | PackageServiceScalarWhereInput[]
  }

  export type CustomerPackageUpdateManyWithoutPackageNestedInput = {
    create?: XOR<CustomerPackageCreateWithoutPackageInput, CustomerPackageUncheckedCreateWithoutPackageInput> | CustomerPackageCreateWithoutPackageInput[] | CustomerPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutPackageInput | CustomerPackageCreateOrConnectWithoutPackageInput[]
    upsert?: CustomerPackageUpsertWithWhereUniqueWithoutPackageInput | CustomerPackageUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: CustomerPackageCreateManyPackageInputEnvelope
    set?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    disconnect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    delete?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    update?: CustomerPackageUpdateWithWhereUniqueWithoutPackageInput | CustomerPackageUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: CustomerPackageUpdateManyWithWhereWithoutPackageInput | CustomerPackageUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: CustomerPackageScalarWhereInput | CustomerPackageScalarWhereInput[]
  }

  export type PackageServiceUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageServiceCreateWithoutPackageInput, PackageServiceUncheckedCreateWithoutPackageInput> | PackageServiceCreateWithoutPackageInput[] | PackageServiceUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageServiceCreateOrConnectWithoutPackageInput | PackageServiceCreateOrConnectWithoutPackageInput[]
    upsert?: PackageServiceUpsertWithWhereUniqueWithoutPackageInput | PackageServiceUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageServiceCreateManyPackageInputEnvelope
    set?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    disconnect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    delete?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    connect?: PackageServiceWhereUniqueInput | PackageServiceWhereUniqueInput[]
    update?: PackageServiceUpdateWithWhereUniqueWithoutPackageInput | PackageServiceUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageServiceUpdateManyWithWhereWithoutPackageInput | PackageServiceUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageServiceScalarWhereInput | PackageServiceScalarWhereInput[]
  }

  export type CustomerPackageUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<CustomerPackageCreateWithoutPackageInput, CustomerPackageUncheckedCreateWithoutPackageInput> | CustomerPackageCreateWithoutPackageInput[] | CustomerPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutPackageInput | CustomerPackageCreateOrConnectWithoutPackageInput[]
    upsert?: CustomerPackageUpsertWithWhereUniqueWithoutPackageInput | CustomerPackageUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: CustomerPackageCreateManyPackageInputEnvelope
    set?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    disconnect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    delete?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    connect?: CustomerPackageWhereUniqueInput | CustomerPackageWhereUniqueInput[]
    update?: CustomerPackageUpdateWithWhereUniqueWithoutPackageInput | CustomerPackageUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: CustomerPackageUpdateManyWithWhereWithoutPackageInput | CustomerPackageUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: CustomerPackageScalarWhereInput | CustomerPackageScalarWhereInput[]
  }

  export type PackageCreateNestedOneWithoutServicesInput = {
    create?: XOR<PackageCreateWithoutServicesInput, PackageUncheckedCreateWithoutServicesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutServicesInput
    connect?: PackageWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutPackagesInput = {
    create?: XOR<ServiceCreateWithoutPackagesInput, ServiceUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutPackagesInput
    connect?: ServiceWhereUniqueInput
  }

  export type PackageUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<PackageCreateWithoutServicesInput, PackageUncheckedCreateWithoutServicesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutServicesInput
    upsert?: PackageUpsertWithoutServicesInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutServicesInput, PackageUpdateWithoutServicesInput>, PackageUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<ServiceCreateWithoutPackagesInput, ServiceUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutPackagesInput
    upsert?: ServiceUpsertWithoutPackagesInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutPackagesInput, ServiceUpdateWithoutPackagesInput>, ServiceUncheckedUpdateWithoutPackagesInput>
  }

  export type CustomerCreateNestedOneWithoutPackagesInput = {
    create?: XOR<CustomerCreateWithoutPackagesInput, CustomerUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPackagesInput
    connect?: CustomerWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutCustomerPackagesInput = {
    create?: XOR<PackageCreateWithoutCustomerPackagesInput, PackageUncheckedCreateWithoutCustomerPackagesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutCustomerPackagesInput
    connect?: PackageWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutCustomerPackageInput = {
    create?: XOR<InvoiceCreateWithoutCustomerPackageInput, InvoiceUncheckedCreateWithoutCustomerPackageInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerPackageInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedOneWithoutCustomerPackageInput = {
    create?: XOR<InvoiceCreateWithoutCustomerPackageInput, InvoiceUncheckedCreateWithoutCustomerPackageInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerPackageInput
    connect?: InvoiceWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CustomerUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<CustomerCreateWithoutPackagesInput, CustomerUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPackagesInput
    upsert?: CustomerUpsertWithoutPackagesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPackagesInput, CustomerUpdateWithoutPackagesInput>, CustomerUncheckedUpdateWithoutPackagesInput>
  }

  export type PackageUpdateOneRequiredWithoutCustomerPackagesNestedInput = {
    create?: XOR<PackageCreateWithoutCustomerPackagesInput, PackageUncheckedCreateWithoutCustomerPackagesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutCustomerPackagesInput
    upsert?: PackageUpsertWithoutCustomerPackagesInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutCustomerPackagesInput, PackageUpdateWithoutCustomerPackagesInput>, PackageUncheckedUpdateWithoutCustomerPackagesInput>
  }

  export type InvoiceUpdateOneWithoutCustomerPackageNestedInput = {
    create?: XOR<InvoiceCreateWithoutCustomerPackageInput, InvoiceUncheckedCreateWithoutCustomerPackageInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerPackageInput
    upsert?: InvoiceUpsertWithoutCustomerPackageInput
    disconnect?: InvoiceWhereInput | boolean
    delete?: InvoiceWhereInput | boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutCustomerPackageInput, InvoiceUpdateWithoutCustomerPackageInput>, InvoiceUncheckedUpdateWithoutCustomerPackageInput>
  }

  export type InvoiceUncheckedUpdateOneWithoutCustomerPackageNestedInput = {
    create?: XOR<InvoiceCreateWithoutCustomerPackageInput, InvoiceUncheckedCreateWithoutCustomerPackageInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutCustomerPackageInput
    upsert?: InvoiceUpsertWithoutCustomerPackageInput
    disconnect?: InvoiceWhereInput | boolean
    delete?: InvoiceWhereInput | boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutCustomerPackageInput, InvoiceUpdateWithoutCustomerPackageInput>, InvoiceUncheckedUpdateWithoutCustomerPackageInput>
  }

  export type CustomerCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutInvoicesInput
    connect?: CustomerWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<BranchCreateWithoutInvoicesInput, BranchUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutInvoicesInput
    connect?: BranchWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<AppointmentCreateWithoutInvoiceInput, AppointmentUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutInvoiceInput
    connect?: AppointmentWhereUniqueInput
  }

  export type CustomerPackageCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<CustomerPackageCreateWithoutInvoiceInput, CustomerPackageUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutInvoiceInput
    connect?: CustomerPackageWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type CommissionItemCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<CommissionItemCreateWithoutInvoiceInput, CommissionItemUncheckedCreateWithoutInvoiceInput> | CommissionItemCreateWithoutInvoiceInput[] | CommissionItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutInvoiceInput | CommissionItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: CommissionItemCreateManyInvoiceInputEnvelope
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
  }

  export type StaffCommissionCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<StaffCommissionCreateWithoutInvoiceInput, StaffCommissionUncheckedCreateWithoutInvoiceInput> | StaffCommissionCreateWithoutInvoiceInput[] | StaffCommissionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutInvoiceInput | StaffCommissionCreateOrConnectWithoutInvoiceInput[]
    createMany?: StaffCommissionCreateManyInvoiceInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<CommissionItemCreateWithoutInvoiceInput, CommissionItemUncheckedCreateWithoutInvoiceInput> | CommissionItemCreateWithoutInvoiceInput[] | CommissionItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutInvoiceInput | CommissionItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: CommissionItemCreateManyInvoiceInputEnvelope
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
  }

  export type StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<StaffCommissionCreateWithoutInvoiceInput, StaffCommissionUncheckedCreateWithoutInvoiceInput> | StaffCommissionCreateWithoutInvoiceInput[] | StaffCommissionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutInvoiceInput | StaffCommissionCreateOrConnectWithoutInvoiceInput[]
    createMany?: StaffCommissionCreateManyInvoiceInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type CustomerUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutInvoicesInput
    upsert?: CustomerUpsertWithoutInvoicesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutInvoicesInput, CustomerUpdateWithoutInvoicesInput>, CustomerUncheckedUpdateWithoutInvoicesInput>
  }

  export type BranchUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<BranchCreateWithoutInvoicesInput, BranchUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutInvoicesInput
    upsert?: BranchUpsertWithoutInvoicesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutInvoicesInput, BranchUpdateWithoutInvoicesInput>, BranchUncheckedUpdateWithoutInvoicesInput>
  }

  export type AppointmentUpdateOneWithoutInvoiceNestedInput = {
    create?: XOR<AppointmentCreateWithoutInvoiceInput, AppointmentUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutInvoiceInput
    upsert?: AppointmentUpsertWithoutInvoiceInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutInvoiceInput, AppointmentUpdateWithoutInvoiceInput>, AppointmentUncheckedUpdateWithoutInvoiceInput>
  }

  export type CustomerPackageUpdateOneWithoutInvoiceNestedInput = {
    create?: XOR<CustomerPackageCreateWithoutInvoiceInput, CustomerPackageUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: CustomerPackageCreateOrConnectWithoutInvoiceInput
    upsert?: CustomerPackageUpsertWithoutInvoiceInput
    disconnect?: CustomerPackageWhereInput | boolean
    delete?: CustomerPackageWhereInput | boolean
    connect?: CustomerPackageWhereUniqueInput
    update?: XOR<XOR<CustomerPackageUpdateToOneWithWhereWithoutInvoiceInput, CustomerPackageUpdateWithoutInvoiceInput>, CustomerPackageUncheckedUpdateWithoutInvoiceInput>
  }

  export type PaymentUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvoiceInput | PaymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvoiceInput | PaymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvoiceInput | PaymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type CommissionItemUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<CommissionItemCreateWithoutInvoiceInput, CommissionItemUncheckedCreateWithoutInvoiceInput> | CommissionItemCreateWithoutInvoiceInput[] | CommissionItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutInvoiceInput | CommissionItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: CommissionItemUpsertWithWhereUniqueWithoutInvoiceInput | CommissionItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: CommissionItemCreateManyInvoiceInputEnvelope
    set?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    disconnect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    delete?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    update?: CommissionItemUpdateWithWhereUniqueWithoutInvoiceInput | CommissionItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: CommissionItemUpdateManyWithWhereWithoutInvoiceInput | CommissionItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
  }

  export type StaffCommissionUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutInvoiceInput, StaffCommissionUncheckedCreateWithoutInvoiceInput> | StaffCommissionCreateWithoutInvoiceInput[] | StaffCommissionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutInvoiceInput | StaffCommissionCreateOrConnectWithoutInvoiceInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutInvoiceInput | StaffCommissionUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: StaffCommissionCreateManyInvoiceInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutInvoiceInput | StaffCommissionUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutInvoiceInput | StaffCommissionUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvoiceInput | PaymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvoiceInput | PaymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvoiceInput | PaymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<CommissionItemCreateWithoutInvoiceInput, CommissionItemUncheckedCreateWithoutInvoiceInput> | CommissionItemCreateWithoutInvoiceInput[] | CommissionItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutInvoiceInput | CommissionItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: CommissionItemUpsertWithWhereUniqueWithoutInvoiceInput | CommissionItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: CommissionItemCreateManyInvoiceInputEnvelope
    set?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    disconnect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    delete?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    update?: CommissionItemUpdateWithWhereUniqueWithoutInvoiceInput | CommissionItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: CommissionItemUpdateManyWithWhereWithoutInvoiceInput | CommissionItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
  }

  export type StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutInvoiceInput, StaffCommissionUncheckedCreateWithoutInvoiceInput> | StaffCommissionCreateWithoutInvoiceInput[] | StaffCommissionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutInvoiceInput | StaffCommissionCreateOrConnectWithoutInvoiceInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutInvoiceInput | StaffCommissionUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: StaffCommissionCreateManyInvoiceInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutInvoiceInput | StaffCommissionUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutInvoiceInput | StaffCommissionUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type CashRegisterLogCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<CashRegisterLogCreateWithoutPaymentsInput, CashRegisterLogUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutPaymentsInput
    connect?: CashRegisterLogWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type InvoiceUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentsInput
    upsert?: InvoiceUpsertWithoutPaymentsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutPaymentsInput, InvoiceUpdateWithoutPaymentsInput>, InvoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type CashRegisterLogUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<CashRegisterLogCreateWithoutPaymentsInput, CashRegisterLogUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CashRegisterLogCreateOrConnectWithoutPaymentsInput
    upsert?: CashRegisterLogUpsertWithoutPaymentsInput
    disconnect?: CashRegisterLogWhereInput | boolean
    delete?: CashRegisterLogWhereInput | boolean
    connect?: CashRegisterLogWhereUniqueInput
    update?: XOR<XOR<CashRegisterLogUpdateToOneWithWhereWithoutPaymentsInput, CashRegisterLogUpdateWithoutPaymentsInput>, CashRegisterLogUncheckedUpdateWithoutPaymentsInput>
  }

  export type BranchCreateNestedOneWithoutCommissionRulesInput = {
    create?: XOR<BranchCreateWithoutCommissionRulesInput, BranchUncheckedCreateWithoutCommissionRulesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCommissionRulesInput
    connect?: BranchWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutCommissionRulesInput = {
    create?: XOR<ServiceCreateWithoutCommissionRulesInput, ServiceUncheckedCreateWithoutCommissionRulesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutCommissionRulesInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStaffCommissionRulesInput = {
    create?: XOR<UserCreateWithoutStaffCommissionRulesInput, UserUncheckedCreateWithoutStaffCommissionRulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffCommissionRulesInput
    connect?: UserWhereUniqueInput
  }

  export type CommissionItemCreateNestedManyWithoutAppliedRuleInput = {
    create?: XOR<CommissionItemCreateWithoutAppliedRuleInput, CommissionItemUncheckedCreateWithoutAppliedRuleInput> | CommissionItemCreateWithoutAppliedRuleInput[] | CommissionItemUncheckedCreateWithoutAppliedRuleInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutAppliedRuleInput | CommissionItemCreateOrConnectWithoutAppliedRuleInput[]
    createMany?: CommissionItemCreateManyAppliedRuleInputEnvelope
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
  }

  export type CommissionItemUncheckedCreateNestedManyWithoutAppliedRuleInput = {
    create?: XOR<CommissionItemCreateWithoutAppliedRuleInput, CommissionItemUncheckedCreateWithoutAppliedRuleInput> | CommissionItemCreateWithoutAppliedRuleInput[] | CommissionItemUncheckedCreateWithoutAppliedRuleInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutAppliedRuleInput | CommissionItemCreateOrConnectWithoutAppliedRuleInput[]
    createMany?: CommissionItemCreateManyAppliedRuleInputEnvelope
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
  }

  export type EnumCommissionRuleTypeFieldUpdateOperationsInput = {
    set?: $Enums.CommissionRuleType
  }

  export type EnumCommissionTypeFieldUpdateOperationsInput = {
    set?: $Enums.CommissionType
  }

  export type BranchUpdateOneRequiredWithoutCommissionRulesNestedInput = {
    create?: XOR<BranchCreateWithoutCommissionRulesInput, BranchUncheckedCreateWithoutCommissionRulesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCommissionRulesInput
    upsert?: BranchUpsertWithoutCommissionRulesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutCommissionRulesInput, BranchUpdateWithoutCommissionRulesInput>, BranchUncheckedUpdateWithoutCommissionRulesInput>
  }

  export type ServiceUpdateOneWithoutCommissionRulesNestedInput = {
    create?: XOR<ServiceCreateWithoutCommissionRulesInput, ServiceUncheckedCreateWithoutCommissionRulesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutCommissionRulesInput
    upsert?: ServiceUpsertWithoutCommissionRulesInput
    disconnect?: ServiceWhereInput | boolean
    delete?: ServiceWhereInput | boolean
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutCommissionRulesInput, ServiceUpdateWithoutCommissionRulesInput>, ServiceUncheckedUpdateWithoutCommissionRulesInput>
  }

  export type UserUpdateOneWithoutStaffCommissionRulesNestedInput = {
    create?: XOR<UserCreateWithoutStaffCommissionRulesInput, UserUncheckedCreateWithoutStaffCommissionRulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffCommissionRulesInput
    upsert?: UserUpsertWithoutStaffCommissionRulesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffCommissionRulesInput, UserUpdateWithoutStaffCommissionRulesInput>, UserUncheckedUpdateWithoutStaffCommissionRulesInput>
  }

  export type CommissionItemUpdateManyWithoutAppliedRuleNestedInput = {
    create?: XOR<CommissionItemCreateWithoutAppliedRuleInput, CommissionItemUncheckedCreateWithoutAppliedRuleInput> | CommissionItemCreateWithoutAppliedRuleInput[] | CommissionItemUncheckedCreateWithoutAppliedRuleInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutAppliedRuleInput | CommissionItemCreateOrConnectWithoutAppliedRuleInput[]
    upsert?: CommissionItemUpsertWithWhereUniqueWithoutAppliedRuleInput | CommissionItemUpsertWithWhereUniqueWithoutAppliedRuleInput[]
    createMany?: CommissionItemCreateManyAppliedRuleInputEnvelope
    set?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    disconnect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    delete?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    update?: CommissionItemUpdateWithWhereUniqueWithoutAppliedRuleInput | CommissionItemUpdateWithWhereUniqueWithoutAppliedRuleInput[]
    updateMany?: CommissionItemUpdateManyWithWhereWithoutAppliedRuleInput | CommissionItemUpdateManyWithWhereWithoutAppliedRuleInput[]
    deleteMany?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
  }

  export type CommissionItemUncheckedUpdateManyWithoutAppliedRuleNestedInput = {
    create?: XOR<CommissionItemCreateWithoutAppliedRuleInput, CommissionItemUncheckedCreateWithoutAppliedRuleInput> | CommissionItemCreateWithoutAppliedRuleInput[] | CommissionItemUncheckedCreateWithoutAppliedRuleInput[]
    connectOrCreate?: CommissionItemCreateOrConnectWithoutAppliedRuleInput | CommissionItemCreateOrConnectWithoutAppliedRuleInput[]
    upsert?: CommissionItemUpsertWithWhereUniqueWithoutAppliedRuleInput | CommissionItemUpsertWithWhereUniqueWithoutAppliedRuleInput[]
    createMany?: CommissionItemCreateManyAppliedRuleInputEnvelope
    set?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    disconnect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    delete?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    connect?: CommissionItemWhereUniqueInput | CommissionItemWhereUniqueInput[]
    update?: CommissionItemUpdateWithWhereUniqueWithoutAppliedRuleInput | CommissionItemUpdateWithWhereUniqueWithoutAppliedRuleInput[]
    updateMany?: CommissionItemUpdateManyWithWhereWithoutAppliedRuleInput | CommissionItemUpdateManyWithWhereWithoutAppliedRuleInput[]
    deleteMany?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutCommissionItemsInput = {
    create?: XOR<InvoiceCreateWithoutCommissionItemsInput, InvoiceUncheckedCreateWithoutCommissionItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutCommissionItemsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutCommissionItemsInput = {
    create?: XOR<ServiceCreateWithoutCommissionItemsInput, ServiceUncheckedCreateWithoutCommissionItemsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutCommissionItemsInput
    connect?: ServiceWhereUniqueInput
  }

  export type StaffCommissionCreateNestedManyWithoutCommissionItemInput = {
    create?: XOR<StaffCommissionCreateWithoutCommissionItemInput, StaffCommissionUncheckedCreateWithoutCommissionItemInput> | StaffCommissionCreateWithoutCommissionItemInput[] | StaffCommissionUncheckedCreateWithoutCommissionItemInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutCommissionItemInput | StaffCommissionCreateOrConnectWithoutCommissionItemInput[]
    createMany?: StaffCommissionCreateManyCommissionItemInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type CommissionRuleCreateNestedOneWithoutCommissionItemsInput = {
    create?: XOR<CommissionRuleCreateWithoutCommissionItemsInput, CommissionRuleUncheckedCreateWithoutCommissionItemsInput>
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutCommissionItemsInput
    connect?: CommissionRuleWhereUniqueInput
  }

  export type StaffCommissionUncheckedCreateNestedManyWithoutCommissionItemInput = {
    create?: XOR<StaffCommissionCreateWithoutCommissionItemInput, StaffCommissionUncheckedCreateWithoutCommissionItemInput> | StaffCommissionCreateWithoutCommissionItemInput[] | StaffCommissionUncheckedCreateWithoutCommissionItemInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutCommissionItemInput | StaffCommissionCreateOrConnectWithoutCommissionItemInput[]
    createMany?: StaffCommissionCreateManyCommissionItemInputEnvelope
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
  }

  export type EnumCommissionStatusFieldUpdateOperationsInput = {
    set?: $Enums.CommissionStatus
  }

  export type InvoiceUpdateOneRequiredWithoutCommissionItemsNestedInput = {
    create?: XOR<InvoiceCreateWithoutCommissionItemsInput, InvoiceUncheckedCreateWithoutCommissionItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutCommissionItemsInput
    upsert?: InvoiceUpsertWithoutCommissionItemsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutCommissionItemsInput, InvoiceUpdateWithoutCommissionItemsInput>, InvoiceUncheckedUpdateWithoutCommissionItemsInput>
  }

  export type ServiceUpdateOneWithoutCommissionItemsNestedInput = {
    create?: XOR<ServiceCreateWithoutCommissionItemsInput, ServiceUncheckedCreateWithoutCommissionItemsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutCommissionItemsInput
    upsert?: ServiceUpsertWithoutCommissionItemsInput
    disconnect?: ServiceWhereInput | boolean
    delete?: ServiceWhereInput | boolean
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutCommissionItemsInput, ServiceUpdateWithoutCommissionItemsInput>, ServiceUncheckedUpdateWithoutCommissionItemsInput>
  }

  export type StaffCommissionUpdateManyWithoutCommissionItemNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutCommissionItemInput, StaffCommissionUncheckedCreateWithoutCommissionItemInput> | StaffCommissionCreateWithoutCommissionItemInput[] | StaffCommissionUncheckedCreateWithoutCommissionItemInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutCommissionItemInput | StaffCommissionCreateOrConnectWithoutCommissionItemInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutCommissionItemInput | StaffCommissionUpsertWithWhereUniqueWithoutCommissionItemInput[]
    createMany?: StaffCommissionCreateManyCommissionItemInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutCommissionItemInput | StaffCommissionUpdateWithWhereUniqueWithoutCommissionItemInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutCommissionItemInput | StaffCommissionUpdateManyWithWhereWithoutCommissionItemInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type CommissionRuleUpdateOneWithoutCommissionItemsNestedInput = {
    create?: XOR<CommissionRuleCreateWithoutCommissionItemsInput, CommissionRuleUncheckedCreateWithoutCommissionItemsInput>
    connectOrCreate?: CommissionRuleCreateOrConnectWithoutCommissionItemsInput
    upsert?: CommissionRuleUpsertWithoutCommissionItemsInput
    disconnect?: CommissionRuleWhereInput | boolean
    delete?: CommissionRuleWhereInput | boolean
    connect?: CommissionRuleWhereUniqueInput
    update?: XOR<XOR<CommissionRuleUpdateToOneWithWhereWithoutCommissionItemsInput, CommissionRuleUpdateWithoutCommissionItemsInput>, CommissionRuleUncheckedUpdateWithoutCommissionItemsInput>
  }

  export type StaffCommissionUncheckedUpdateManyWithoutCommissionItemNestedInput = {
    create?: XOR<StaffCommissionCreateWithoutCommissionItemInput, StaffCommissionUncheckedCreateWithoutCommissionItemInput> | StaffCommissionCreateWithoutCommissionItemInput[] | StaffCommissionUncheckedCreateWithoutCommissionItemInput[]
    connectOrCreate?: StaffCommissionCreateOrConnectWithoutCommissionItemInput | StaffCommissionCreateOrConnectWithoutCommissionItemInput[]
    upsert?: StaffCommissionUpsertWithWhereUniqueWithoutCommissionItemInput | StaffCommissionUpsertWithWhereUniqueWithoutCommissionItemInput[]
    createMany?: StaffCommissionCreateManyCommissionItemInputEnvelope
    set?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    disconnect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    delete?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    connect?: StaffCommissionWhereUniqueInput | StaffCommissionWhereUniqueInput[]
    update?: StaffCommissionUpdateWithWhereUniqueWithoutCommissionItemInput | StaffCommissionUpdateWithWhereUniqueWithoutCommissionItemInput[]
    updateMany?: StaffCommissionUpdateManyWithWhereWithoutCommissionItemInput | StaffCommissionUpdateManyWithWhereWithoutCommissionItemInput[]
    deleteMany?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommissionsInput = {
    create?: XOR<UserCreateWithoutCommissionsInput, UserUncheckedCreateWithoutCommissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommissionsInput
    connect?: UserWhereUniqueInput
  }

  export type CommissionItemCreateNestedOneWithoutCommissionsInput = {
    create?: XOR<CommissionItemCreateWithoutCommissionsInput, CommissionItemUncheckedCreateWithoutCommissionsInput>
    connectOrCreate?: CommissionItemCreateOrConnectWithoutCommissionsInput
    connect?: CommissionItemWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutStaffCommissionInput = {
    create?: XOR<InvoiceCreateWithoutStaffCommissionInput, InvoiceUncheckedCreateWithoutStaffCommissionInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutStaffCommissionInput
    connect?: InvoiceWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutStaffCommissionInput = {
    create?: XOR<ServiceCreateWithoutStaffCommissionInput, ServiceUncheckedCreateWithoutStaffCommissionInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutStaffCommissionInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommissionsNestedInput = {
    create?: XOR<UserCreateWithoutCommissionsInput, UserUncheckedCreateWithoutCommissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommissionsInput
    upsert?: UserUpsertWithoutCommissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommissionsInput, UserUpdateWithoutCommissionsInput>, UserUncheckedUpdateWithoutCommissionsInput>
  }

  export type CommissionItemUpdateOneRequiredWithoutCommissionsNestedInput = {
    create?: XOR<CommissionItemCreateWithoutCommissionsInput, CommissionItemUncheckedCreateWithoutCommissionsInput>
    connectOrCreate?: CommissionItemCreateOrConnectWithoutCommissionsInput
    upsert?: CommissionItemUpsertWithoutCommissionsInput
    connect?: CommissionItemWhereUniqueInput
    update?: XOR<XOR<CommissionItemUpdateToOneWithWhereWithoutCommissionsInput, CommissionItemUpdateWithoutCommissionsInput>, CommissionItemUncheckedUpdateWithoutCommissionsInput>
  }

  export type InvoiceUpdateOneRequiredWithoutStaffCommissionNestedInput = {
    create?: XOR<InvoiceCreateWithoutStaffCommissionInput, InvoiceUncheckedCreateWithoutStaffCommissionInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutStaffCommissionInput
    upsert?: InvoiceUpsertWithoutStaffCommissionInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutStaffCommissionInput, InvoiceUpdateWithoutStaffCommissionInput>, InvoiceUncheckedUpdateWithoutStaffCommissionInput>
  }

  export type ServiceUpdateOneWithoutStaffCommissionNestedInput = {
    create?: XOR<ServiceCreateWithoutStaffCommissionInput, ServiceUncheckedCreateWithoutStaffCommissionInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutStaffCommissionInput
    upsert?: ServiceUpsertWithoutStaffCommissionInput
    disconnect?: ServiceWhereInput | boolean
    delete?: ServiceWhereInput | boolean
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutStaffCommissionInput, ServiceUpdateWithoutStaffCommissionInput>, ServiceUncheckedUpdateWithoutStaffCommissionInput>
  }

  export type BranchCreateNestedOneWithoutCashRegisterLogInput = {
    create?: XOR<BranchCreateWithoutCashRegisterLogInput, BranchUncheckedCreateWithoutCashRegisterLogInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCashRegisterLogInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCashRegisterLogInput = {
    create?: XOR<UserCreateWithoutCashRegisterLogInput, UserUncheckedCreateWithoutCashRegisterLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashRegisterLogInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutCashLogInput = {
    create?: XOR<PaymentCreateWithoutCashLogInput, PaymentUncheckedCreateWithoutCashLogInput> | PaymentCreateWithoutCashLogInput[] | PaymentUncheckedCreateWithoutCashLogInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashLogInput | PaymentCreateOrConnectWithoutCashLogInput[]
    createMany?: PaymentCreateManyCashLogInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutCashLogInput = {
    create?: XOR<PaymentCreateWithoutCashLogInput, PaymentUncheckedCreateWithoutCashLogInput> | PaymentCreateWithoutCashLogInput[] | PaymentUncheckedCreateWithoutCashLogInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashLogInput | PaymentCreateOrConnectWithoutCashLogInput[]
    createMany?: PaymentCreateManyCashLogInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumCashLogTypeFieldUpdateOperationsInput = {
    set?: $Enums.CashLogType
  }

  export type NullableEnumCashMovementCategoryFieldUpdateOperationsInput = {
    set?: $Enums.CashMovementCategory | null
  }

  export type BranchUpdateOneRequiredWithoutCashRegisterLogNestedInput = {
    create?: XOR<BranchCreateWithoutCashRegisterLogInput, BranchUncheckedCreateWithoutCashRegisterLogInput>
    connectOrCreate?: BranchCreateOrConnectWithoutCashRegisterLogInput
    upsert?: BranchUpsertWithoutCashRegisterLogInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutCashRegisterLogInput, BranchUpdateWithoutCashRegisterLogInput>, BranchUncheckedUpdateWithoutCashRegisterLogInput>
  }

  export type UserUpdateOneRequiredWithoutCashRegisterLogNestedInput = {
    create?: XOR<UserCreateWithoutCashRegisterLogInput, UserUncheckedCreateWithoutCashRegisterLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashRegisterLogInput
    upsert?: UserUpsertWithoutCashRegisterLogInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCashRegisterLogInput, UserUpdateWithoutCashRegisterLogInput>, UserUncheckedUpdateWithoutCashRegisterLogInput>
  }

  export type PaymentUpdateManyWithoutCashLogNestedInput = {
    create?: XOR<PaymentCreateWithoutCashLogInput, PaymentUncheckedCreateWithoutCashLogInput> | PaymentCreateWithoutCashLogInput[] | PaymentUncheckedCreateWithoutCashLogInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashLogInput | PaymentCreateOrConnectWithoutCashLogInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCashLogInput | PaymentUpsertWithWhereUniqueWithoutCashLogInput[]
    createMany?: PaymentCreateManyCashLogInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCashLogInput | PaymentUpdateWithWhereUniqueWithoutCashLogInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCashLogInput | PaymentUpdateManyWithWhereWithoutCashLogInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutCashLogNestedInput = {
    create?: XOR<PaymentCreateWithoutCashLogInput, PaymentUncheckedCreateWithoutCashLogInput> | PaymentCreateWithoutCashLogInput[] | PaymentUncheckedCreateWithoutCashLogInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashLogInput | PaymentCreateOrConnectWithoutCashLogInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCashLogInput | PaymentUpsertWithWhereUniqueWithoutCashLogInput[]
    createMany?: PaymentCreateManyCashLogInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCashLogInput | PaymentUpdateWithWhereUniqueWithoutCashLogInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCashLogInput | PaymentUpdateManyWithWhereWithoutCashLogInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BranchCreateNestedOneWithoutNotificationProvidersInput = {
    create?: XOR<BranchCreateWithoutNotificationProvidersInput, BranchUncheckedCreateWithoutNotificationProvidersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationProvidersInput
    connect?: BranchWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type BranchUpdateOneRequiredWithoutNotificationProvidersNestedInput = {
    create?: XOR<BranchCreateWithoutNotificationProvidersInput, BranchUncheckedCreateWithoutNotificationProvidersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationProvidersInput
    upsert?: BranchUpsertWithoutNotificationProvidersInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNotificationProvidersInput, BranchUpdateWithoutNotificationProvidersInput>, BranchUncheckedUpdateWithoutNotificationProvidersInput>
  }

  export type BranchCreateNestedOneWithoutNotificationTemplatesInput = {
    create?: XOR<BranchCreateWithoutNotificationTemplatesInput, BranchUncheckedCreateWithoutNotificationTemplatesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationTemplatesInput
    connect?: BranchWhereUniqueInput
  }

  export type NotificationTriggerCreateNestedManyWithoutTemplateInput = {
    create?: XOR<NotificationTriggerCreateWithoutTemplateInput, NotificationTriggerUncheckedCreateWithoutTemplateInput> | NotificationTriggerCreateWithoutTemplateInput[] | NotificationTriggerUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutTemplateInput | NotificationTriggerCreateOrConnectWithoutTemplateInput[]
    createMany?: NotificationTriggerCreateManyTemplateInputEnvelope
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
  }

  export type NotificationQueueCreateNestedManyWithoutTemplateInput = {
    create?: XOR<NotificationQueueCreateWithoutTemplateInput, NotificationQueueUncheckedCreateWithoutTemplateInput> | NotificationQueueCreateWithoutTemplateInput[] | NotificationQueueUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTemplateInput | NotificationQueueCreateOrConnectWithoutTemplateInput[]
    createMany?: NotificationQueueCreateManyTemplateInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryCreateNestedManyWithoutTemplateInput = {
    create?: XOR<NotificationHistoryCreateWithoutTemplateInput, NotificationHistoryUncheckedCreateWithoutTemplateInput> | NotificationHistoryCreateWithoutTemplateInput[] | NotificationHistoryUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTemplateInput | NotificationHistoryCreateOrConnectWithoutTemplateInput[]
    createMany?: NotificationHistoryCreateManyTemplateInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type NotificationTriggerUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<NotificationTriggerCreateWithoutTemplateInput, NotificationTriggerUncheckedCreateWithoutTemplateInput> | NotificationTriggerCreateWithoutTemplateInput[] | NotificationTriggerUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutTemplateInput | NotificationTriggerCreateOrConnectWithoutTemplateInput[]
    createMany?: NotificationTriggerCreateManyTemplateInputEnvelope
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
  }

  export type NotificationQueueUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<NotificationQueueCreateWithoutTemplateInput, NotificationQueueUncheckedCreateWithoutTemplateInput> | NotificationQueueCreateWithoutTemplateInput[] | NotificationQueueUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTemplateInput | NotificationQueueCreateOrConnectWithoutTemplateInput[]
    createMany?: NotificationQueueCreateManyTemplateInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<NotificationHistoryCreateWithoutTemplateInput, NotificationHistoryUncheckedCreateWithoutTemplateInput> | NotificationHistoryCreateWithoutTemplateInput[] | NotificationHistoryUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTemplateInput | NotificationHistoryCreateOrConnectWithoutTemplateInput[]
    createMany?: NotificationHistoryCreateManyTemplateInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type BranchUpdateOneRequiredWithoutNotificationTemplatesNestedInput = {
    create?: XOR<BranchCreateWithoutNotificationTemplatesInput, BranchUncheckedCreateWithoutNotificationTemplatesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationTemplatesInput
    upsert?: BranchUpsertWithoutNotificationTemplatesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNotificationTemplatesInput, BranchUpdateWithoutNotificationTemplatesInput>, BranchUncheckedUpdateWithoutNotificationTemplatesInput>
  }

  export type NotificationTriggerUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<NotificationTriggerCreateWithoutTemplateInput, NotificationTriggerUncheckedCreateWithoutTemplateInput> | NotificationTriggerCreateWithoutTemplateInput[] | NotificationTriggerUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutTemplateInput | NotificationTriggerCreateOrConnectWithoutTemplateInput[]
    upsert?: NotificationTriggerUpsertWithWhereUniqueWithoutTemplateInput | NotificationTriggerUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: NotificationTriggerCreateManyTemplateInputEnvelope
    set?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    disconnect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    delete?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    update?: NotificationTriggerUpdateWithWhereUniqueWithoutTemplateInput | NotificationTriggerUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: NotificationTriggerUpdateManyWithWhereWithoutTemplateInput | NotificationTriggerUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: NotificationTriggerScalarWhereInput | NotificationTriggerScalarWhereInput[]
  }

  export type NotificationQueueUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutTemplateInput, NotificationQueueUncheckedCreateWithoutTemplateInput> | NotificationQueueCreateWithoutTemplateInput[] | NotificationQueueUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTemplateInput | NotificationQueueCreateOrConnectWithoutTemplateInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutTemplateInput | NotificationQueueUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: NotificationQueueCreateManyTemplateInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutTemplateInput | NotificationQueueUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutTemplateInput | NotificationQueueUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutTemplateInput, NotificationHistoryUncheckedCreateWithoutTemplateInput> | NotificationHistoryCreateWithoutTemplateInput[] | NotificationHistoryUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTemplateInput | NotificationHistoryCreateOrConnectWithoutTemplateInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutTemplateInput | NotificationHistoryUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: NotificationHistoryCreateManyTemplateInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutTemplateInput | NotificationHistoryUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutTemplateInput | NotificationHistoryUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type NotificationTriggerUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<NotificationTriggerCreateWithoutTemplateInput, NotificationTriggerUncheckedCreateWithoutTemplateInput> | NotificationTriggerCreateWithoutTemplateInput[] | NotificationTriggerUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutTemplateInput | NotificationTriggerCreateOrConnectWithoutTemplateInput[]
    upsert?: NotificationTriggerUpsertWithWhereUniqueWithoutTemplateInput | NotificationTriggerUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: NotificationTriggerCreateManyTemplateInputEnvelope
    set?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    disconnect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    delete?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    connect?: NotificationTriggerWhereUniqueInput | NotificationTriggerWhereUniqueInput[]
    update?: NotificationTriggerUpdateWithWhereUniqueWithoutTemplateInput | NotificationTriggerUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: NotificationTriggerUpdateManyWithWhereWithoutTemplateInput | NotificationTriggerUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: NotificationTriggerScalarWhereInput | NotificationTriggerScalarWhereInput[]
  }

  export type NotificationQueueUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutTemplateInput, NotificationQueueUncheckedCreateWithoutTemplateInput> | NotificationQueueCreateWithoutTemplateInput[] | NotificationQueueUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTemplateInput | NotificationQueueCreateOrConnectWithoutTemplateInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutTemplateInput | NotificationQueueUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: NotificationQueueCreateManyTemplateInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutTemplateInput | NotificationQueueUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutTemplateInput | NotificationQueueUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutTemplateInput, NotificationHistoryUncheckedCreateWithoutTemplateInput> | NotificationHistoryCreateWithoutTemplateInput[] | NotificationHistoryUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTemplateInput | NotificationHistoryCreateOrConnectWithoutTemplateInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutTemplateInput | NotificationHistoryUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: NotificationHistoryCreateManyTemplateInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutTemplateInput | NotificationHistoryUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutTemplateInput | NotificationHistoryUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type NotificationTemplateCreateNestedOneWithoutTriggersInput = {
    create?: XOR<NotificationTemplateCreateWithoutTriggersInput, NotificationTemplateUncheckedCreateWithoutTriggersInput>
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutTriggersInput
    connect?: NotificationTemplateWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutNotificationTriggersInput = {
    create?: XOR<BranchCreateWithoutNotificationTriggersInput, BranchUncheckedCreateWithoutNotificationTriggersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationTriggersInput
    connect?: BranchWhereUniqueInput
  }

  export type NotificationQueueCreateNestedManyWithoutTriggerInput = {
    create?: XOR<NotificationQueueCreateWithoutTriggerInput, NotificationQueueUncheckedCreateWithoutTriggerInput> | NotificationQueueCreateWithoutTriggerInput[] | NotificationQueueUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTriggerInput | NotificationQueueCreateOrConnectWithoutTriggerInput[]
    createMany?: NotificationQueueCreateManyTriggerInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryCreateNestedManyWithoutTriggerInput = {
    create?: XOR<NotificationHistoryCreateWithoutTriggerInput, NotificationHistoryUncheckedCreateWithoutTriggerInput> | NotificationHistoryCreateWithoutTriggerInput[] | NotificationHistoryUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTriggerInput | NotificationHistoryCreateOrConnectWithoutTriggerInput[]
    createMany?: NotificationHistoryCreateManyTriggerInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type NotificationQueueUncheckedCreateNestedManyWithoutTriggerInput = {
    create?: XOR<NotificationQueueCreateWithoutTriggerInput, NotificationQueueUncheckedCreateWithoutTriggerInput> | NotificationQueueCreateWithoutTriggerInput[] | NotificationQueueUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTriggerInput | NotificationQueueCreateOrConnectWithoutTriggerInput[]
    createMany?: NotificationQueueCreateManyTriggerInputEnvelope
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
  }

  export type NotificationHistoryUncheckedCreateNestedManyWithoutTriggerInput = {
    create?: XOR<NotificationHistoryCreateWithoutTriggerInput, NotificationHistoryUncheckedCreateWithoutTriggerInput> | NotificationHistoryCreateWithoutTriggerInput[] | NotificationHistoryUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTriggerInput | NotificationHistoryCreateOrConnectWithoutTriggerInput[]
    createMany?: NotificationHistoryCreateManyTriggerInputEnvelope
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
  }

  export type EnumNotificationEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationEventType
  }

  export type NotificationTemplateUpdateOneRequiredWithoutTriggersNestedInput = {
    create?: XOR<NotificationTemplateCreateWithoutTriggersInput, NotificationTemplateUncheckedCreateWithoutTriggersInput>
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutTriggersInput
    upsert?: NotificationTemplateUpsertWithoutTriggersInput
    connect?: NotificationTemplateWhereUniqueInput
    update?: XOR<XOR<NotificationTemplateUpdateToOneWithWhereWithoutTriggersInput, NotificationTemplateUpdateWithoutTriggersInput>, NotificationTemplateUncheckedUpdateWithoutTriggersInput>
  }

  export type BranchUpdateOneRequiredWithoutNotificationTriggersNestedInput = {
    create?: XOR<BranchCreateWithoutNotificationTriggersInput, BranchUncheckedCreateWithoutNotificationTriggersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationTriggersInput
    upsert?: BranchUpsertWithoutNotificationTriggersInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNotificationTriggersInput, BranchUpdateWithoutNotificationTriggersInput>, BranchUncheckedUpdateWithoutNotificationTriggersInput>
  }

  export type NotificationQueueUpdateManyWithoutTriggerNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutTriggerInput, NotificationQueueUncheckedCreateWithoutTriggerInput> | NotificationQueueCreateWithoutTriggerInput[] | NotificationQueueUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTriggerInput | NotificationQueueCreateOrConnectWithoutTriggerInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutTriggerInput | NotificationQueueUpsertWithWhereUniqueWithoutTriggerInput[]
    createMany?: NotificationQueueCreateManyTriggerInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutTriggerInput | NotificationQueueUpdateWithWhereUniqueWithoutTriggerInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutTriggerInput | NotificationQueueUpdateManyWithWhereWithoutTriggerInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUpdateManyWithoutTriggerNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutTriggerInput, NotificationHistoryUncheckedCreateWithoutTriggerInput> | NotificationHistoryCreateWithoutTriggerInput[] | NotificationHistoryUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTriggerInput | NotificationHistoryCreateOrConnectWithoutTriggerInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutTriggerInput | NotificationHistoryUpsertWithWhereUniqueWithoutTriggerInput[]
    createMany?: NotificationHistoryCreateManyTriggerInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutTriggerInput | NotificationHistoryUpdateWithWhereUniqueWithoutTriggerInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutTriggerInput | NotificationHistoryUpdateManyWithWhereWithoutTriggerInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type NotificationQueueUncheckedUpdateManyWithoutTriggerNestedInput = {
    create?: XOR<NotificationQueueCreateWithoutTriggerInput, NotificationQueueUncheckedCreateWithoutTriggerInput> | NotificationQueueCreateWithoutTriggerInput[] | NotificationQueueUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationQueueCreateOrConnectWithoutTriggerInput | NotificationQueueCreateOrConnectWithoutTriggerInput[]
    upsert?: NotificationQueueUpsertWithWhereUniqueWithoutTriggerInput | NotificationQueueUpsertWithWhereUniqueWithoutTriggerInput[]
    createMany?: NotificationQueueCreateManyTriggerInputEnvelope
    set?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    disconnect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    delete?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    connect?: NotificationQueueWhereUniqueInput | NotificationQueueWhereUniqueInput[]
    update?: NotificationQueueUpdateWithWhereUniqueWithoutTriggerInput | NotificationQueueUpdateWithWhereUniqueWithoutTriggerInput[]
    updateMany?: NotificationQueueUpdateManyWithWhereWithoutTriggerInput | NotificationQueueUpdateManyWithWhereWithoutTriggerInput[]
    deleteMany?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutTriggerNestedInput = {
    create?: XOR<NotificationHistoryCreateWithoutTriggerInput, NotificationHistoryUncheckedCreateWithoutTriggerInput> | NotificationHistoryCreateWithoutTriggerInput[] | NotificationHistoryUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: NotificationHistoryCreateOrConnectWithoutTriggerInput | NotificationHistoryCreateOrConnectWithoutTriggerInput[]
    upsert?: NotificationHistoryUpsertWithWhereUniqueWithoutTriggerInput | NotificationHistoryUpsertWithWhereUniqueWithoutTriggerInput[]
    createMany?: NotificationHistoryCreateManyTriggerInputEnvelope
    set?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    disconnect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    delete?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    connect?: NotificationHistoryWhereUniqueInput | NotificationHistoryWhereUniqueInput[]
    update?: NotificationHistoryUpdateWithWhereUniqueWithoutTriggerInput | NotificationHistoryUpdateWithWhereUniqueWithoutTriggerInput[]
    updateMany?: NotificationHistoryUpdateManyWithWhereWithoutTriggerInput | NotificationHistoryUpdateManyWithWhereWithoutTriggerInput[]
    deleteMany?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutNotificationQueueInput = {
    create?: XOR<CustomerCreateWithoutNotificationQueueInput, CustomerUncheckedCreateWithoutNotificationQueueInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationQueueInput
    connect?: CustomerWhereUniqueInput
  }

  export type NotificationTemplateCreateNestedOneWithoutQueueInput = {
    create?: XOR<NotificationTemplateCreateWithoutQueueInput, NotificationTemplateUncheckedCreateWithoutQueueInput>
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutQueueInput
    connect?: NotificationTemplateWhereUniqueInput
  }

  export type NotificationTriggerCreateNestedOneWithoutQueueInput = {
    create?: XOR<NotificationTriggerCreateWithoutQueueInput, NotificationTriggerUncheckedCreateWithoutQueueInput>
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutQueueInput
    connect?: NotificationTriggerWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutNotificationQueueInput = {
    create?: XOR<BranchCreateWithoutNotificationQueueInput, BranchUncheckedCreateWithoutNotificationQueueInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationQueueInput
    connect?: BranchWhereUniqueInput
  }

  export type EnumNotificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.NotificationStatus
  }

  export type CustomerUpdateOneRequiredWithoutNotificationQueueNestedInput = {
    create?: XOR<CustomerCreateWithoutNotificationQueueInput, CustomerUncheckedCreateWithoutNotificationQueueInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationQueueInput
    upsert?: CustomerUpsertWithoutNotificationQueueInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutNotificationQueueInput, CustomerUpdateWithoutNotificationQueueInput>, CustomerUncheckedUpdateWithoutNotificationQueueInput>
  }

  export type NotificationTemplateUpdateOneRequiredWithoutQueueNestedInput = {
    create?: XOR<NotificationTemplateCreateWithoutQueueInput, NotificationTemplateUncheckedCreateWithoutQueueInput>
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutQueueInput
    upsert?: NotificationTemplateUpsertWithoutQueueInput
    connect?: NotificationTemplateWhereUniqueInput
    update?: XOR<XOR<NotificationTemplateUpdateToOneWithWhereWithoutQueueInput, NotificationTemplateUpdateWithoutQueueInput>, NotificationTemplateUncheckedUpdateWithoutQueueInput>
  }

  export type NotificationTriggerUpdateOneWithoutQueueNestedInput = {
    create?: XOR<NotificationTriggerCreateWithoutQueueInput, NotificationTriggerUncheckedCreateWithoutQueueInput>
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutQueueInput
    upsert?: NotificationTriggerUpsertWithoutQueueInput
    disconnect?: NotificationTriggerWhereInput | boolean
    delete?: NotificationTriggerWhereInput | boolean
    connect?: NotificationTriggerWhereUniqueInput
    update?: XOR<XOR<NotificationTriggerUpdateToOneWithWhereWithoutQueueInput, NotificationTriggerUpdateWithoutQueueInput>, NotificationTriggerUncheckedUpdateWithoutQueueInput>
  }

  export type BranchUpdateOneRequiredWithoutNotificationQueueNestedInput = {
    create?: XOR<BranchCreateWithoutNotificationQueueInput, BranchUncheckedCreateWithoutNotificationQueueInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationQueueInput
    upsert?: BranchUpsertWithoutNotificationQueueInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNotificationQueueInput, BranchUpdateWithoutNotificationQueueInput>, BranchUncheckedUpdateWithoutNotificationQueueInput>
  }

  export type CustomerCreateNestedOneWithoutNotificationHistoryInput = {
    create?: XOR<CustomerCreateWithoutNotificationHistoryInput, CustomerUncheckedCreateWithoutNotificationHistoryInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationHistoryInput
    connect?: CustomerWhereUniqueInput
  }

  export type NotificationTemplateCreateNestedOneWithoutHistoryInput = {
    create?: XOR<NotificationTemplateCreateWithoutHistoryInput, NotificationTemplateUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutHistoryInput
    connect?: NotificationTemplateWhereUniqueInput
  }

  export type NotificationTriggerCreateNestedOneWithoutHistoryInput = {
    create?: XOR<NotificationTriggerCreateWithoutHistoryInput, NotificationTriggerUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutHistoryInput
    connect?: NotificationTriggerWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutNotificationHistoryInput = {
    create?: XOR<BranchCreateWithoutNotificationHistoryInput, BranchUncheckedCreateWithoutNotificationHistoryInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationHistoryInput
    connect?: BranchWhereUniqueInput
  }

  export type EnumNotificationDeliveryStatusFieldUpdateOperationsInput = {
    set?: $Enums.NotificationDeliveryStatus
  }

  export type CustomerUpdateOneRequiredWithoutNotificationHistoryNestedInput = {
    create?: XOR<CustomerCreateWithoutNotificationHistoryInput, CustomerUncheckedCreateWithoutNotificationHistoryInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationHistoryInput
    upsert?: CustomerUpsertWithoutNotificationHistoryInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutNotificationHistoryInput, CustomerUpdateWithoutNotificationHistoryInput>, CustomerUncheckedUpdateWithoutNotificationHistoryInput>
  }

  export type NotificationTemplateUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<NotificationTemplateCreateWithoutHistoryInput, NotificationTemplateUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: NotificationTemplateCreateOrConnectWithoutHistoryInput
    upsert?: NotificationTemplateUpsertWithoutHistoryInput
    connect?: NotificationTemplateWhereUniqueInput
    update?: XOR<XOR<NotificationTemplateUpdateToOneWithWhereWithoutHistoryInput, NotificationTemplateUpdateWithoutHistoryInput>, NotificationTemplateUncheckedUpdateWithoutHistoryInput>
  }

  export type NotificationTriggerUpdateOneWithoutHistoryNestedInput = {
    create?: XOR<NotificationTriggerCreateWithoutHistoryInput, NotificationTriggerUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: NotificationTriggerCreateOrConnectWithoutHistoryInput
    upsert?: NotificationTriggerUpsertWithoutHistoryInput
    disconnect?: NotificationTriggerWhereInput | boolean
    delete?: NotificationTriggerWhereInput | boolean
    connect?: NotificationTriggerWhereUniqueInput
    update?: XOR<XOR<NotificationTriggerUpdateToOneWithWhereWithoutHistoryInput, NotificationTriggerUpdateWithoutHistoryInput>, NotificationTriggerUncheckedUpdateWithoutHistoryInput>
  }

  export type BranchUpdateOneRequiredWithoutNotificationHistoryNestedInput = {
    create?: XOR<BranchCreateWithoutNotificationHistoryInput, BranchUncheckedCreateWithoutNotificationHistoryInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationHistoryInput
    upsert?: BranchUpsertWithoutNotificationHistoryInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNotificationHistoryInput, BranchUpdateWithoutNotificationHistoryInput>, BranchUncheckedUpdateWithoutNotificationHistoryInput>
  }

  export type BranchCreateNestedOneWithoutNotificationSettingsInput = {
    create?: XOR<BranchCreateWithoutNotificationSettingsInput, BranchUncheckedCreateWithoutNotificationSettingsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationSettingsInput
    connect?: BranchWhereUniqueInput
  }

  export type BranchUpdateOneRequiredWithoutNotificationSettingsNestedInput = {
    create?: XOR<BranchCreateWithoutNotificationSettingsInput, BranchUncheckedCreateWithoutNotificationSettingsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutNotificationSettingsInput
    upsert?: BranchUpsertWithoutNotificationSettingsInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutNotificationSettingsInput, BranchUpdateWithoutNotificationSettingsInput>, BranchUncheckedUpdateWithoutNotificationSettingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumPackageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageType | EnumPackageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageTypeFilter<$PrismaModel> | $Enums.PackageType
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPackageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageType | EnumPackageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageType[] | ListEnumPackageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageTypeWithAggregatesFilter<$PrismaModel> | $Enums.PackageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackageTypeFilter<$PrismaModel>
    _max?: NestedEnumPackageTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumCommissionRuleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionRuleType | EnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionRuleTypeFilter<$PrismaModel> | $Enums.CommissionRuleType
  }

  export type NestedEnumCommissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeFilter<$PrismaModel> | $Enums.CommissionType
  }

  export type NestedEnumCommissionRuleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionRuleType | EnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionRuleType[] | ListEnumCommissionRuleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionRuleTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommissionRuleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionRuleTypeFilter<$PrismaModel>
    _max?: NestedEnumCommissionRuleTypeFilter<$PrismaModel>
  }

  export type NestedEnumCommissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionTypeFilter<$PrismaModel>
    _max?: NestedEnumCommissionTypeFilter<$PrismaModel>
  }

  export type NestedEnumCommissionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionStatus | EnumCommissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionStatusFilter<$PrismaModel> | $Enums.CommissionStatus
  }

  export type NestedEnumCommissionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionStatus | EnumCommissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionStatus[] | ListEnumCommissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionStatusWithAggregatesFilter<$PrismaModel> | $Enums.CommissionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionStatusFilter<$PrismaModel>
    _max?: NestedEnumCommissionStatusFilter<$PrismaModel>
  }

  export type NestedEnumCashLogTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CashLogType | EnumCashLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCashLogTypeFilter<$PrismaModel> | $Enums.CashLogType
  }

  export type NestedEnumCashMovementCategoryNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CashMovementCategory | EnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCashMovementCategoryNullableFilter<$PrismaModel> | $Enums.CashMovementCategory | null
  }

  export type NestedEnumCashLogTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CashLogType | EnumCashLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CashLogType[] | ListEnumCashLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCashLogTypeWithAggregatesFilter<$PrismaModel> | $Enums.CashLogType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCashLogTypeFilter<$PrismaModel>
    _max?: NestedEnumCashLogTypeFilter<$PrismaModel>
  }

  export type NestedEnumCashMovementCategoryNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CashMovementCategory | EnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CashMovementCategory[] | ListEnumCashMovementCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCashMovementCategoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.CashMovementCategory | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCashMovementCategoryNullableFilter<$PrismaModel>
    _max?: NestedEnumCashMovementCategoryNullableFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumNotificationEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationEventType | EnumNotificationEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationEventTypeFilter<$PrismaModel> | $Enums.NotificationEventType
  }

  export type NestedEnumNotificationEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationEventType | EnumNotificationEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationEventType[] | ListEnumNotificationEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationEventTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationEventTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationDeliveryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationDeliveryStatus | EnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationDeliveryStatusFilter<$PrismaModel> | $Enums.NotificationDeliveryStatus
  }

  export type NestedEnumNotificationDeliveryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationDeliveryStatus | EnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationDeliveryStatus[] | ListEnumNotificationDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationDeliveryStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationDeliveryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationDeliveryStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationDeliveryStatusFilter<$PrismaModel>
  }

  export type AppointmentCreateWithoutStaffInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    branch: BranchCreateNestedOneWithoutAppointmentsInput
    invoice?: InvoiceCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutStaffInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutStaffInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput>
  }

  export type AppointmentCreateManyStaffInputEnvelope = {
    data: AppointmentCreateManyStaffInput | AppointmentCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type CashRegisterLogCreateWithoutUserInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    branch: BranchCreateNestedOneWithoutCashRegisterLogInput
    payments?: PaymentCreateNestedManyWithoutCashLogInput
  }

  export type CashRegisterLogUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    branchId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    payments?: PaymentUncheckedCreateNestedManyWithoutCashLogInput
  }

  export type CashRegisterLogCreateOrConnectWithoutUserInput = {
    where: CashRegisterLogWhereUniqueInput
    create: XOR<CashRegisterLogCreateWithoutUserInput, CashRegisterLogUncheckedCreateWithoutUserInput>
  }

  export type CashRegisterLogCreateManyUserInputEnvelope = {
    data: CashRegisterLogCreateManyUserInput | CashRegisterLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommissionRuleCreateWithoutStaffInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCommissionRulesInput
    service?: ServiceCreateNestedOneWithoutCommissionRulesInput
    commissionItems?: CommissionItemCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleUncheckedCreateWithoutStaffInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    serviceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleCreateOrConnectWithoutStaffInput = {
    where: CommissionRuleWhereUniqueInput
    create: XOR<CommissionRuleCreateWithoutStaffInput, CommissionRuleUncheckedCreateWithoutStaffInput>
  }

  export type CommissionRuleCreateManyStaffInputEnvelope = {
    data: CommissionRuleCreateManyStaffInput | CommissionRuleCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type StaffCommissionCreateWithoutStaffInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    commissionItem: CommissionItemCreateNestedOneWithoutCommissionsInput
    invoice: InvoiceCreateNestedOneWithoutStaffCommissionInput
    service?: ServiceCreateNestedOneWithoutStaffCommissionInput
  }

  export type StaffCommissionUncheckedCreateWithoutStaffInput = {
    id?: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
    serviceId?: string | null
  }

  export type StaffCommissionCreateOrConnectWithoutStaffInput = {
    where: StaffCommissionWhereUniqueInput
    create: XOR<StaffCommissionCreateWithoutStaffInput, StaffCommissionUncheckedCreateWithoutStaffInput>
  }

  export type StaffCommissionCreateManyStaffInputEnvelope = {
    data: StaffCommissionCreateManyStaffInput | StaffCommissionCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type StaffServiceCreateWithoutUserInput = {
    service: ServiceCreateNestedOneWithoutStaffInput
  }

  export type StaffServiceUncheckedCreateWithoutUserInput = {
    serviceId: string
  }

  export type StaffServiceCreateOrConnectWithoutUserInput = {
    where: StaffServiceWhereUniqueInput
    create: XOR<StaffServiceCreateWithoutUserInput, StaffServiceUncheckedCreateWithoutUserInput>
  }

  export type StaffServiceCreateManyUserInputEnvelope = {
    data: StaffServiceCreateManyUserInput | StaffServiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BranchCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutUsersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
  }

  export type WorkHourCreateWithoutStaffInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutWorkHoursInput
  }

  export type WorkHourUncheckedCreateWithoutStaffInput = {
    id?: string
    branchId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkHourCreateOrConnectWithoutStaffInput = {
    where: WorkHourWhereUniqueInput
    create: XOR<WorkHourCreateWithoutStaffInput, WorkHourUncheckedCreateWithoutStaffInput>
  }

  export type WorkHourCreateManyStaffInputEnvelope = {
    data: WorkHourCreateManyStaffInput | WorkHourCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutStaffInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutStaffInput, AppointmentUncheckedUpdateWithoutStaffInput>
    create: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutStaffInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutStaffInput, AppointmentUncheckedUpdateWithoutStaffInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutStaffInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutStaffInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    startTime?: DateTimeFilter<"Appointment"> | Date | string
    endTime?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    customerId?: StringFilter<"Appointment"> | string
    serviceId?: StringFilter<"Appointment"> | string
    staffId?: StringFilter<"Appointment"> | string
    branchId?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type CashRegisterLogUpsertWithWhereUniqueWithoutUserInput = {
    where: CashRegisterLogWhereUniqueInput
    update: XOR<CashRegisterLogUpdateWithoutUserInput, CashRegisterLogUncheckedUpdateWithoutUserInput>
    create: XOR<CashRegisterLogCreateWithoutUserInput, CashRegisterLogUncheckedCreateWithoutUserInput>
  }

  export type CashRegisterLogUpdateWithWhereUniqueWithoutUserInput = {
    where: CashRegisterLogWhereUniqueInput
    data: XOR<CashRegisterLogUpdateWithoutUserInput, CashRegisterLogUncheckedUpdateWithoutUserInput>
  }

  export type CashRegisterLogUpdateManyWithWhereWithoutUserInput = {
    where: CashRegisterLogScalarWhereInput
    data: XOR<CashRegisterLogUpdateManyMutationInput, CashRegisterLogUncheckedUpdateManyWithoutUserInput>
  }

  export type CashRegisterLogScalarWhereInput = {
    AND?: CashRegisterLogScalarWhereInput | CashRegisterLogScalarWhereInput[]
    OR?: CashRegisterLogScalarWhereInput[]
    NOT?: CashRegisterLogScalarWhereInput | CashRegisterLogScalarWhereInput[]
    id?: StringFilter<"CashRegisterLog"> | string
    type?: EnumCashLogTypeFilter<"CashRegisterLog"> | $Enums.CashLogType
    amount?: FloatFilter<"CashRegisterLog"> | number
    description?: StringNullableFilter<"CashRegisterLog"> | string | null
    branchId?: StringFilter<"CashRegisterLog"> | string
    userId?: StringFilter<"CashRegisterLog"> | string
    createdAt?: DateTimeFilter<"CashRegisterLog"> | Date | string
    category?: EnumCashMovementCategoryNullableFilter<"CashRegisterLog"> | $Enums.CashMovementCategory | null
  }

  export type CommissionRuleUpsertWithWhereUniqueWithoutStaffInput = {
    where: CommissionRuleWhereUniqueInput
    update: XOR<CommissionRuleUpdateWithoutStaffInput, CommissionRuleUncheckedUpdateWithoutStaffInput>
    create: XOR<CommissionRuleCreateWithoutStaffInput, CommissionRuleUncheckedCreateWithoutStaffInput>
  }

  export type CommissionRuleUpdateWithWhereUniqueWithoutStaffInput = {
    where: CommissionRuleWhereUniqueInput
    data: XOR<CommissionRuleUpdateWithoutStaffInput, CommissionRuleUncheckedUpdateWithoutStaffInput>
  }

  export type CommissionRuleUpdateManyWithWhereWithoutStaffInput = {
    where: CommissionRuleScalarWhereInput
    data: XOR<CommissionRuleUpdateManyMutationInput, CommissionRuleUncheckedUpdateManyWithoutStaffInput>
  }

  export type CommissionRuleScalarWhereInput = {
    AND?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
    OR?: CommissionRuleScalarWhereInput[]
    NOT?: CommissionRuleScalarWhereInput | CommissionRuleScalarWhereInput[]
    id?: StringFilter<"CommissionRule"> | string
    name?: StringFilter<"CommissionRule"> | string
    description?: StringNullableFilter<"CommissionRule"> | string | null
    ruleType?: EnumCommissionRuleTypeFilter<"CommissionRule"> | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFilter<"CommissionRule"> | $Enums.CommissionType
    rate?: FloatFilter<"CommissionRule"> | number
    fixedAmount?: FloatFilter<"CommissionRule"> | number
    startDate?: DateTimeFilter<"CommissionRule"> | Date | string
    endDate?: DateTimeNullableFilter<"CommissionRule"> | Date | string | null
    branchId?: StringFilter<"CommissionRule"> | string
    serviceId?: StringNullableFilter<"CommissionRule"> | string | null
    staffId?: StringNullableFilter<"CommissionRule"> | string | null
    isActive?: BoolFilter<"CommissionRule"> | boolean
    createdAt?: DateTimeFilter<"CommissionRule"> | Date | string
    updatedAt?: DateTimeFilter<"CommissionRule"> | Date | string
  }

  export type StaffCommissionUpsertWithWhereUniqueWithoutStaffInput = {
    where: StaffCommissionWhereUniqueInput
    update: XOR<StaffCommissionUpdateWithoutStaffInput, StaffCommissionUncheckedUpdateWithoutStaffInput>
    create: XOR<StaffCommissionCreateWithoutStaffInput, StaffCommissionUncheckedCreateWithoutStaffInput>
  }

  export type StaffCommissionUpdateWithWhereUniqueWithoutStaffInput = {
    where: StaffCommissionWhereUniqueInput
    data: XOR<StaffCommissionUpdateWithoutStaffInput, StaffCommissionUncheckedUpdateWithoutStaffInput>
  }

  export type StaffCommissionUpdateManyWithWhereWithoutStaffInput = {
    where: StaffCommissionScalarWhereInput
    data: XOR<StaffCommissionUpdateManyMutationInput, StaffCommissionUncheckedUpdateManyWithoutStaffInput>
  }

  export type StaffCommissionScalarWhereInput = {
    AND?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
    OR?: StaffCommissionScalarWhereInput[]
    NOT?: StaffCommissionScalarWhereInput | StaffCommissionScalarWhereInput[]
    id?: StringFilter<"StaffCommission"> | string
    staffId?: StringFilter<"StaffCommission"> | string
    commissionItemId?: StringFilter<"StaffCommission"> | string
    amount?: FloatFilter<"StaffCommission"> | number
    status?: EnumCommissionStatusFilter<"StaffCommission"> | $Enums.CommissionStatus
    createdAt?: DateTimeFilter<"StaffCommission"> | Date | string
    updatedAt?: DateTimeFilter<"StaffCommission"> | Date | string
    appliedRuleId?: StringNullableFilter<"StaffCommission"> | string | null
    invoiceId?: StringFilter<"StaffCommission"> | string
    serviceId?: StringNullableFilter<"StaffCommission"> | string | null
  }

  export type StaffServiceUpsertWithWhereUniqueWithoutUserInput = {
    where: StaffServiceWhereUniqueInput
    update: XOR<StaffServiceUpdateWithoutUserInput, StaffServiceUncheckedUpdateWithoutUserInput>
    create: XOR<StaffServiceCreateWithoutUserInput, StaffServiceUncheckedCreateWithoutUserInput>
  }

  export type StaffServiceUpdateWithWhereUniqueWithoutUserInput = {
    where: StaffServiceWhereUniqueInput
    data: XOR<StaffServiceUpdateWithoutUserInput, StaffServiceUncheckedUpdateWithoutUserInput>
  }

  export type StaffServiceUpdateManyWithWhereWithoutUserInput = {
    where: StaffServiceScalarWhereInput
    data: XOR<StaffServiceUpdateManyMutationInput, StaffServiceUncheckedUpdateManyWithoutUserInput>
  }

  export type StaffServiceScalarWhereInput = {
    AND?: StaffServiceScalarWhereInput | StaffServiceScalarWhereInput[]
    OR?: StaffServiceScalarWhereInput[]
    NOT?: StaffServiceScalarWhereInput | StaffServiceScalarWhereInput[]
    userId?: StringFilter<"StaffService"> | string
    serviceId?: StringFilter<"StaffService"> | string
  }

  export type BranchUpsertWithoutUsersInput = {
    update: XOR<BranchUpdateWithoutUsersInput, BranchUncheckedUpdateWithoutUsersInput>
    create: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutUsersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutUsersInput, BranchUncheckedUpdateWithoutUsersInput>
  }

  export type BranchUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type WorkHourUpsertWithWhereUniqueWithoutStaffInput = {
    where: WorkHourWhereUniqueInput
    update: XOR<WorkHourUpdateWithoutStaffInput, WorkHourUncheckedUpdateWithoutStaffInput>
    create: XOR<WorkHourCreateWithoutStaffInput, WorkHourUncheckedCreateWithoutStaffInput>
  }

  export type WorkHourUpdateWithWhereUniqueWithoutStaffInput = {
    where: WorkHourWhereUniqueInput
    data: XOR<WorkHourUpdateWithoutStaffInput, WorkHourUncheckedUpdateWithoutStaffInput>
  }

  export type WorkHourUpdateManyWithWhereWithoutStaffInput = {
    where: WorkHourScalarWhereInput
    data: XOR<WorkHourUpdateManyMutationInput, WorkHourUncheckedUpdateManyWithoutStaffInput>
  }

  export type WorkHourScalarWhereInput = {
    AND?: WorkHourScalarWhereInput | WorkHourScalarWhereInput[]
    OR?: WorkHourScalarWhereInput[]
    NOT?: WorkHourScalarWhereInput | WorkHourScalarWhereInput[]
    id?: StringFilter<"WorkHour"> | string
    staffId?: StringFilter<"WorkHour"> | string
    branchId?: StringFilter<"WorkHour"> | string
    dayOfWeek?: IntFilter<"WorkHour"> | number
    startTime?: StringFilter<"WorkHour"> | string
    endTime?: StringFilter<"WorkHour"> | string
    isOff?: BoolFilter<"WorkHour"> | boolean
    createdAt?: DateTimeFilter<"WorkHour"> | Date | string
    updatedAt?: DateTimeFilter<"WorkHour"> | Date | string
  }

  export type BranchCreateWithoutWorkHoursInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutWorkHoursInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutWorkHoursInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutWorkHoursInput, BranchUncheckedCreateWithoutWorkHoursInput>
  }

  export type UserCreateWithoutWorkHoursInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    branch?: BranchCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutWorkHoursInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkHoursInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkHoursInput, UserUncheckedCreateWithoutWorkHoursInput>
  }

  export type BranchUpsertWithoutWorkHoursInput = {
    update: XOR<BranchUpdateWithoutWorkHoursInput, BranchUncheckedUpdateWithoutWorkHoursInput>
    create: XOR<BranchCreateWithoutWorkHoursInput, BranchUncheckedCreateWithoutWorkHoursInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutWorkHoursInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutWorkHoursInput, BranchUncheckedUpdateWithoutWorkHoursInput>
  }

  export type BranchUpdateWithoutWorkHoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutWorkHoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type UserUpsertWithoutWorkHoursInput = {
    update: XOR<UserUpdateWithoutWorkHoursInput, UserUncheckedUpdateWithoutWorkHoursInput>
    create: XOR<UserCreateWithoutWorkHoursInput, UserUncheckedCreateWithoutWorkHoursInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkHoursInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkHoursInput, UserUncheckedUpdateWithoutWorkHoursInput>
  }

  export type UserUpdateWithoutWorkHoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkHoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentCreateWithoutBranchInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    invoice?: InvoiceCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutBranchInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    staffId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutBranchInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutBranchInput, AppointmentUncheckedCreateWithoutBranchInput>
  }

  export type AppointmentCreateManyBranchInputEnvelope = {
    data: AppointmentCreateManyBranchInput | AppointmentCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type BranchCreateWithoutSubBranchesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutSubBranchesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutSubBranchesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutSubBranchesInput, BranchUncheckedCreateWithoutSubBranchesInput>
  }

  export type BranchCreateWithoutParentBranchInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutParentBranchInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutParentBranchInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutParentBranchInput, BranchUncheckedCreateWithoutParentBranchInput>
  }

  export type BranchCreateManyParentBranchInputEnvelope = {
    data: BranchCreateManyParentBranchInput | BranchCreateManyParentBranchInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutBranchInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateWithoutBranchInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserCreateOrConnectWithoutBranchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserCreateManyBranchInputEnvelope = {
    data: UserCreateManyBranchInput | UserCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutBranchInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutBranchInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutBranchInput, ServiceUncheckedCreateWithoutBranchInput>
  }

  export type ServiceCreateManyBranchInputEnvelope = {
    data: ServiceCreateManyBranchInput | ServiceCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type PackageCreateWithoutBranchInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: PackageServiceCreateNestedManyWithoutPackageInput
    customerPackages?: CustomerPackageCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: PackageServiceUncheckedCreateNestedManyWithoutPackageInput
    customerPackages?: CustomerPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutBranchInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutBranchInput, PackageUncheckedCreateWithoutBranchInput>
  }

  export type PackageCreateManyBranchInputEnvelope = {
    data: PackageCreateManyBranchInput | PackageCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutBranchInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutBranchInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutBranchInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutBranchInput, InvoiceUncheckedCreateWithoutBranchInput>
  }

  export type InvoiceCreateManyBranchInputEnvelope = {
    data: InvoiceCreateManyBranchInput | InvoiceCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutBranchInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBranchInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput>
  }

  export type CustomerCreateManyBranchInputEnvelope = {
    data: CustomerCreateManyBranchInput | CustomerCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type WorkHourCreateWithoutBranchInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: UserCreateNestedOneWithoutWorkHoursInput
  }

  export type WorkHourUncheckedCreateWithoutBranchInput = {
    id?: string
    staffId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkHourCreateOrConnectWithoutBranchInput = {
    where: WorkHourWhereUniqueInput
    create: XOR<WorkHourCreateWithoutBranchInput, WorkHourUncheckedCreateWithoutBranchInput>
  }

  export type WorkHourCreateManyBranchInputEnvelope = {
    data: WorkHourCreateManyBranchInput | WorkHourCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type CashRegisterLogCreateWithoutBranchInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    user: UserCreateNestedOneWithoutCashRegisterLogInput
    payments?: PaymentCreateNestedManyWithoutCashLogInput
  }

  export type CashRegisterLogUncheckedCreateWithoutBranchInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    userId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    payments?: PaymentUncheckedCreateNestedManyWithoutCashLogInput
  }

  export type CashRegisterLogCreateOrConnectWithoutBranchInput = {
    where: CashRegisterLogWhereUniqueInput
    create: XOR<CashRegisterLogCreateWithoutBranchInput, CashRegisterLogUncheckedCreateWithoutBranchInput>
  }

  export type CashRegisterLogCreateManyBranchInputEnvelope = {
    data: CashRegisterLogCreateManyBranchInput | CashRegisterLogCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type CommissionRuleCreateWithoutBranchInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    service?: ServiceCreateNestedOneWithoutCommissionRulesInput
    staff?: UserCreateNestedOneWithoutStaffCommissionRulesInput
    commissionItems?: CommissionItemCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    serviceId?: string | null
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleCreateOrConnectWithoutBranchInput = {
    where: CommissionRuleWhereUniqueInput
    create: XOR<CommissionRuleCreateWithoutBranchInput, CommissionRuleUncheckedCreateWithoutBranchInput>
  }

  export type CommissionRuleCreateManyBranchInputEnvelope = {
    data: CommissionRuleCreateManyBranchInput | CommissionRuleCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCategoryCreateWithoutBranchInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryCreateOrConnectWithoutBranchInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutBranchInput, ServiceCategoryUncheckedCreateWithoutBranchInput>
  }

  export type ServiceCategoryCreateManyBranchInputEnvelope = {
    data: ServiceCategoryCreateManyBranchInput | ServiceCategoryCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type NotificationProviderCreateWithoutBranchInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    config: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationProviderUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    config: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationProviderCreateOrConnectWithoutBranchInput = {
    where: NotificationProviderWhereUniqueInput
    create: XOR<NotificationProviderCreateWithoutBranchInput, NotificationProviderUncheckedCreateWithoutBranchInput>
  }

  export type NotificationProviderCreateManyBranchInputEnvelope = {
    data: NotificationProviderCreateManyBranchInput | NotificationProviderCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type NotificationTemplateCreateWithoutBranchInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    triggers?: NotificationTriggerCreateNestedManyWithoutTemplateInput
    queue?: NotificationQueueCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    triggers?: NotificationTriggerUncheckedCreateNestedManyWithoutTemplateInput
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateCreateOrConnectWithoutBranchInput = {
    where: NotificationTemplateWhereUniqueInput
    create: XOR<NotificationTemplateCreateWithoutBranchInput, NotificationTemplateUncheckedCreateWithoutBranchInput>
  }

  export type NotificationTemplateCreateManyBranchInputEnvelope = {
    data: NotificationTemplateCreateManyBranchInput | NotificationTemplateCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type NotificationTriggerCreateWithoutBranchInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: NotificationTemplateCreateNestedOneWithoutTriggersInput
    queue?: NotificationQueueCreateNestedManyWithoutTriggerInput
    history?: NotificationHistoryCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerUncheckedCreateWithoutBranchInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    templateId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTriggerInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerCreateOrConnectWithoutBranchInput = {
    where: NotificationTriggerWhereUniqueInput
    create: XOR<NotificationTriggerCreateWithoutBranchInput, NotificationTriggerUncheckedCreateWithoutBranchInput>
  }

  export type NotificationTriggerCreateManyBranchInputEnvelope = {
    data: NotificationTriggerCreateManyBranchInput | NotificationTriggerCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type NotificationQueueCreateWithoutBranchInput = {
    id?: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationQueueInput
    template: NotificationTemplateCreateNestedOneWithoutQueueInput
    trigger?: NotificationTriggerCreateNestedOneWithoutQueueInput
  }

  export type NotificationQueueUncheckedCreateWithoutBranchInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueCreateOrConnectWithoutBranchInput = {
    where: NotificationQueueWhereUniqueInput
    create: XOR<NotificationQueueCreateWithoutBranchInput, NotificationQueueUncheckedCreateWithoutBranchInput>
  }

  export type NotificationQueueCreateManyBranchInputEnvelope = {
    data: NotificationQueueCreateManyBranchInput | NotificationQueueCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type NotificationHistoryCreateWithoutBranchInput = {
    id?: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationHistoryInput
    template: NotificationTemplateCreateNestedOneWithoutHistoryInput
    trigger?: NotificationTriggerCreateNestedOneWithoutHistoryInput
  }

  export type NotificationHistoryUncheckedCreateWithoutBranchInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationHistoryCreateOrConnectWithoutBranchInput = {
    where: NotificationHistoryWhereUniqueInput
    create: XOR<NotificationHistoryCreateWithoutBranchInput, NotificationHistoryUncheckedCreateWithoutBranchInput>
  }

  export type NotificationHistoryCreateManyBranchInputEnvelope = {
    data: NotificationHistoryCreateManyBranchInput | NotificationHistoryCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type NotificationSettingsCreateWithoutBranchInput = {
    id?: string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsUncheckedCreateWithoutBranchInput = {
    id?: string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsCreateOrConnectWithoutBranchInput = {
    where: NotificationSettingsWhereUniqueInput
    create: XOR<NotificationSettingsCreateWithoutBranchInput, NotificationSettingsUncheckedCreateWithoutBranchInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutBranchInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutBranchInput, AppointmentUncheckedUpdateWithoutBranchInput>
    create: XOR<AppointmentCreateWithoutBranchInput, AppointmentUncheckedCreateWithoutBranchInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutBranchInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutBranchInput, AppointmentUncheckedUpdateWithoutBranchInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutBranchInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutBranchInput>
  }

  export type BranchUpsertWithoutSubBranchesInput = {
    update: XOR<BranchUpdateWithoutSubBranchesInput, BranchUncheckedUpdateWithoutSubBranchesInput>
    create: XOR<BranchCreateWithoutSubBranchesInput, BranchUncheckedCreateWithoutSubBranchesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutSubBranchesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutSubBranchesInput, BranchUncheckedUpdateWithoutSubBranchesInput>
  }

  export type BranchUpdateWithoutSubBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutSubBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type BranchUpsertWithWhereUniqueWithoutParentBranchInput = {
    where: BranchWhereUniqueInput
    update: XOR<BranchUpdateWithoutParentBranchInput, BranchUncheckedUpdateWithoutParentBranchInput>
    create: XOR<BranchCreateWithoutParentBranchInput, BranchUncheckedCreateWithoutParentBranchInput>
  }

  export type BranchUpdateWithWhereUniqueWithoutParentBranchInput = {
    where: BranchWhereUniqueInput
    data: XOR<BranchUpdateWithoutParentBranchInput, BranchUncheckedUpdateWithoutParentBranchInput>
  }

  export type BranchUpdateManyWithWhereWithoutParentBranchInput = {
    where: BranchScalarWhereInput
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyWithoutParentBranchInput>
  }

  export type BranchScalarWhereInput = {
    AND?: BranchScalarWhereInput | BranchScalarWhereInput[]
    OR?: BranchScalarWhereInput[]
    NOT?: BranchScalarWhereInput | BranchScalarWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    address?: StringNullableFilter<"Branch"> | string | null
    phone?: StringNullableFilter<"Branch"> | string | null
    description?: StringNullableFilter<"Branch"> | string | null
    parentBranchId?: StringNullableFilter<"Branch"> | string | null
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
  }

  export type UserUpdateManyWithWhereWithoutBranchInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBranchInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    branchId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type ServiceUpsertWithWhereUniqueWithoutBranchInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutBranchInput, ServiceUncheckedUpdateWithoutBranchInput>
    create: XOR<ServiceCreateWithoutBranchInput, ServiceUncheckedCreateWithoutBranchInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutBranchInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutBranchInput, ServiceUncheckedUpdateWithoutBranchInput>
  }

  export type ServiceUpdateManyWithWhereWithoutBranchInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutBranchInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    price?: FloatFilter<"Service"> | number
    duration?: IntFilter<"Service"> | number
    description?: StringNullableFilter<"Service"> | string | null
    categoryId?: StringFilter<"Service"> | string
    branchId?: StringFilter<"Service"> | string
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
  }

  export type PackageUpsertWithWhereUniqueWithoutBranchInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutBranchInput, PackageUncheckedUpdateWithoutBranchInput>
    create: XOR<PackageCreateWithoutBranchInput, PackageUncheckedCreateWithoutBranchInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutBranchInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutBranchInput, PackageUncheckedUpdateWithoutBranchInput>
  }

  export type PackageUpdateManyWithWhereWithoutBranchInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutBranchInput>
  }

  export type PackageScalarWhereInput = {
    AND?: PackageScalarWhereInput | PackageScalarWhereInput[]
    OR?: PackageScalarWhereInput[]
    NOT?: PackageScalarWhereInput | PackageScalarWhereInput[]
    id?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    price?: FloatFilter<"Package"> | number
    type?: EnumPackageTypeFilter<"Package"> | $Enums.PackageType
    totalSessions?: IntNullableFilter<"Package"> | number | null
    totalMinutes?: IntNullableFilter<"Package"> | number | null
    validityDays?: IntNullableFilter<"Package"> | number | null
    description?: StringNullableFilter<"Package"> | string | null
    branchId?: StringFilter<"Package"> | string
    commissionRate?: FloatNullableFilter<"Package"> | number | null
    commissionFixed?: FloatNullableFilter<"Package"> | number | null
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutBranchInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutBranchInput, InvoiceUncheckedUpdateWithoutBranchInput>
    create: XOR<InvoiceCreateWithoutBranchInput, InvoiceUncheckedCreateWithoutBranchInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutBranchInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutBranchInput, InvoiceUncheckedUpdateWithoutBranchInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutBranchInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutBranchInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: StringFilter<"Invoice"> | string
    totalAmount?: FloatFilter<"Invoice"> | number
    amountPaid?: FloatFilter<"Invoice"> | number
    debt?: FloatFilter<"Invoice"> | number
    status?: EnumPaymentStatusFilter<"Invoice"> | $Enums.PaymentStatus
    customerId?: StringFilter<"Invoice"> | string
    branchId?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    appointmentId?: StringNullableFilter<"Invoice"> | string | null
    customerPackageId?: StringNullableFilter<"Invoice"> | string | null
  }

  export type CustomerUpsertWithWhereUniqueWithoutBranchInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutBranchInput, CustomerUncheckedUpdateWithoutBranchInput>
    create: XOR<CustomerCreateWithoutBranchInput, CustomerUncheckedCreateWithoutBranchInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutBranchInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutBranchInput, CustomerUncheckedUpdateWithoutBranchInput>
  }

  export type CustomerUpdateManyWithWhereWithoutBranchInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutBranchInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    notes?: StringNullableFilter<"Customer"> | string | null
    branchId?: StringFilter<"Customer"> | string
    discountRate?: FloatFilter<"Customer"> | number
    creditBalance?: FloatFilter<"Customer"> | number
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
  }

  export type WorkHourUpsertWithWhereUniqueWithoutBranchInput = {
    where: WorkHourWhereUniqueInput
    update: XOR<WorkHourUpdateWithoutBranchInput, WorkHourUncheckedUpdateWithoutBranchInput>
    create: XOR<WorkHourCreateWithoutBranchInput, WorkHourUncheckedCreateWithoutBranchInput>
  }

  export type WorkHourUpdateWithWhereUniqueWithoutBranchInput = {
    where: WorkHourWhereUniqueInput
    data: XOR<WorkHourUpdateWithoutBranchInput, WorkHourUncheckedUpdateWithoutBranchInput>
  }

  export type WorkHourUpdateManyWithWhereWithoutBranchInput = {
    where: WorkHourScalarWhereInput
    data: XOR<WorkHourUpdateManyMutationInput, WorkHourUncheckedUpdateManyWithoutBranchInput>
  }

  export type CashRegisterLogUpsertWithWhereUniqueWithoutBranchInput = {
    where: CashRegisterLogWhereUniqueInput
    update: XOR<CashRegisterLogUpdateWithoutBranchInput, CashRegisterLogUncheckedUpdateWithoutBranchInput>
    create: XOR<CashRegisterLogCreateWithoutBranchInput, CashRegisterLogUncheckedCreateWithoutBranchInput>
  }

  export type CashRegisterLogUpdateWithWhereUniqueWithoutBranchInput = {
    where: CashRegisterLogWhereUniqueInput
    data: XOR<CashRegisterLogUpdateWithoutBranchInput, CashRegisterLogUncheckedUpdateWithoutBranchInput>
  }

  export type CashRegisterLogUpdateManyWithWhereWithoutBranchInput = {
    where: CashRegisterLogScalarWhereInput
    data: XOR<CashRegisterLogUpdateManyMutationInput, CashRegisterLogUncheckedUpdateManyWithoutBranchInput>
  }

  export type CommissionRuleUpsertWithWhereUniqueWithoutBranchInput = {
    where: CommissionRuleWhereUniqueInput
    update: XOR<CommissionRuleUpdateWithoutBranchInput, CommissionRuleUncheckedUpdateWithoutBranchInput>
    create: XOR<CommissionRuleCreateWithoutBranchInput, CommissionRuleUncheckedCreateWithoutBranchInput>
  }

  export type CommissionRuleUpdateWithWhereUniqueWithoutBranchInput = {
    where: CommissionRuleWhereUniqueInput
    data: XOR<CommissionRuleUpdateWithoutBranchInput, CommissionRuleUncheckedUpdateWithoutBranchInput>
  }

  export type CommissionRuleUpdateManyWithWhereWithoutBranchInput = {
    where: CommissionRuleScalarWhereInput
    data: XOR<CommissionRuleUpdateManyMutationInput, CommissionRuleUncheckedUpdateManyWithoutBranchInput>
  }

  export type ServiceCategoryUpsertWithWhereUniqueWithoutBranchInput = {
    where: ServiceCategoryWhereUniqueInput
    update: XOR<ServiceCategoryUpdateWithoutBranchInput, ServiceCategoryUncheckedUpdateWithoutBranchInput>
    create: XOR<ServiceCategoryCreateWithoutBranchInput, ServiceCategoryUncheckedCreateWithoutBranchInput>
  }

  export type ServiceCategoryUpdateWithWhereUniqueWithoutBranchInput = {
    where: ServiceCategoryWhereUniqueInput
    data: XOR<ServiceCategoryUpdateWithoutBranchInput, ServiceCategoryUncheckedUpdateWithoutBranchInput>
  }

  export type ServiceCategoryUpdateManyWithWhereWithoutBranchInput = {
    where: ServiceCategoryScalarWhereInput
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyWithoutBranchInput>
  }

  export type ServiceCategoryScalarWhereInput = {
    AND?: ServiceCategoryScalarWhereInput | ServiceCategoryScalarWhereInput[]
    OR?: ServiceCategoryScalarWhereInput[]
    NOT?: ServiceCategoryScalarWhereInput | ServiceCategoryScalarWhereInput[]
    id?: StringFilter<"ServiceCategory"> | string
    name?: StringFilter<"ServiceCategory"> | string
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    branchId?: StringNullableFilter<"ServiceCategory"> | string | null
    isActive?: BoolFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
  }

  export type NotificationProviderUpsertWithWhereUniqueWithoutBranchInput = {
    where: NotificationProviderWhereUniqueInput
    update: XOR<NotificationProviderUpdateWithoutBranchInput, NotificationProviderUncheckedUpdateWithoutBranchInput>
    create: XOR<NotificationProviderCreateWithoutBranchInput, NotificationProviderUncheckedCreateWithoutBranchInput>
  }

  export type NotificationProviderUpdateWithWhereUniqueWithoutBranchInput = {
    where: NotificationProviderWhereUniqueInput
    data: XOR<NotificationProviderUpdateWithoutBranchInput, NotificationProviderUncheckedUpdateWithoutBranchInput>
  }

  export type NotificationProviderUpdateManyWithWhereWithoutBranchInput = {
    where: NotificationProviderScalarWhereInput
    data: XOR<NotificationProviderUpdateManyMutationInput, NotificationProviderUncheckedUpdateManyWithoutBranchInput>
  }

  export type NotificationProviderScalarWhereInput = {
    AND?: NotificationProviderScalarWhereInput | NotificationProviderScalarWhereInput[]
    OR?: NotificationProviderScalarWhereInput[]
    NOT?: NotificationProviderScalarWhereInput | NotificationProviderScalarWhereInput[]
    id?: StringFilter<"NotificationProvider"> | string
    name?: StringFilter<"NotificationProvider"> | string
    type?: EnumNotificationTypeFilter<"NotificationProvider"> | $Enums.NotificationType
    config?: JsonFilter<"NotificationProvider">
    branchId?: StringFilter<"NotificationProvider"> | string
    isActive?: BoolFilter<"NotificationProvider"> | boolean
    createdAt?: DateTimeFilter<"NotificationProvider"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationProvider"> | Date | string
  }

  export type NotificationTemplateUpsertWithWhereUniqueWithoutBranchInput = {
    where: NotificationTemplateWhereUniqueInput
    update: XOR<NotificationTemplateUpdateWithoutBranchInput, NotificationTemplateUncheckedUpdateWithoutBranchInput>
    create: XOR<NotificationTemplateCreateWithoutBranchInput, NotificationTemplateUncheckedCreateWithoutBranchInput>
  }

  export type NotificationTemplateUpdateWithWhereUniqueWithoutBranchInput = {
    where: NotificationTemplateWhereUniqueInput
    data: XOR<NotificationTemplateUpdateWithoutBranchInput, NotificationTemplateUncheckedUpdateWithoutBranchInput>
  }

  export type NotificationTemplateUpdateManyWithWhereWithoutBranchInput = {
    where: NotificationTemplateScalarWhereInput
    data: XOR<NotificationTemplateUpdateManyMutationInput, NotificationTemplateUncheckedUpdateManyWithoutBranchInput>
  }

  export type NotificationTemplateScalarWhereInput = {
    AND?: NotificationTemplateScalarWhereInput | NotificationTemplateScalarWhereInput[]
    OR?: NotificationTemplateScalarWhereInput[]
    NOT?: NotificationTemplateScalarWhereInput | NotificationTemplateScalarWhereInput[]
    id?: StringFilter<"NotificationTemplate"> | string
    name?: StringFilter<"NotificationTemplate"> | string
    type?: EnumNotificationTypeFilter<"NotificationTemplate"> | $Enums.NotificationType
    subject?: StringNullableFilter<"NotificationTemplate"> | string | null
    content?: StringFilter<"NotificationTemplate"> | string
    variables?: JsonFilter<"NotificationTemplate">
    language?: StringFilter<"NotificationTemplate"> | string
    branchId?: StringFilter<"NotificationTemplate"> | string
    isActive?: BoolFilter<"NotificationTemplate"> | boolean
    createdAt?: DateTimeFilter<"NotificationTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationTemplate"> | Date | string
  }

  export type NotificationTriggerUpsertWithWhereUniqueWithoutBranchInput = {
    where: NotificationTriggerWhereUniqueInput
    update: XOR<NotificationTriggerUpdateWithoutBranchInput, NotificationTriggerUncheckedUpdateWithoutBranchInput>
    create: XOR<NotificationTriggerCreateWithoutBranchInput, NotificationTriggerUncheckedCreateWithoutBranchInput>
  }

  export type NotificationTriggerUpdateWithWhereUniqueWithoutBranchInput = {
    where: NotificationTriggerWhereUniqueInput
    data: XOR<NotificationTriggerUpdateWithoutBranchInput, NotificationTriggerUncheckedUpdateWithoutBranchInput>
  }

  export type NotificationTriggerUpdateManyWithWhereWithoutBranchInput = {
    where: NotificationTriggerScalarWhereInput
    data: XOR<NotificationTriggerUpdateManyMutationInput, NotificationTriggerUncheckedUpdateManyWithoutBranchInput>
  }

  export type NotificationTriggerScalarWhereInput = {
    AND?: NotificationTriggerScalarWhereInput | NotificationTriggerScalarWhereInput[]
    OR?: NotificationTriggerScalarWhereInput[]
    NOT?: NotificationTriggerScalarWhereInput | NotificationTriggerScalarWhereInput[]
    id?: StringFilter<"NotificationTrigger"> | string
    name?: StringFilter<"NotificationTrigger"> | string
    eventType?: EnumNotificationEventTypeFilter<"NotificationTrigger"> | $Enums.NotificationEventType
    conditions?: JsonFilter<"NotificationTrigger">
    templateId?: StringFilter<"NotificationTrigger"> | string
    branchId?: StringFilter<"NotificationTrigger"> | string
    isActive?: BoolFilter<"NotificationTrigger"> | boolean
    priority?: IntFilter<"NotificationTrigger"> | number
    schedule?: StringNullableFilter<"NotificationTrigger"> | string | null
    createdAt?: DateTimeFilter<"NotificationTrigger"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationTrigger"> | Date | string
  }

  export type NotificationQueueUpsertWithWhereUniqueWithoutBranchInput = {
    where: NotificationQueueWhereUniqueInput
    update: XOR<NotificationQueueUpdateWithoutBranchInput, NotificationQueueUncheckedUpdateWithoutBranchInput>
    create: XOR<NotificationQueueCreateWithoutBranchInput, NotificationQueueUncheckedCreateWithoutBranchInput>
  }

  export type NotificationQueueUpdateWithWhereUniqueWithoutBranchInput = {
    where: NotificationQueueWhereUniqueInput
    data: XOR<NotificationQueueUpdateWithoutBranchInput, NotificationQueueUncheckedUpdateWithoutBranchInput>
  }

  export type NotificationQueueUpdateManyWithWhereWithoutBranchInput = {
    where: NotificationQueueScalarWhereInput
    data: XOR<NotificationQueueUpdateManyMutationInput, NotificationQueueUncheckedUpdateManyWithoutBranchInput>
  }

  export type NotificationQueueScalarWhereInput = {
    AND?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
    OR?: NotificationQueueScalarWhereInput[]
    NOT?: NotificationQueueScalarWhereInput | NotificationQueueScalarWhereInput[]
    id?: StringFilter<"NotificationQueue"> | string
    customerId?: StringFilter<"NotificationQueue"> | string
    templateId?: StringFilter<"NotificationQueue"> | string
    triggerId?: StringNullableFilter<"NotificationQueue"> | string | null
    branchId?: StringFilter<"NotificationQueue"> | string
    status?: EnumNotificationStatusFilter<"NotificationQueue"> | $Enums.NotificationStatus
    data?: JsonFilter<"NotificationQueue">
    scheduledAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    sentAt?: DateTimeNullableFilter<"NotificationQueue"> | Date | string | null
    errorMessage?: StringNullableFilter<"NotificationQueue"> | string | null
    retryCount?: IntFilter<"NotificationQueue"> | number
    createdAt?: DateTimeFilter<"NotificationQueue"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationQueue"> | Date | string
  }

  export type NotificationHistoryUpsertWithWhereUniqueWithoutBranchInput = {
    where: NotificationHistoryWhereUniqueInput
    update: XOR<NotificationHistoryUpdateWithoutBranchInput, NotificationHistoryUncheckedUpdateWithoutBranchInput>
    create: XOR<NotificationHistoryCreateWithoutBranchInput, NotificationHistoryUncheckedCreateWithoutBranchInput>
  }

  export type NotificationHistoryUpdateWithWhereUniqueWithoutBranchInput = {
    where: NotificationHistoryWhereUniqueInput
    data: XOR<NotificationHistoryUpdateWithoutBranchInput, NotificationHistoryUncheckedUpdateWithoutBranchInput>
  }

  export type NotificationHistoryUpdateManyWithWhereWithoutBranchInput = {
    where: NotificationHistoryScalarWhereInput
    data: XOR<NotificationHistoryUpdateManyMutationInput, NotificationHistoryUncheckedUpdateManyWithoutBranchInput>
  }

  export type NotificationHistoryScalarWhereInput = {
    AND?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
    OR?: NotificationHistoryScalarWhereInput[]
    NOT?: NotificationHistoryScalarWhereInput | NotificationHistoryScalarWhereInput[]
    id?: StringFilter<"NotificationHistory"> | string
    customerId?: StringFilter<"NotificationHistory"> | string
    templateId?: StringFilter<"NotificationHistory"> | string
    triggerId?: StringNullableFilter<"NotificationHistory"> | string | null
    branchId?: StringFilter<"NotificationHistory"> | string
    type?: EnumNotificationTypeFilter<"NotificationHistory"> | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFilter<"NotificationHistory"> | $Enums.NotificationDeliveryStatus
    content?: StringFilter<"NotificationHistory"> | string
    metadata?: JsonNullableFilter<"NotificationHistory">
    cost?: FloatNullableFilter<"NotificationHistory"> | number | null
    sentAt?: DateTimeFilter<"NotificationHistory"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"NotificationHistory"> | Date | string | null
    readAt?: DateTimeNullableFilter<"NotificationHistory"> | Date | string | null
    createdAt?: DateTimeFilter<"NotificationHistory"> | Date | string
  }

  export type NotificationSettingsUpsertWithoutBranchInput = {
    update: XOR<NotificationSettingsUpdateWithoutBranchInput, NotificationSettingsUncheckedUpdateWithoutBranchInput>
    create: XOR<NotificationSettingsCreateWithoutBranchInput, NotificationSettingsUncheckedCreateWithoutBranchInput>
    where?: NotificationSettingsWhereInput
  }

  export type NotificationSettingsUpdateToOneWithWhereWithoutBranchInput = {
    where?: NotificationSettingsWhereInput
    data: XOR<NotificationSettingsUpdateWithoutBranchInput, NotificationSettingsUncheckedUpdateWithoutBranchInput>
  }

  export type NotificationSettingsUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    smsConfig?: NullableJsonNullValueInput | InputJsonValue
    whatsappConfig?: NullableJsonNullValueInput | InputJsonValue
    emailConfig?: NullableJsonNullValueInput | InputJsonValue
    generalSettings?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchCreateWithoutCustomersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutCustomersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutCustomersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
  }

  export type AppointmentCreateWithoutCustomerInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    branch: BranchCreateNestedOneWithoutAppointmentsInput
    invoice?: InvoiceCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCustomerInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    serviceId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput>
  }

  export type AppointmentCreateManyCustomerInputEnvelope = {
    data: AppointmentCreateManyCustomerInput | AppointmentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerPackageCreateWithoutCustomerInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package: PackageCreateNestedOneWithoutCustomerPackagesInput
    invoice?: InvoiceCreateNestedOneWithoutCustomerPackageInput
  }

  export type CustomerPackageUncheckedCreateWithoutCustomerInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    packageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutCustomerPackageInput
  }

  export type CustomerPackageCreateOrConnectWithoutCustomerInput = {
    where: CustomerPackageWhereUniqueInput
    create: XOR<CustomerPackageCreateWithoutCustomerInput, CustomerPackageUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerPackageCreateManyCustomerInputEnvelope = {
    data: CustomerPackageCreateManyCustomerInput | CustomerPackageCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutCustomerInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutCustomerInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutCustomerInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput>
  }

  export type InvoiceCreateManyCustomerInputEnvelope = {
    data: InvoiceCreateManyCustomerInput | InvoiceCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerTagCreateWithoutCustomerInput = {
    tag: TagCreateNestedOneWithoutCustomersInput
  }

  export type CustomerTagUncheckedCreateWithoutCustomerInput = {
    tagId: string
  }

  export type CustomerTagCreateOrConnectWithoutCustomerInput = {
    where: CustomerTagWhereUniqueInput
    create: XOR<CustomerTagCreateWithoutCustomerInput, CustomerTagUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerTagCreateManyCustomerInputEnvelope = {
    data: CustomerTagCreateManyCustomerInput | CustomerTagCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationQueueCreateWithoutCustomerInput = {
    id?: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    template: NotificationTemplateCreateNestedOneWithoutQueueInput
    trigger?: NotificationTriggerCreateNestedOneWithoutQueueInput
    branch: BranchCreateNestedOneWithoutNotificationQueueInput
  }

  export type NotificationQueueUncheckedCreateWithoutCustomerInput = {
    id?: string
    templateId: string
    triggerId?: string | null
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueCreateOrConnectWithoutCustomerInput = {
    where: NotificationQueueWhereUniqueInput
    create: XOR<NotificationQueueCreateWithoutCustomerInput, NotificationQueueUncheckedCreateWithoutCustomerInput>
  }

  export type NotificationQueueCreateManyCustomerInputEnvelope = {
    data: NotificationQueueCreateManyCustomerInput | NotificationQueueCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationHistoryCreateWithoutCustomerInput = {
    id?: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
    template: NotificationTemplateCreateNestedOneWithoutHistoryInput
    trigger?: NotificationTriggerCreateNestedOneWithoutHistoryInput
    branch: BranchCreateNestedOneWithoutNotificationHistoryInput
  }

  export type NotificationHistoryUncheckedCreateWithoutCustomerInput = {
    id?: string
    templateId: string
    triggerId?: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationHistoryCreateOrConnectWithoutCustomerInput = {
    where: NotificationHistoryWhereUniqueInput
    create: XOR<NotificationHistoryCreateWithoutCustomerInput, NotificationHistoryUncheckedCreateWithoutCustomerInput>
  }

  export type NotificationHistoryCreateManyCustomerInputEnvelope = {
    data: NotificationHistoryCreateManyCustomerInput | NotificationHistoryCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutCustomersInput = {
    update: XOR<BranchUpdateWithoutCustomersInput, BranchUncheckedUpdateWithoutCustomersInput>
    create: XOR<BranchCreateWithoutCustomersInput, BranchUncheckedCreateWithoutCustomersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutCustomersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutCustomersInput, BranchUncheckedUpdateWithoutCustomersInput>
  }

  export type BranchUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCustomerInput, AppointmentUncheckedUpdateWithoutCustomerInput>
    create: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCustomerInput, AppointmentUncheckedUpdateWithoutCustomerInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCustomerInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerPackageUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerPackageWhereUniqueInput
    update: XOR<CustomerPackageUpdateWithoutCustomerInput, CustomerPackageUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerPackageCreateWithoutCustomerInput, CustomerPackageUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerPackageUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerPackageWhereUniqueInput
    data: XOR<CustomerPackageUpdateWithoutCustomerInput, CustomerPackageUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPackageUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerPackageScalarWhereInput
    data: XOR<CustomerPackageUpdateManyMutationInput, CustomerPackageUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerPackageScalarWhereInput = {
    AND?: CustomerPackageScalarWhereInput | CustomerPackageScalarWhereInput[]
    OR?: CustomerPackageScalarWhereInput[]
    NOT?: CustomerPackageScalarWhereInput | CustomerPackageScalarWhereInput[]
    id?: StringFilter<"CustomerPackage"> | string
    purchaseDate?: DateTimeFilter<"CustomerPackage"> | Date | string
    expiryDate?: DateTimeNullableFilter<"CustomerPackage"> | Date | string | null
    remainingSessions?: JsonNullableFilter<"CustomerPackage">
    notes?: StringNullableFilter<"CustomerPackage"> | string | null
    salesCode?: StringNullableFilter<"CustomerPackage"> | string | null
    customerId?: StringFilter<"CustomerPackage"> | string
    packageId?: StringFilter<"CustomerPackage"> | string
    createdAt?: DateTimeFilter<"CustomerPackage"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPackage"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutCustomerInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutCustomerInput, InvoiceUncheckedUpdateWithoutCustomerInput>
    create: XOR<InvoiceCreateWithoutCustomerInput, InvoiceUncheckedCreateWithoutCustomerInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutCustomerInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutCustomerInput, InvoiceUncheckedUpdateWithoutCustomerInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutCustomerInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerTagUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerTagWhereUniqueInput
    update: XOR<CustomerTagUpdateWithoutCustomerInput, CustomerTagUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerTagCreateWithoutCustomerInput, CustomerTagUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerTagUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerTagWhereUniqueInput
    data: XOR<CustomerTagUpdateWithoutCustomerInput, CustomerTagUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerTagUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerTagScalarWhereInput
    data: XOR<CustomerTagUpdateManyMutationInput, CustomerTagUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerTagScalarWhereInput = {
    AND?: CustomerTagScalarWhereInput | CustomerTagScalarWhereInput[]
    OR?: CustomerTagScalarWhereInput[]
    NOT?: CustomerTagScalarWhereInput | CustomerTagScalarWhereInput[]
    customerId?: StringFilter<"CustomerTag"> | string
    tagId?: StringFilter<"CustomerTag"> | string
  }

  export type NotificationQueueUpsertWithWhereUniqueWithoutCustomerInput = {
    where: NotificationQueueWhereUniqueInput
    update: XOR<NotificationQueueUpdateWithoutCustomerInput, NotificationQueueUncheckedUpdateWithoutCustomerInput>
    create: XOR<NotificationQueueCreateWithoutCustomerInput, NotificationQueueUncheckedCreateWithoutCustomerInput>
  }

  export type NotificationQueueUpdateWithWhereUniqueWithoutCustomerInput = {
    where: NotificationQueueWhereUniqueInput
    data: XOR<NotificationQueueUpdateWithoutCustomerInput, NotificationQueueUncheckedUpdateWithoutCustomerInput>
  }

  export type NotificationQueueUpdateManyWithWhereWithoutCustomerInput = {
    where: NotificationQueueScalarWhereInput
    data: XOR<NotificationQueueUpdateManyMutationInput, NotificationQueueUncheckedUpdateManyWithoutCustomerInput>
  }

  export type NotificationHistoryUpsertWithWhereUniqueWithoutCustomerInput = {
    where: NotificationHistoryWhereUniqueInput
    update: XOR<NotificationHistoryUpdateWithoutCustomerInput, NotificationHistoryUncheckedUpdateWithoutCustomerInput>
    create: XOR<NotificationHistoryCreateWithoutCustomerInput, NotificationHistoryUncheckedCreateWithoutCustomerInput>
  }

  export type NotificationHistoryUpdateWithWhereUniqueWithoutCustomerInput = {
    where: NotificationHistoryWhereUniqueInput
    data: XOR<NotificationHistoryUpdateWithoutCustomerInput, NotificationHistoryUncheckedUpdateWithoutCustomerInput>
  }

  export type NotificationHistoryUpdateManyWithWhereWithoutCustomerInput = {
    where: NotificationHistoryScalarWhereInput
    data: XOR<NotificationHistoryUpdateManyMutationInput, NotificationHistoryUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerTagCreateWithoutTagInput = {
    customer: CustomerCreateNestedOneWithoutTagsInput
  }

  export type CustomerTagUncheckedCreateWithoutTagInput = {
    customerId: string
  }

  export type CustomerTagCreateOrConnectWithoutTagInput = {
    where: CustomerTagWhereUniqueInput
    create: XOR<CustomerTagCreateWithoutTagInput, CustomerTagUncheckedCreateWithoutTagInput>
  }

  export type CustomerTagCreateManyTagInputEnvelope = {
    data: CustomerTagCreateManyTagInput | CustomerTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type CustomerTagUpsertWithWhereUniqueWithoutTagInput = {
    where: CustomerTagWhereUniqueInput
    update: XOR<CustomerTagUpdateWithoutTagInput, CustomerTagUncheckedUpdateWithoutTagInput>
    create: XOR<CustomerTagCreateWithoutTagInput, CustomerTagUncheckedCreateWithoutTagInput>
  }

  export type CustomerTagUpdateWithWhereUniqueWithoutTagInput = {
    where: CustomerTagWhereUniqueInput
    data: XOR<CustomerTagUpdateWithoutTagInput, CustomerTagUncheckedUpdateWithoutTagInput>
  }

  export type CustomerTagUpdateManyWithWhereWithoutTagInput = {
    where: CustomerTagScalarWhereInput
    data: XOR<CustomerTagUpdateManyMutationInput, CustomerTagUncheckedUpdateManyWithoutTagInput>
  }

  export type CustomerCreateWithoutTagsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTagsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTagsInput, CustomerUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutCustomersInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUncheckedCreateWithoutCustomersInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagCreateOrConnectWithoutCustomersInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCustomersInput, TagUncheckedCreateWithoutCustomersInput>
  }

  export type CustomerUpsertWithoutTagsInput = {
    update: XOR<CustomerUpdateWithoutTagsInput, CustomerUncheckedUpdateWithoutTagsInput>
    create: XOR<CustomerCreateWithoutTagsInput, CustomerUncheckedCreateWithoutTagsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutTagsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutTagsInput, CustomerUncheckedUpdateWithoutTagsInput>
  }

  export type CustomerUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type TagUpsertWithoutCustomersInput = {
    update: XOR<TagUpdateWithoutCustomersInput, TagUncheckedUpdateWithoutCustomersInput>
    create: XOR<TagCreateWithoutCustomersInput, TagUncheckedCreateWithoutCustomersInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutCustomersInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutCustomersInput, TagUncheckedUpdateWithoutCustomersInput>
  }

  export type TagUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchCreateWithoutServiceCategoriesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutServiceCategoriesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutServiceCategoriesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutServiceCategoriesInput, BranchUncheckedCreateWithoutServiceCategoriesInput>
  }

  export type ServiceCreateWithoutCategoryInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutCategoryInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceCreateManyCategoryInputEnvelope = {
    data: ServiceCreateManyCategoryInput | ServiceCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutServiceCategoriesInput = {
    update: XOR<BranchUpdateWithoutServiceCategoriesInput, BranchUncheckedUpdateWithoutServiceCategoriesInput>
    create: XOR<BranchCreateWithoutServiceCategoriesInput, BranchUncheckedCreateWithoutServiceCategoriesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutServiceCategoriesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutServiceCategoriesInput, BranchUncheckedUpdateWithoutServiceCategoriesInput>
  }

  export type BranchUpdateWithoutServiceCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutServiceCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type ServiceUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutCategoryInput, ServiceUncheckedUpdateWithoutCategoryInput>
    create: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutCategoryInput, ServiceUncheckedUpdateWithoutCategoryInput>
  }

  export type ServiceUpdateManyWithWhereWithoutCategoryInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ServiceCategoryCreateWithoutServicesInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutServiceCategoriesInput
  }

  export type ServiceCategoryUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    description?: string | null
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryCreateOrConnectWithoutServicesInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
  }

  export type BranchCreateWithoutServicesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutServicesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutServicesInput, BranchUncheckedCreateWithoutServicesInput>
  }

  export type AppointmentCreateWithoutServiceInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    branch: BranchCreateNestedOneWithoutAppointmentsInput
    invoice?: InvoiceCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutServiceInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutServiceInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput>
  }

  export type AppointmentCreateManyServiceInputEnvelope = {
    data: AppointmentCreateManyServiceInput | AppointmentCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type StaffServiceCreateWithoutServiceInput = {
    user: UserCreateNestedOneWithoutServicesInput
  }

  export type StaffServiceUncheckedCreateWithoutServiceInput = {
    userId: string
  }

  export type StaffServiceCreateOrConnectWithoutServiceInput = {
    where: StaffServiceWhereUniqueInput
    create: XOR<StaffServiceCreateWithoutServiceInput, StaffServiceUncheckedCreateWithoutServiceInput>
  }

  export type StaffServiceCreateManyServiceInputEnvelope = {
    data: StaffServiceCreateManyServiceInput | StaffServiceCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type PackageServiceCreateWithoutServiceInput = {
    quantity: number
    package: PackageCreateNestedOneWithoutServicesInput
  }

  export type PackageServiceUncheckedCreateWithoutServiceInput = {
    packageId: string
    quantity: number
  }

  export type PackageServiceCreateOrConnectWithoutServiceInput = {
    where: PackageServiceWhereUniqueInput
    create: XOR<PackageServiceCreateWithoutServiceInput, PackageServiceUncheckedCreateWithoutServiceInput>
  }

  export type PackageServiceCreateManyServiceInputEnvelope = {
    data: PackageServiceCreateManyServiceInput | PackageServiceCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type CommissionItemCreateWithoutServiceInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutCommissionItemsInput
    commissions?: StaffCommissionCreateNestedManyWithoutCommissionItemInput
    appliedRule?: CommissionRuleCreateNestedOneWithoutCommissionItemsInput
  }

  export type CommissionItemUncheckedCreateWithoutServiceInput = {
    id?: string
    invoiceId: string
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutCommissionItemInput
  }

  export type CommissionItemCreateOrConnectWithoutServiceInput = {
    where: CommissionItemWhereUniqueInput
    create: XOR<CommissionItemCreateWithoutServiceInput, CommissionItemUncheckedCreateWithoutServiceInput>
  }

  export type CommissionItemCreateManyServiceInputEnvelope = {
    data: CommissionItemCreateManyServiceInput | CommissionItemCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type StaffCommissionCreateWithoutServiceInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    staff: UserCreateNestedOneWithoutCommissionsInput
    commissionItem: CommissionItemCreateNestedOneWithoutCommissionsInput
    invoice: InvoiceCreateNestedOneWithoutStaffCommissionInput
  }

  export type StaffCommissionUncheckedCreateWithoutServiceInput = {
    id?: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
  }

  export type StaffCommissionCreateOrConnectWithoutServiceInput = {
    where: StaffCommissionWhereUniqueInput
    create: XOR<StaffCommissionCreateWithoutServiceInput, StaffCommissionUncheckedCreateWithoutServiceInput>
  }

  export type StaffCommissionCreateManyServiceInputEnvelope = {
    data: StaffCommissionCreateManyServiceInput | StaffCommissionCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type CommissionRuleCreateWithoutServiceInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCommissionRulesInput
    staff?: UserCreateNestedOneWithoutStaffCommissionRulesInput
    commissionItems?: CommissionItemCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleUncheckedCreateWithoutServiceInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutAppliedRuleInput
  }

  export type CommissionRuleCreateOrConnectWithoutServiceInput = {
    where: CommissionRuleWhereUniqueInput
    create: XOR<CommissionRuleCreateWithoutServiceInput, CommissionRuleUncheckedCreateWithoutServiceInput>
  }

  export type CommissionRuleCreateManyServiceInputEnvelope = {
    data: CommissionRuleCreateManyServiceInput | CommissionRuleCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCategoryUpsertWithoutServicesInput = {
    update: XOR<ServiceCategoryUpdateWithoutServicesInput, ServiceCategoryUncheckedUpdateWithoutServicesInput>
    create: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
    where?: ServiceCategoryWhereInput
  }

  export type ServiceCategoryUpdateToOneWithWhereWithoutServicesInput = {
    where?: ServiceCategoryWhereInput
    data: XOR<ServiceCategoryUpdateWithoutServicesInput, ServiceCategoryUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceCategoryUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutServiceCategoriesNestedInput
  }

  export type ServiceCategoryUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchUpsertWithoutServicesInput = {
    update: XOR<BranchUpdateWithoutServicesInput, BranchUncheckedUpdateWithoutServicesInput>
    create: XOR<BranchCreateWithoutServicesInput, BranchUncheckedCreateWithoutServicesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutServicesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutServicesInput, BranchUncheckedUpdateWithoutServicesInput>
  }

  export type BranchUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutServiceInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutServiceInput, AppointmentUncheckedUpdateWithoutServiceInput>
    create: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutServiceInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutServiceInput, AppointmentUncheckedUpdateWithoutServiceInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutServiceInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutServiceInput>
  }

  export type StaffServiceUpsertWithWhereUniqueWithoutServiceInput = {
    where: StaffServiceWhereUniqueInput
    update: XOR<StaffServiceUpdateWithoutServiceInput, StaffServiceUncheckedUpdateWithoutServiceInput>
    create: XOR<StaffServiceCreateWithoutServiceInput, StaffServiceUncheckedCreateWithoutServiceInput>
  }

  export type StaffServiceUpdateWithWhereUniqueWithoutServiceInput = {
    where: StaffServiceWhereUniqueInput
    data: XOR<StaffServiceUpdateWithoutServiceInput, StaffServiceUncheckedUpdateWithoutServiceInput>
  }

  export type StaffServiceUpdateManyWithWhereWithoutServiceInput = {
    where: StaffServiceScalarWhereInput
    data: XOR<StaffServiceUpdateManyMutationInput, StaffServiceUncheckedUpdateManyWithoutServiceInput>
  }

  export type PackageServiceUpsertWithWhereUniqueWithoutServiceInput = {
    where: PackageServiceWhereUniqueInput
    update: XOR<PackageServiceUpdateWithoutServiceInput, PackageServiceUncheckedUpdateWithoutServiceInput>
    create: XOR<PackageServiceCreateWithoutServiceInput, PackageServiceUncheckedCreateWithoutServiceInput>
  }

  export type PackageServiceUpdateWithWhereUniqueWithoutServiceInput = {
    where: PackageServiceWhereUniqueInput
    data: XOR<PackageServiceUpdateWithoutServiceInput, PackageServiceUncheckedUpdateWithoutServiceInput>
  }

  export type PackageServiceUpdateManyWithWhereWithoutServiceInput = {
    where: PackageServiceScalarWhereInput
    data: XOR<PackageServiceUpdateManyMutationInput, PackageServiceUncheckedUpdateManyWithoutServiceInput>
  }

  export type PackageServiceScalarWhereInput = {
    AND?: PackageServiceScalarWhereInput | PackageServiceScalarWhereInput[]
    OR?: PackageServiceScalarWhereInput[]
    NOT?: PackageServiceScalarWhereInput | PackageServiceScalarWhereInput[]
    packageId?: StringFilter<"PackageService"> | string
    serviceId?: StringFilter<"PackageService"> | string
    quantity?: IntFilter<"PackageService"> | number
  }

  export type CommissionItemUpsertWithWhereUniqueWithoutServiceInput = {
    where: CommissionItemWhereUniqueInput
    update: XOR<CommissionItemUpdateWithoutServiceInput, CommissionItemUncheckedUpdateWithoutServiceInput>
    create: XOR<CommissionItemCreateWithoutServiceInput, CommissionItemUncheckedCreateWithoutServiceInput>
  }

  export type CommissionItemUpdateWithWhereUniqueWithoutServiceInput = {
    where: CommissionItemWhereUniqueInput
    data: XOR<CommissionItemUpdateWithoutServiceInput, CommissionItemUncheckedUpdateWithoutServiceInput>
  }

  export type CommissionItemUpdateManyWithWhereWithoutServiceInput = {
    where: CommissionItemScalarWhereInput
    data: XOR<CommissionItemUpdateManyMutationInput, CommissionItemUncheckedUpdateManyWithoutServiceInput>
  }

  export type CommissionItemScalarWhereInput = {
    AND?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
    OR?: CommissionItemScalarWhereInput[]
    NOT?: CommissionItemScalarWhereInput | CommissionItemScalarWhereInput[]
    id?: StringFilter<"CommissionItem"> | string
    invoiceId?: StringFilter<"CommissionItem"> | string
    serviceId?: StringNullableFilter<"CommissionItem"> | string | null
    amount?: FloatFilter<"CommissionItem"> | number
    status?: EnumCommissionStatusFilter<"CommissionItem"> | $Enums.CommissionStatus
    appliedRuleId?: StringNullableFilter<"CommissionItem"> | string | null
    createdAt?: DateTimeFilter<"CommissionItem"> | Date | string
    updatedAt?: DateTimeFilter<"CommissionItem"> | Date | string
  }

  export type StaffCommissionUpsertWithWhereUniqueWithoutServiceInput = {
    where: StaffCommissionWhereUniqueInput
    update: XOR<StaffCommissionUpdateWithoutServiceInput, StaffCommissionUncheckedUpdateWithoutServiceInput>
    create: XOR<StaffCommissionCreateWithoutServiceInput, StaffCommissionUncheckedCreateWithoutServiceInput>
  }

  export type StaffCommissionUpdateWithWhereUniqueWithoutServiceInput = {
    where: StaffCommissionWhereUniqueInput
    data: XOR<StaffCommissionUpdateWithoutServiceInput, StaffCommissionUncheckedUpdateWithoutServiceInput>
  }

  export type StaffCommissionUpdateManyWithWhereWithoutServiceInput = {
    where: StaffCommissionScalarWhereInput
    data: XOR<StaffCommissionUpdateManyMutationInput, StaffCommissionUncheckedUpdateManyWithoutServiceInput>
  }

  export type CommissionRuleUpsertWithWhereUniqueWithoutServiceInput = {
    where: CommissionRuleWhereUniqueInput
    update: XOR<CommissionRuleUpdateWithoutServiceInput, CommissionRuleUncheckedUpdateWithoutServiceInput>
    create: XOR<CommissionRuleCreateWithoutServiceInput, CommissionRuleUncheckedCreateWithoutServiceInput>
  }

  export type CommissionRuleUpdateWithWhereUniqueWithoutServiceInput = {
    where: CommissionRuleWhereUniqueInput
    data: XOR<CommissionRuleUpdateWithoutServiceInput, CommissionRuleUncheckedUpdateWithoutServiceInput>
  }

  export type CommissionRuleUpdateManyWithWhereWithoutServiceInput = {
    where: CommissionRuleScalarWhereInput
    data: XOR<CommissionRuleUpdateManyMutationInput, CommissionRuleUncheckedUpdateManyWithoutServiceInput>
  }

  export type UserCreateWithoutServicesInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    branch?: BranchCreateNestedOneWithoutUsersInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateWithoutServicesInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserCreateOrConnectWithoutServicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
  }

  export type ServiceCreateWithoutStaffInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutStaffInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutStaffInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutStaffInput, ServiceUncheckedCreateWithoutStaffInput>
  }

  export type UserUpsertWithoutServicesInput = {
    update: XOR<UserUpdateWithoutServicesInput, UserUncheckedUpdateWithoutServicesInput>
    create: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutServicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutServicesInput, UserUncheckedUpdateWithoutServicesInput>
  }

  export type UserUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type ServiceUpsertWithoutStaffInput = {
    update: XOR<ServiceUpdateWithoutStaffInput, ServiceUncheckedUpdateWithoutStaffInput>
    create: XOR<ServiceCreateWithoutStaffInput, ServiceUncheckedCreateWithoutStaffInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutStaffInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutStaffInput, ServiceUncheckedUpdateWithoutStaffInput>
  }

  export type ServiceUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type CustomerCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAppointmentsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
  }

  export type ServiceCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutAppointmentsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    branch?: BranchCreateNestedOneWithoutUsersInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type BranchCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutAppointmentsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutAppointmentsInput, BranchUncheckedCreateWithoutAppointmentsInput>
  }

  export type InvoiceCreateWithoutAppointmentInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    branch: BranchCreateNestedOneWithoutInvoicesInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutAppointmentInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerPackageId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutAppointmentInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutAppointmentInput, InvoiceUncheckedCreateWithoutAppointmentInput>
  }

  export type CustomerUpsertWithoutAppointmentsInput = {
    update: XOR<CustomerUpdateWithoutAppointmentsInput, CustomerUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutAppointmentsInput, CustomerUncheckedUpdateWithoutAppointmentsInput>
  }

  export type CustomerUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type ServiceUpsertWithoutAppointmentsInput = {
    update: XOR<ServiceUpdateWithoutAppointmentsInput, ServiceUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutAppointmentsInput, ServiceUncheckedUpdateWithoutAppointmentsInput>
  }

  export type ServiceUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type BranchUpsertWithoutAppointmentsInput = {
    update: XOR<BranchUpdateWithoutAppointmentsInput, BranchUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<BranchCreateWithoutAppointmentsInput, BranchUncheckedCreateWithoutAppointmentsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutAppointmentsInput, BranchUncheckedUpdateWithoutAppointmentsInput>
  }

  export type BranchUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type InvoiceUpsertWithoutAppointmentInput = {
    update: XOR<InvoiceUpdateWithoutAppointmentInput, InvoiceUncheckedUpdateWithoutAppointmentInput>
    create: XOR<InvoiceCreateWithoutAppointmentInput, InvoiceUncheckedCreateWithoutAppointmentInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutAppointmentInput, InvoiceUncheckedUpdateWithoutAppointmentInput>
  }

  export type InvoiceUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type BranchCreateWithoutPackagesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutPackagesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutPackagesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutPackagesInput, BranchUncheckedCreateWithoutPackagesInput>
  }

  export type PackageServiceCreateWithoutPackageInput = {
    quantity: number
    service: ServiceCreateNestedOneWithoutPackagesInput
  }

  export type PackageServiceUncheckedCreateWithoutPackageInput = {
    serviceId: string
    quantity: number
  }

  export type PackageServiceCreateOrConnectWithoutPackageInput = {
    where: PackageServiceWhereUniqueInput
    create: XOR<PackageServiceCreateWithoutPackageInput, PackageServiceUncheckedCreateWithoutPackageInput>
  }

  export type PackageServiceCreateManyPackageInputEnvelope = {
    data: PackageServiceCreateManyPackageInput | PackageServiceCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type CustomerPackageCreateWithoutPackageInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutPackagesInput
    invoice?: InvoiceCreateNestedOneWithoutCustomerPackageInput
  }

  export type CustomerPackageUncheckedCreateWithoutPackageInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    customerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice?: InvoiceUncheckedCreateNestedOneWithoutCustomerPackageInput
  }

  export type CustomerPackageCreateOrConnectWithoutPackageInput = {
    where: CustomerPackageWhereUniqueInput
    create: XOR<CustomerPackageCreateWithoutPackageInput, CustomerPackageUncheckedCreateWithoutPackageInput>
  }

  export type CustomerPackageCreateManyPackageInputEnvelope = {
    data: CustomerPackageCreateManyPackageInput | CustomerPackageCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutPackagesInput = {
    update: XOR<BranchUpdateWithoutPackagesInput, BranchUncheckedUpdateWithoutPackagesInput>
    create: XOR<BranchCreateWithoutPackagesInput, BranchUncheckedCreateWithoutPackagesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutPackagesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutPackagesInput, BranchUncheckedUpdateWithoutPackagesInput>
  }

  export type BranchUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type PackageServiceUpsertWithWhereUniqueWithoutPackageInput = {
    where: PackageServiceWhereUniqueInput
    update: XOR<PackageServiceUpdateWithoutPackageInput, PackageServiceUncheckedUpdateWithoutPackageInput>
    create: XOR<PackageServiceCreateWithoutPackageInput, PackageServiceUncheckedCreateWithoutPackageInput>
  }

  export type PackageServiceUpdateWithWhereUniqueWithoutPackageInput = {
    where: PackageServiceWhereUniqueInput
    data: XOR<PackageServiceUpdateWithoutPackageInput, PackageServiceUncheckedUpdateWithoutPackageInput>
  }

  export type PackageServiceUpdateManyWithWhereWithoutPackageInput = {
    where: PackageServiceScalarWhereInput
    data: XOR<PackageServiceUpdateManyMutationInput, PackageServiceUncheckedUpdateManyWithoutPackageInput>
  }

  export type CustomerPackageUpsertWithWhereUniqueWithoutPackageInput = {
    where: CustomerPackageWhereUniqueInput
    update: XOR<CustomerPackageUpdateWithoutPackageInput, CustomerPackageUncheckedUpdateWithoutPackageInput>
    create: XOR<CustomerPackageCreateWithoutPackageInput, CustomerPackageUncheckedCreateWithoutPackageInput>
  }

  export type CustomerPackageUpdateWithWhereUniqueWithoutPackageInput = {
    where: CustomerPackageWhereUniqueInput
    data: XOR<CustomerPackageUpdateWithoutPackageInput, CustomerPackageUncheckedUpdateWithoutPackageInput>
  }

  export type CustomerPackageUpdateManyWithWhereWithoutPackageInput = {
    where: CustomerPackageScalarWhereInput
    data: XOR<CustomerPackageUpdateManyMutationInput, CustomerPackageUncheckedUpdateManyWithoutPackageInput>
  }

  export type PackageCreateWithoutServicesInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutPackagesInput
    customerPackages?: CustomerPackageCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    branchId: string
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customerPackages?: CustomerPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutServicesInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutServicesInput, PackageUncheckedCreateWithoutServicesInput>
  }

  export type ServiceCreateWithoutPackagesInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutPackagesInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutPackagesInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutPackagesInput, ServiceUncheckedCreateWithoutPackagesInput>
  }

  export type PackageUpsertWithoutServicesInput = {
    update: XOR<PackageUpdateWithoutServicesInput, PackageUncheckedUpdateWithoutServicesInput>
    create: XOR<PackageCreateWithoutServicesInput, PackageUncheckedCreateWithoutServicesInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutServicesInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutServicesInput, PackageUncheckedUpdateWithoutServicesInput>
  }

  export type PackageUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutPackagesNestedInput
    customerPackages?: CustomerPackageUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerPackages?: CustomerPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type ServiceUpsertWithoutPackagesInput = {
    update: XOR<ServiceUpdateWithoutPackagesInput, ServiceUncheckedUpdateWithoutPackagesInput>
    create: XOR<ServiceCreateWithoutPackagesInput, ServiceUncheckedCreateWithoutPackagesInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutPackagesInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutPackagesInput, ServiceUncheckedUpdateWithoutPackagesInput>
  }

  export type ServiceUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type CustomerCreateWithoutPackagesInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPackagesInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPackagesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPackagesInput, CustomerUncheckedCreateWithoutPackagesInput>
  }

  export type PackageCreateWithoutCustomerPackagesInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutPackagesInput
    services?: PackageServiceCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutCustomerPackagesInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    branchId: string
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: PackageServiceUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutCustomerPackagesInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutCustomerPackagesInput, PackageUncheckedCreateWithoutCustomerPackagesInput>
  }

  export type InvoiceCreateWithoutCustomerPackageInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    branch: BranchCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutCustomerPackageInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutCustomerPackageInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCustomerPackageInput, InvoiceUncheckedCreateWithoutCustomerPackageInput>
  }

  export type CustomerUpsertWithoutPackagesInput = {
    update: XOR<CustomerUpdateWithoutPackagesInput, CustomerUncheckedUpdateWithoutPackagesInput>
    create: XOR<CustomerCreateWithoutPackagesInput, CustomerUncheckedCreateWithoutPackagesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPackagesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPackagesInput, CustomerUncheckedUpdateWithoutPackagesInput>
  }

  export type CustomerUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type PackageUpsertWithoutCustomerPackagesInput = {
    update: XOR<PackageUpdateWithoutCustomerPackagesInput, PackageUncheckedUpdateWithoutCustomerPackagesInput>
    create: XOR<PackageCreateWithoutCustomerPackagesInput, PackageUncheckedCreateWithoutCustomerPackagesInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutCustomerPackagesInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutCustomerPackagesInput, PackageUncheckedUpdateWithoutCustomerPackagesInput>
  }

  export type PackageUpdateWithoutCustomerPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutPackagesNestedInput
    services?: PackageServiceUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutCustomerPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: PackageServiceUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type InvoiceUpsertWithoutCustomerPackageInput = {
    update: XOR<InvoiceUpdateWithoutCustomerPackageInput, InvoiceUncheckedUpdateWithoutCustomerPackageInput>
    create: XOR<InvoiceCreateWithoutCustomerPackageInput, InvoiceUncheckedCreateWithoutCustomerPackageInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutCustomerPackageInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutCustomerPackageInput, InvoiceUncheckedUpdateWithoutCustomerPackageInput>
  }

  export type InvoiceUpdateWithoutCustomerPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutCustomerPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type CustomerCreateWithoutInvoicesInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutInvoicesInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutInvoicesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
  }

  export type BranchCreateWithoutInvoicesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutInvoicesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutInvoicesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutInvoicesInput, BranchUncheckedCreateWithoutInvoicesInput>
  }

  export type AppointmentCreateWithoutInvoiceInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    branch: BranchCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutInvoiceInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutInvoiceInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutInvoiceInput, AppointmentUncheckedCreateWithoutInvoiceInput>
  }

  export type CustomerPackageCreateWithoutInvoiceInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutPackagesInput
    package: PackageCreateNestedOneWithoutCustomerPackagesInput
  }

  export type CustomerPackageUncheckedCreateWithoutInvoiceInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    customerId: string
    packageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerPackageCreateOrConnectWithoutInvoiceInput = {
    where: CustomerPackageWhereUniqueInput
    create: XOR<CustomerPackageCreateWithoutInvoiceInput, CustomerPackageUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    cashLog?: CashRegisterLogCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    cashRegisterLogId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentCreateManyInvoiceInputEnvelope = {
    data: PaymentCreateManyInvoiceInput | PaymentCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type CommissionItemCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    service?: ServiceCreateNestedOneWithoutCommissionItemsInput
    commissions?: StaffCommissionCreateNestedManyWithoutCommissionItemInput
    appliedRule?: CommissionRuleCreateNestedOneWithoutCommissionItemsInput
  }

  export type CommissionItemUncheckedCreateWithoutInvoiceInput = {
    id?: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutCommissionItemInput
  }

  export type CommissionItemCreateOrConnectWithoutInvoiceInput = {
    where: CommissionItemWhereUniqueInput
    create: XOR<CommissionItemCreateWithoutInvoiceInput, CommissionItemUncheckedCreateWithoutInvoiceInput>
  }

  export type CommissionItemCreateManyInvoiceInputEnvelope = {
    data: CommissionItemCreateManyInvoiceInput | CommissionItemCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type StaffCommissionCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    staff: UserCreateNestedOneWithoutCommissionsInput
    commissionItem: CommissionItemCreateNestedOneWithoutCommissionsInput
    service?: ServiceCreateNestedOneWithoutStaffCommissionInput
  }

  export type StaffCommissionUncheckedCreateWithoutInvoiceInput = {
    id?: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    serviceId?: string | null
  }

  export type StaffCommissionCreateOrConnectWithoutInvoiceInput = {
    where: StaffCommissionWhereUniqueInput
    create: XOR<StaffCommissionCreateWithoutInvoiceInput, StaffCommissionUncheckedCreateWithoutInvoiceInput>
  }

  export type StaffCommissionCreateManyInvoiceInputEnvelope = {
    data: StaffCommissionCreateManyInvoiceInput | StaffCommissionCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutInvoicesInput = {
    update: XOR<CustomerUpdateWithoutInvoicesInput, CustomerUncheckedUpdateWithoutInvoicesInput>
    create: XOR<CustomerCreateWithoutInvoicesInput, CustomerUncheckedCreateWithoutInvoicesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutInvoicesInput, CustomerUncheckedUpdateWithoutInvoicesInput>
  }

  export type CustomerUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type BranchUpsertWithoutInvoicesInput = {
    update: XOR<BranchUpdateWithoutInvoicesInput, BranchUncheckedUpdateWithoutInvoicesInput>
    create: XOR<BranchCreateWithoutInvoicesInput, BranchUncheckedCreateWithoutInvoicesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutInvoicesInput, BranchUncheckedUpdateWithoutInvoicesInput>
  }

  export type BranchUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type AppointmentUpsertWithoutInvoiceInput = {
    update: XOR<AppointmentUpdateWithoutInvoiceInput, AppointmentUncheckedUpdateWithoutInvoiceInput>
    create: XOR<AppointmentCreateWithoutInvoiceInput, AppointmentUncheckedCreateWithoutInvoiceInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutInvoiceInput, AppointmentUncheckedUpdateWithoutInvoiceInput>
  }

  export type AppointmentUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    branch?: BranchUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPackageUpsertWithoutInvoiceInput = {
    update: XOR<CustomerPackageUpdateWithoutInvoiceInput, CustomerPackageUncheckedUpdateWithoutInvoiceInput>
    create: XOR<CustomerPackageCreateWithoutInvoiceInput, CustomerPackageUncheckedCreateWithoutInvoiceInput>
    where?: CustomerPackageWhereInput
  }

  export type CustomerPackageUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: CustomerPackageWhereInput
    data: XOR<CustomerPackageUpdateWithoutInvoiceInput, CustomerPackageUncheckedUpdateWithoutInvoiceInput>
  }

  export type CustomerPackageUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutPackagesNestedInput
    package?: PackageUpdateOneRequiredWithoutCustomerPackagesNestedInput
  }

  export type CustomerPackageUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutInvoiceInput, PaymentUncheckedUpdateWithoutInvoiceInput>
    create: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutInvoiceInput, PaymentUncheckedUpdateWithoutInvoiceInput>
  }

  export type PaymentUpdateManyWithWhereWithoutInvoiceInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    invoiceId?: StringFilter<"Payment"> | string
    cashRegisterLogId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type CommissionItemUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: CommissionItemWhereUniqueInput
    update: XOR<CommissionItemUpdateWithoutInvoiceInput, CommissionItemUncheckedUpdateWithoutInvoiceInput>
    create: XOR<CommissionItemCreateWithoutInvoiceInput, CommissionItemUncheckedCreateWithoutInvoiceInput>
  }

  export type CommissionItemUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: CommissionItemWhereUniqueInput
    data: XOR<CommissionItemUpdateWithoutInvoiceInput, CommissionItemUncheckedUpdateWithoutInvoiceInput>
  }

  export type CommissionItemUpdateManyWithWhereWithoutInvoiceInput = {
    where: CommissionItemScalarWhereInput
    data: XOR<CommissionItemUpdateManyMutationInput, CommissionItemUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type StaffCommissionUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: StaffCommissionWhereUniqueInput
    update: XOR<StaffCommissionUpdateWithoutInvoiceInput, StaffCommissionUncheckedUpdateWithoutInvoiceInput>
    create: XOR<StaffCommissionCreateWithoutInvoiceInput, StaffCommissionUncheckedCreateWithoutInvoiceInput>
  }

  export type StaffCommissionUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: StaffCommissionWhereUniqueInput
    data: XOR<StaffCommissionUpdateWithoutInvoiceInput, StaffCommissionUncheckedUpdateWithoutInvoiceInput>
  }

  export type StaffCommissionUpdateManyWithWhereWithoutInvoiceInput = {
    where: StaffCommissionScalarWhereInput
    data: XOR<StaffCommissionUpdateManyMutationInput, StaffCommissionUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceCreateWithoutPaymentsInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    branch: BranchCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutPaymentsInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutPaymentsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
  }

  export type CashRegisterLogCreateWithoutPaymentsInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
    branch: BranchCreateNestedOneWithoutCashRegisterLogInput
    user: UserCreateNestedOneWithoutCashRegisterLogInput
  }

  export type CashRegisterLogUncheckedCreateWithoutPaymentsInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    branchId: string
    userId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
  }

  export type CashRegisterLogCreateOrConnectWithoutPaymentsInput = {
    where: CashRegisterLogWhereUniqueInput
    create: XOR<CashRegisterLogCreateWithoutPaymentsInput, CashRegisterLogUncheckedCreateWithoutPaymentsInput>
  }

  export type InvoiceUpsertWithoutPaymentsInput = {
    update: XOR<InvoiceUpdateWithoutPaymentsInput, InvoiceUncheckedUpdateWithoutPaymentsInput>
    create: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutPaymentsInput, InvoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type InvoiceUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type CashRegisterLogUpsertWithoutPaymentsInput = {
    update: XOR<CashRegisterLogUpdateWithoutPaymentsInput, CashRegisterLogUncheckedUpdateWithoutPaymentsInput>
    create: XOR<CashRegisterLogCreateWithoutPaymentsInput, CashRegisterLogUncheckedCreateWithoutPaymentsInput>
    where?: CashRegisterLogWhereInput
  }

  export type CashRegisterLogUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: CashRegisterLogWhereInput
    data: XOR<CashRegisterLogUpdateWithoutPaymentsInput, CashRegisterLogUncheckedUpdateWithoutPaymentsInput>
  }

  export type CashRegisterLogUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    branch?: BranchUpdateOneRequiredWithoutCashRegisterLogNestedInput
    user?: UserUpdateOneRequiredWithoutCashRegisterLogNestedInput
  }

  export type CashRegisterLogUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
  }

  export type BranchCreateWithoutCommissionRulesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutCommissionRulesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutCommissionRulesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutCommissionRulesInput, BranchUncheckedCreateWithoutCommissionRulesInput>
  }

  export type ServiceCreateWithoutCommissionRulesInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutCommissionRulesInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutCommissionRulesInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutCommissionRulesInput, ServiceUncheckedCreateWithoutCommissionRulesInput>
  }

  export type UserCreateWithoutStaffCommissionRulesInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    branch?: BranchCreateNestedOneWithoutUsersInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateWithoutStaffCommissionRulesInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserCreateOrConnectWithoutStaffCommissionRulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffCommissionRulesInput, UserUncheckedCreateWithoutStaffCommissionRulesInput>
  }

  export type CommissionItemCreateWithoutAppliedRuleInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutCommissionItemsInput
    service?: ServiceCreateNestedOneWithoutCommissionItemsInput
    commissions?: StaffCommissionCreateNestedManyWithoutCommissionItemInput
  }

  export type CommissionItemUncheckedCreateWithoutAppliedRuleInput = {
    id?: string
    invoiceId: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutCommissionItemInput
  }

  export type CommissionItemCreateOrConnectWithoutAppliedRuleInput = {
    where: CommissionItemWhereUniqueInput
    create: XOR<CommissionItemCreateWithoutAppliedRuleInput, CommissionItemUncheckedCreateWithoutAppliedRuleInput>
  }

  export type CommissionItemCreateManyAppliedRuleInputEnvelope = {
    data: CommissionItemCreateManyAppliedRuleInput | CommissionItemCreateManyAppliedRuleInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutCommissionRulesInput = {
    update: XOR<BranchUpdateWithoutCommissionRulesInput, BranchUncheckedUpdateWithoutCommissionRulesInput>
    create: XOR<BranchCreateWithoutCommissionRulesInput, BranchUncheckedCreateWithoutCommissionRulesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutCommissionRulesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutCommissionRulesInput, BranchUncheckedUpdateWithoutCommissionRulesInput>
  }

  export type BranchUpdateWithoutCommissionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutCommissionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type ServiceUpsertWithoutCommissionRulesInput = {
    update: XOR<ServiceUpdateWithoutCommissionRulesInput, ServiceUncheckedUpdateWithoutCommissionRulesInput>
    create: XOR<ServiceCreateWithoutCommissionRulesInput, ServiceUncheckedCreateWithoutCommissionRulesInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutCommissionRulesInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutCommissionRulesInput, ServiceUncheckedUpdateWithoutCommissionRulesInput>
  }

  export type ServiceUpdateWithoutCommissionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutCommissionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type UserUpsertWithoutStaffCommissionRulesInput = {
    update: XOR<UserUpdateWithoutStaffCommissionRulesInput, UserUncheckedUpdateWithoutStaffCommissionRulesInput>
    create: XOR<UserCreateWithoutStaffCommissionRulesInput, UserUncheckedCreateWithoutStaffCommissionRulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffCommissionRulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffCommissionRulesInput, UserUncheckedUpdateWithoutStaffCommissionRulesInput>
  }

  export type UserUpdateWithoutStaffCommissionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffCommissionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type CommissionItemUpsertWithWhereUniqueWithoutAppliedRuleInput = {
    where: CommissionItemWhereUniqueInput
    update: XOR<CommissionItemUpdateWithoutAppliedRuleInput, CommissionItemUncheckedUpdateWithoutAppliedRuleInput>
    create: XOR<CommissionItemCreateWithoutAppliedRuleInput, CommissionItemUncheckedCreateWithoutAppliedRuleInput>
  }

  export type CommissionItemUpdateWithWhereUniqueWithoutAppliedRuleInput = {
    where: CommissionItemWhereUniqueInput
    data: XOR<CommissionItemUpdateWithoutAppliedRuleInput, CommissionItemUncheckedUpdateWithoutAppliedRuleInput>
  }

  export type CommissionItemUpdateManyWithWhereWithoutAppliedRuleInput = {
    where: CommissionItemScalarWhereInput
    data: XOR<CommissionItemUpdateManyMutationInput, CommissionItemUncheckedUpdateManyWithoutAppliedRuleInput>
  }

  export type InvoiceCreateWithoutCommissionItemsInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    branch: BranchCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutCommissionItemsInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutCommissionItemsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCommissionItemsInput, InvoiceUncheckedCreateWithoutCommissionItemsInput>
  }

  export type ServiceCreateWithoutCommissionItemsInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutCommissionItemsInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    StaffCommission?: StaffCommissionUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutCommissionItemsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutCommissionItemsInput, ServiceUncheckedCreateWithoutCommissionItemsInput>
  }

  export type StaffCommissionCreateWithoutCommissionItemInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    staff: UserCreateNestedOneWithoutCommissionsInput
    invoice: InvoiceCreateNestedOneWithoutStaffCommissionInput
    service?: ServiceCreateNestedOneWithoutStaffCommissionInput
  }

  export type StaffCommissionUncheckedCreateWithoutCommissionItemInput = {
    id?: string
    staffId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
    serviceId?: string | null
  }

  export type StaffCommissionCreateOrConnectWithoutCommissionItemInput = {
    where: StaffCommissionWhereUniqueInput
    create: XOR<StaffCommissionCreateWithoutCommissionItemInput, StaffCommissionUncheckedCreateWithoutCommissionItemInput>
  }

  export type StaffCommissionCreateManyCommissionItemInputEnvelope = {
    data: StaffCommissionCreateManyCommissionItemInput | StaffCommissionCreateManyCommissionItemInput[]
    skipDuplicates?: boolean
  }

  export type CommissionRuleCreateWithoutCommissionItemsInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCommissionRulesInput
    service?: ServiceCreateNestedOneWithoutCommissionRulesInput
    staff?: UserCreateNestedOneWithoutStaffCommissionRulesInput
  }

  export type CommissionRuleUncheckedCreateWithoutCommissionItemsInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    serviceId?: string | null
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommissionRuleCreateOrConnectWithoutCommissionItemsInput = {
    where: CommissionRuleWhereUniqueInput
    create: XOR<CommissionRuleCreateWithoutCommissionItemsInput, CommissionRuleUncheckedCreateWithoutCommissionItemsInput>
  }

  export type InvoiceUpsertWithoutCommissionItemsInput = {
    update: XOR<InvoiceUpdateWithoutCommissionItemsInput, InvoiceUncheckedUpdateWithoutCommissionItemsInput>
    create: XOR<InvoiceCreateWithoutCommissionItemsInput, InvoiceUncheckedCreateWithoutCommissionItemsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutCommissionItemsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutCommissionItemsInput, InvoiceUncheckedUpdateWithoutCommissionItemsInput>
  }

  export type InvoiceUpdateWithoutCommissionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutCommissionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type ServiceUpsertWithoutCommissionItemsInput = {
    update: XOR<ServiceUpdateWithoutCommissionItemsInput, ServiceUncheckedUpdateWithoutCommissionItemsInput>
    create: XOR<ServiceCreateWithoutCommissionItemsInput, ServiceUncheckedCreateWithoutCommissionItemsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutCommissionItemsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutCommissionItemsInput, ServiceUncheckedUpdateWithoutCommissionItemsInput>
  }

  export type ServiceUpdateWithoutCommissionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutCommissionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type StaffCommissionUpsertWithWhereUniqueWithoutCommissionItemInput = {
    where: StaffCommissionWhereUniqueInput
    update: XOR<StaffCommissionUpdateWithoutCommissionItemInput, StaffCommissionUncheckedUpdateWithoutCommissionItemInput>
    create: XOR<StaffCommissionCreateWithoutCommissionItemInput, StaffCommissionUncheckedCreateWithoutCommissionItemInput>
  }

  export type StaffCommissionUpdateWithWhereUniqueWithoutCommissionItemInput = {
    where: StaffCommissionWhereUniqueInput
    data: XOR<StaffCommissionUpdateWithoutCommissionItemInput, StaffCommissionUncheckedUpdateWithoutCommissionItemInput>
  }

  export type StaffCommissionUpdateManyWithWhereWithoutCommissionItemInput = {
    where: StaffCommissionScalarWhereInput
    data: XOR<StaffCommissionUpdateManyMutationInput, StaffCommissionUncheckedUpdateManyWithoutCommissionItemInput>
  }

  export type CommissionRuleUpsertWithoutCommissionItemsInput = {
    update: XOR<CommissionRuleUpdateWithoutCommissionItemsInput, CommissionRuleUncheckedUpdateWithoutCommissionItemsInput>
    create: XOR<CommissionRuleCreateWithoutCommissionItemsInput, CommissionRuleUncheckedCreateWithoutCommissionItemsInput>
    where?: CommissionRuleWhereInput
  }

  export type CommissionRuleUpdateToOneWithWhereWithoutCommissionItemsInput = {
    where?: CommissionRuleWhereInput
    data: XOR<CommissionRuleUpdateWithoutCommissionItemsInput, CommissionRuleUncheckedUpdateWithoutCommissionItemsInput>
  }

  export type CommissionRuleUpdateWithoutCommissionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCommissionRulesNestedInput
    service?: ServiceUpdateOneWithoutCommissionRulesNestedInput
    staff?: UserUpdateOneWithoutStaffCommissionRulesNestedInput
  }

  export type CommissionRuleUncheckedUpdateWithoutCommissionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutCommissionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    branch?: BranchCreateNestedOneWithoutUsersInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateWithoutCommissionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutUserInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserCreateOrConnectWithoutCommissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommissionsInput, UserUncheckedCreateWithoutCommissionsInput>
  }

  export type CommissionItemCreateWithoutCommissionsInput = {
    id?: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutCommissionItemsInput
    service?: ServiceCreateNestedOneWithoutCommissionItemsInput
    appliedRule?: CommissionRuleCreateNestedOneWithoutCommissionItemsInput
  }

  export type CommissionItemUncheckedCreateWithoutCommissionsInput = {
    id?: string
    invoiceId: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommissionItemCreateOrConnectWithoutCommissionsInput = {
    where: CommissionItemWhereUniqueInput
    create: XOR<CommissionItemCreateWithoutCommissionsInput, CommissionItemUncheckedCreateWithoutCommissionsInput>
  }

  export type InvoiceCreateWithoutStaffCommissionInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutInvoicesInput
    branch: BranchCreateNestedOneWithoutInvoicesInput
    appointment?: AppointmentCreateNestedOneWithoutInvoiceInput
    customerPackage?: CustomerPackageCreateNestedOneWithoutInvoiceInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutStaffCommissionInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutStaffCommissionInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutStaffCommissionInput, InvoiceUncheckedCreateWithoutStaffCommissionInput>
  }

  export type ServiceCreateWithoutStaffCommissionInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    branch: BranchCreateNestedOneWithoutServicesInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
    staff?: StaffServiceCreateNestedManyWithoutServiceInput
    packages?: PackageServiceCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutStaffCommissionInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
    staff?: StaffServiceUncheckedCreateNestedManyWithoutServiceInput
    packages?: PackageServiceUncheckedCreateNestedManyWithoutServiceInput
    commissionItems?: CommissionItemUncheckedCreateNestedManyWithoutServiceInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutStaffCommissionInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutStaffCommissionInput, ServiceUncheckedCreateWithoutStaffCommissionInput>
  }

  export type UserUpsertWithoutCommissionsInput = {
    update: XOR<UserUpdateWithoutCommissionsInput, UserUncheckedUpdateWithoutCommissionsInput>
    create: XOR<UserCreateWithoutCommissionsInput, UserUncheckedCreateWithoutCommissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommissionsInput, UserUncheckedUpdateWithoutCommissionsInput>
  }

  export type UserUpdateWithoutCommissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateWithoutCommissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type CommissionItemUpsertWithoutCommissionsInput = {
    update: XOR<CommissionItemUpdateWithoutCommissionsInput, CommissionItemUncheckedUpdateWithoutCommissionsInput>
    create: XOR<CommissionItemCreateWithoutCommissionsInput, CommissionItemUncheckedCreateWithoutCommissionsInput>
    where?: CommissionItemWhereInput
  }

  export type CommissionItemUpdateToOneWithWhereWithoutCommissionsInput = {
    where?: CommissionItemWhereInput
    data: XOR<CommissionItemUpdateWithoutCommissionsInput, CommissionItemUncheckedUpdateWithoutCommissionsInput>
  }

  export type CommissionItemUpdateWithoutCommissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutCommissionItemsNestedInput
    service?: ServiceUpdateOneWithoutCommissionItemsNestedInput
    appliedRule?: CommissionRuleUpdateOneWithoutCommissionItemsNestedInput
  }

  export type CommissionItemUncheckedUpdateWithoutCommissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpsertWithoutStaffCommissionInput = {
    update: XOR<InvoiceUpdateWithoutStaffCommissionInput, InvoiceUncheckedUpdateWithoutStaffCommissionInput>
    create: XOR<InvoiceCreateWithoutStaffCommissionInput, InvoiceUncheckedCreateWithoutStaffCommissionInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutStaffCommissionInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutStaffCommissionInput, InvoiceUncheckedUpdateWithoutStaffCommissionInput>
  }

  export type InvoiceUpdateWithoutStaffCommissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutStaffCommissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type ServiceUpsertWithoutStaffCommissionInput = {
    update: XOR<ServiceUpdateWithoutStaffCommissionInput, ServiceUncheckedUpdateWithoutStaffCommissionInput>
    create: XOR<ServiceCreateWithoutStaffCommissionInput, ServiceUncheckedCreateWithoutStaffCommissionInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutStaffCommissionInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutStaffCommissionInput, ServiceUncheckedUpdateWithoutStaffCommissionInput>
  }

  export type ServiceUpdateWithoutStaffCommissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutStaffCommissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type BranchCreateWithoutCashRegisterLogInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutCashRegisterLogInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutCashRegisterLogInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutCashRegisterLogInput, BranchUncheckedCreateWithoutCashRegisterLogInput>
  }

  export type UserCreateWithoutCashRegisterLogInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    staffCommissionRules?: CommissionRuleCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionCreateNestedManyWithoutStaffInput
    services?: StaffServiceCreateNestedManyWithoutUserInput
    branch?: BranchCreateNestedOneWithoutUsersInput
    workHours?: WorkHourCreateNestedManyWithoutStaffInput
  }

  export type UserUncheckedCreateWithoutCashRegisterLogInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    branchId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    staffCommissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutStaffInput
    commissions?: StaffCommissionUncheckedCreateNestedManyWithoutStaffInput
    services?: StaffServiceUncheckedCreateNestedManyWithoutUserInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutStaffInput
  }

  export type UserCreateOrConnectWithoutCashRegisterLogInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCashRegisterLogInput, UserUncheckedCreateWithoutCashRegisterLogInput>
  }

  export type PaymentCreateWithoutCashLogInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutCashLogInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    invoiceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutCashLogInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCashLogInput, PaymentUncheckedCreateWithoutCashLogInput>
  }

  export type PaymentCreateManyCashLogInputEnvelope = {
    data: PaymentCreateManyCashLogInput | PaymentCreateManyCashLogInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutCashRegisterLogInput = {
    update: XOR<BranchUpdateWithoutCashRegisterLogInput, BranchUncheckedUpdateWithoutCashRegisterLogInput>
    create: XOR<BranchCreateWithoutCashRegisterLogInput, BranchUncheckedCreateWithoutCashRegisterLogInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutCashRegisterLogInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutCashRegisterLogInput, BranchUncheckedUpdateWithoutCashRegisterLogInput>
  }

  export type BranchUpdateWithoutCashRegisterLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutCashRegisterLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type UserUpsertWithoutCashRegisterLogInput = {
    update: XOR<UserUpdateWithoutCashRegisterLogInput, UserUncheckedUpdateWithoutCashRegisterLogInput>
    create: XOR<UserCreateWithoutCashRegisterLogInput, UserUncheckedCreateWithoutCashRegisterLogInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCashRegisterLogInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCashRegisterLogInput, UserUncheckedUpdateWithoutCashRegisterLogInput>
  }

  export type UserUpdateWithoutCashRegisterLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    branch?: BranchUpdateOneWithoutUsersNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateWithoutCashRegisterLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type PaymentUpsertWithWhereUniqueWithoutCashLogInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutCashLogInput, PaymentUncheckedUpdateWithoutCashLogInput>
    create: XOR<PaymentCreateWithoutCashLogInput, PaymentUncheckedCreateWithoutCashLogInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutCashLogInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutCashLogInput, PaymentUncheckedUpdateWithoutCashLogInput>
  }

  export type PaymentUpdateManyWithWhereWithoutCashLogInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutCashLogInput>
  }

  export type BranchCreateWithoutNotificationProvidersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutNotificationProvidersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutNotificationProvidersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNotificationProvidersInput, BranchUncheckedCreateWithoutNotificationProvidersInput>
  }

  export type BranchUpsertWithoutNotificationProvidersInput = {
    update: XOR<BranchUpdateWithoutNotificationProvidersInput, BranchUncheckedUpdateWithoutNotificationProvidersInput>
    create: XOR<BranchCreateWithoutNotificationProvidersInput, BranchUncheckedCreateWithoutNotificationProvidersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNotificationProvidersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNotificationProvidersInput, BranchUncheckedUpdateWithoutNotificationProvidersInput>
  }

  export type BranchUpdateWithoutNotificationProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNotificationProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type BranchCreateWithoutNotificationTemplatesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutNotificationTemplatesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutNotificationTemplatesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNotificationTemplatesInput, BranchUncheckedCreateWithoutNotificationTemplatesInput>
  }

  export type NotificationTriggerCreateWithoutTemplateInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationTriggersInput
    queue?: NotificationQueueCreateNestedManyWithoutTriggerInput
    history?: NotificationHistoryCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerUncheckedCreateWithoutTemplateInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    branchId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTriggerInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerCreateOrConnectWithoutTemplateInput = {
    where: NotificationTriggerWhereUniqueInput
    create: XOR<NotificationTriggerCreateWithoutTemplateInput, NotificationTriggerUncheckedCreateWithoutTemplateInput>
  }

  export type NotificationTriggerCreateManyTemplateInputEnvelope = {
    data: NotificationTriggerCreateManyTemplateInput | NotificationTriggerCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type NotificationQueueCreateWithoutTemplateInput = {
    id?: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationQueueInput
    trigger?: NotificationTriggerCreateNestedOneWithoutQueueInput
    branch: BranchCreateNestedOneWithoutNotificationQueueInput
  }

  export type NotificationQueueUncheckedCreateWithoutTemplateInput = {
    id?: string
    customerId: string
    triggerId?: string | null
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueCreateOrConnectWithoutTemplateInput = {
    where: NotificationQueueWhereUniqueInput
    create: XOR<NotificationQueueCreateWithoutTemplateInput, NotificationQueueUncheckedCreateWithoutTemplateInput>
  }

  export type NotificationQueueCreateManyTemplateInputEnvelope = {
    data: NotificationQueueCreateManyTemplateInput | NotificationQueueCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type NotificationHistoryCreateWithoutTemplateInput = {
    id?: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationHistoryInput
    trigger?: NotificationTriggerCreateNestedOneWithoutHistoryInput
    branch: BranchCreateNestedOneWithoutNotificationHistoryInput
  }

  export type NotificationHistoryUncheckedCreateWithoutTemplateInput = {
    id?: string
    customerId: string
    triggerId?: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationHistoryCreateOrConnectWithoutTemplateInput = {
    where: NotificationHistoryWhereUniqueInput
    create: XOR<NotificationHistoryCreateWithoutTemplateInput, NotificationHistoryUncheckedCreateWithoutTemplateInput>
  }

  export type NotificationHistoryCreateManyTemplateInputEnvelope = {
    data: NotificationHistoryCreateManyTemplateInput | NotificationHistoryCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutNotificationTemplatesInput = {
    update: XOR<BranchUpdateWithoutNotificationTemplatesInput, BranchUncheckedUpdateWithoutNotificationTemplatesInput>
    create: XOR<BranchCreateWithoutNotificationTemplatesInput, BranchUncheckedCreateWithoutNotificationTemplatesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNotificationTemplatesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNotificationTemplatesInput, BranchUncheckedUpdateWithoutNotificationTemplatesInput>
  }

  export type BranchUpdateWithoutNotificationTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNotificationTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type NotificationTriggerUpsertWithWhereUniqueWithoutTemplateInput = {
    where: NotificationTriggerWhereUniqueInput
    update: XOR<NotificationTriggerUpdateWithoutTemplateInput, NotificationTriggerUncheckedUpdateWithoutTemplateInput>
    create: XOR<NotificationTriggerCreateWithoutTemplateInput, NotificationTriggerUncheckedCreateWithoutTemplateInput>
  }

  export type NotificationTriggerUpdateWithWhereUniqueWithoutTemplateInput = {
    where: NotificationTriggerWhereUniqueInput
    data: XOR<NotificationTriggerUpdateWithoutTemplateInput, NotificationTriggerUncheckedUpdateWithoutTemplateInput>
  }

  export type NotificationTriggerUpdateManyWithWhereWithoutTemplateInput = {
    where: NotificationTriggerScalarWhereInput
    data: XOR<NotificationTriggerUpdateManyMutationInput, NotificationTriggerUncheckedUpdateManyWithoutTemplateInput>
  }

  export type NotificationQueueUpsertWithWhereUniqueWithoutTemplateInput = {
    where: NotificationQueueWhereUniqueInput
    update: XOR<NotificationQueueUpdateWithoutTemplateInput, NotificationQueueUncheckedUpdateWithoutTemplateInput>
    create: XOR<NotificationQueueCreateWithoutTemplateInput, NotificationQueueUncheckedCreateWithoutTemplateInput>
  }

  export type NotificationQueueUpdateWithWhereUniqueWithoutTemplateInput = {
    where: NotificationQueueWhereUniqueInput
    data: XOR<NotificationQueueUpdateWithoutTemplateInput, NotificationQueueUncheckedUpdateWithoutTemplateInput>
  }

  export type NotificationQueueUpdateManyWithWhereWithoutTemplateInput = {
    where: NotificationQueueScalarWhereInput
    data: XOR<NotificationQueueUpdateManyMutationInput, NotificationQueueUncheckedUpdateManyWithoutTemplateInput>
  }

  export type NotificationHistoryUpsertWithWhereUniqueWithoutTemplateInput = {
    where: NotificationHistoryWhereUniqueInput
    update: XOR<NotificationHistoryUpdateWithoutTemplateInput, NotificationHistoryUncheckedUpdateWithoutTemplateInput>
    create: XOR<NotificationHistoryCreateWithoutTemplateInput, NotificationHistoryUncheckedCreateWithoutTemplateInput>
  }

  export type NotificationHistoryUpdateWithWhereUniqueWithoutTemplateInput = {
    where: NotificationHistoryWhereUniqueInput
    data: XOR<NotificationHistoryUpdateWithoutTemplateInput, NotificationHistoryUncheckedUpdateWithoutTemplateInput>
  }

  export type NotificationHistoryUpdateManyWithWhereWithoutTemplateInput = {
    where: NotificationHistoryScalarWhereInput
    data: XOR<NotificationHistoryUpdateManyMutationInput, NotificationHistoryUncheckedUpdateManyWithoutTemplateInput>
  }

  export type NotificationTemplateCreateWithoutTriggersInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationTemplatesInput
    queue?: NotificationQueueCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateUncheckedCreateWithoutTriggersInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateCreateOrConnectWithoutTriggersInput = {
    where: NotificationTemplateWhereUniqueInput
    create: XOR<NotificationTemplateCreateWithoutTriggersInput, NotificationTemplateUncheckedCreateWithoutTriggersInput>
  }

  export type BranchCreateWithoutNotificationTriggersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutNotificationTriggersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutNotificationTriggersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNotificationTriggersInput, BranchUncheckedCreateWithoutNotificationTriggersInput>
  }

  export type NotificationQueueCreateWithoutTriggerInput = {
    id?: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationQueueInput
    template: NotificationTemplateCreateNestedOneWithoutQueueInput
    branch: BranchCreateNestedOneWithoutNotificationQueueInput
  }

  export type NotificationQueueUncheckedCreateWithoutTriggerInput = {
    id?: string
    customerId: string
    templateId: string
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueCreateOrConnectWithoutTriggerInput = {
    where: NotificationQueueWhereUniqueInput
    create: XOR<NotificationQueueCreateWithoutTriggerInput, NotificationQueueUncheckedCreateWithoutTriggerInput>
  }

  export type NotificationQueueCreateManyTriggerInputEnvelope = {
    data: NotificationQueueCreateManyTriggerInput | NotificationQueueCreateManyTriggerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationHistoryCreateWithoutTriggerInput = {
    id?: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationHistoryInput
    template: NotificationTemplateCreateNestedOneWithoutHistoryInput
    branch: BranchCreateNestedOneWithoutNotificationHistoryInput
  }

  export type NotificationHistoryUncheckedCreateWithoutTriggerInput = {
    id?: string
    customerId: string
    templateId: string
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationHistoryCreateOrConnectWithoutTriggerInput = {
    where: NotificationHistoryWhereUniqueInput
    create: XOR<NotificationHistoryCreateWithoutTriggerInput, NotificationHistoryUncheckedCreateWithoutTriggerInput>
  }

  export type NotificationHistoryCreateManyTriggerInputEnvelope = {
    data: NotificationHistoryCreateManyTriggerInput | NotificationHistoryCreateManyTriggerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationTemplateUpsertWithoutTriggersInput = {
    update: XOR<NotificationTemplateUpdateWithoutTriggersInput, NotificationTemplateUncheckedUpdateWithoutTriggersInput>
    create: XOR<NotificationTemplateCreateWithoutTriggersInput, NotificationTemplateUncheckedCreateWithoutTriggersInput>
    where?: NotificationTemplateWhereInput
  }

  export type NotificationTemplateUpdateToOneWithWhereWithoutTriggersInput = {
    where?: NotificationTemplateWhereInput
    data: XOR<NotificationTemplateUpdateWithoutTriggersInput, NotificationTemplateUncheckedUpdateWithoutTriggersInput>
  }

  export type NotificationTemplateUpdateWithoutTriggersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationTemplatesNestedInput
    queue?: NotificationQueueUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateUncheckedUpdateWithoutTriggersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: NotificationQueueUncheckedUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type BranchUpsertWithoutNotificationTriggersInput = {
    update: XOR<BranchUpdateWithoutNotificationTriggersInput, BranchUncheckedUpdateWithoutNotificationTriggersInput>
    create: XOR<BranchCreateWithoutNotificationTriggersInput, BranchUncheckedCreateWithoutNotificationTriggersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNotificationTriggersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNotificationTriggersInput, BranchUncheckedUpdateWithoutNotificationTriggersInput>
  }

  export type BranchUpdateWithoutNotificationTriggersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNotificationTriggersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type NotificationQueueUpsertWithWhereUniqueWithoutTriggerInput = {
    where: NotificationQueueWhereUniqueInput
    update: XOR<NotificationQueueUpdateWithoutTriggerInput, NotificationQueueUncheckedUpdateWithoutTriggerInput>
    create: XOR<NotificationQueueCreateWithoutTriggerInput, NotificationQueueUncheckedCreateWithoutTriggerInput>
  }

  export type NotificationQueueUpdateWithWhereUniqueWithoutTriggerInput = {
    where: NotificationQueueWhereUniqueInput
    data: XOR<NotificationQueueUpdateWithoutTriggerInput, NotificationQueueUncheckedUpdateWithoutTriggerInput>
  }

  export type NotificationQueueUpdateManyWithWhereWithoutTriggerInput = {
    where: NotificationQueueScalarWhereInput
    data: XOR<NotificationQueueUpdateManyMutationInput, NotificationQueueUncheckedUpdateManyWithoutTriggerInput>
  }

  export type NotificationHistoryUpsertWithWhereUniqueWithoutTriggerInput = {
    where: NotificationHistoryWhereUniqueInput
    update: XOR<NotificationHistoryUpdateWithoutTriggerInput, NotificationHistoryUncheckedUpdateWithoutTriggerInput>
    create: XOR<NotificationHistoryCreateWithoutTriggerInput, NotificationHistoryUncheckedCreateWithoutTriggerInput>
  }

  export type NotificationHistoryUpdateWithWhereUniqueWithoutTriggerInput = {
    where: NotificationHistoryWhereUniqueInput
    data: XOR<NotificationHistoryUpdateWithoutTriggerInput, NotificationHistoryUncheckedUpdateWithoutTriggerInput>
  }

  export type NotificationHistoryUpdateManyWithWhereWithoutTriggerInput = {
    where: NotificationHistoryScalarWhereInput
    data: XOR<NotificationHistoryUpdateManyMutationInput, NotificationHistoryUncheckedUpdateManyWithoutTriggerInput>
  }

  export type CustomerCreateWithoutNotificationQueueInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutNotificationQueueInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutNotificationQueueInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutNotificationQueueInput, CustomerUncheckedCreateWithoutNotificationQueueInput>
  }

  export type NotificationTemplateCreateWithoutQueueInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationTemplatesInput
    triggers?: NotificationTriggerCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateUncheckedCreateWithoutQueueInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    triggers?: NotificationTriggerUncheckedCreateNestedManyWithoutTemplateInput
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateCreateOrConnectWithoutQueueInput = {
    where: NotificationTemplateWhereUniqueInput
    create: XOR<NotificationTemplateCreateWithoutQueueInput, NotificationTemplateUncheckedCreateWithoutQueueInput>
  }

  export type NotificationTriggerCreateWithoutQueueInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: NotificationTemplateCreateNestedOneWithoutTriggersInput
    branch: BranchCreateNestedOneWithoutNotificationTriggersInput
    history?: NotificationHistoryCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerUncheckedCreateWithoutQueueInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    templateId: string
    branchId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: NotificationHistoryUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerCreateOrConnectWithoutQueueInput = {
    where: NotificationTriggerWhereUniqueInput
    create: XOR<NotificationTriggerCreateWithoutQueueInput, NotificationTriggerUncheckedCreateWithoutQueueInput>
  }

  export type BranchCreateWithoutNotificationQueueInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutNotificationQueueInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutNotificationQueueInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNotificationQueueInput, BranchUncheckedCreateWithoutNotificationQueueInput>
  }

  export type CustomerUpsertWithoutNotificationQueueInput = {
    update: XOR<CustomerUpdateWithoutNotificationQueueInput, CustomerUncheckedUpdateWithoutNotificationQueueInput>
    create: XOR<CustomerCreateWithoutNotificationQueueInput, CustomerUncheckedCreateWithoutNotificationQueueInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutNotificationQueueInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutNotificationQueueInput, CustomerUncheckedUpdateWithoutNotificationQueueInput>
  }

  export type CustomerUpdateWithoutNotificationQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutNotificationQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type NotificationTemplateUpsertWithoutQueueInput = {
    update: XOR<NotificationTemplateUpdateWithoutQueueInput, NotificationTemplateUncheckedUpdateWithoutQueueInput>
    create: XOR<NotificationTemplateCreateWithoutQueueInput, NotificationTemplateUncheckedCreateWithoutQueueInput>
    where?: NotificationTemplateWhereInput
  }

  export type NotificationTemplateUpdateToOneWithWhereWithoutQueueInput = {
    where?: NotificationTemplateWhereInput
    data: XOR<NotificationTemplateUpdateWithoutQueueInput, NotificationTemplateUncheckedUpdateWithoutQueueInput>
  }

  export type NotificationTemplateUpdateWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationTemplatesNestedInput
    triggers?: NotificationTriggerUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateUncheckedUpdateWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triggers?: NotificationTriggerUncheckedUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTriggerUpsertWithoutQueueInput = {
    update: XOR<NotificationTriggerUpdateWithoutQueueInput, NotificationTriggerUncheckedUpdateWithoutQueueInput>
    create: XOR<NotificationTriggerCreateWithoutQueueInput, NotificationTriggerUncheckedCreateWithoutQueueInput>
    where?: NotificationTriggerWhereInput
  }

  export type NotificationTriggerUpdateToOneWithWhereWithoutQueueInput = {
    where?: NotificationTriggerWhereInput
    data: XOR<NotificationTriggerUpdateWithoutQueueInput, NotificationTriggerUncheckedUpdateWithoutQueueInput>
  }

  export type NotificationTriggerUpdateWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: NotificationTemplateUpdateOneRequiredWithoutTriggersNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationTriggersNestedInput
    history?: NotificationHistoryUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: NotificationHistoryUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type BranchUpsertWithoutNotificationQueueInput = {
    update: XOR<BranchUpdateWithoutNotificationQueueInput, BranchUncheckedUpdateWithoutNotificationQueueInput>
    create: XOR<BranchCreateWithoutNotificationQueueInput, BranchUncheckedCreateWithoutNotificationQueueInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNotificationQueueInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNotificationQueueInput, BranchUncheckedUpdateWithoutNotificationQueueInput>
  }

  export type BranchUpdateWithoutNotificationQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNotificationQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type CustomerCreateWithoutNotificationHistoryInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutCustomersInput
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutNotificationHistoryInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    branchId: string
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    packages?: CustomerPackageUncheckedCreateNestedManyWithoutCustomerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerInput
    tags?: CustomerTagUncheckedCreateNestedManyWithoutCustomerInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutNotificationHistoryInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutNotificationHistoryInput, CustomerUncheckedCreateWithoutNotificationHistoryInput>
  }

  export type NotificationTemplateCreateWithoutHistoryInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    branch: BranchCreateNestedOneWithoutNotificationTemplatesInput
    triggers?: NotificationTriggerCreateNestedManyWithoutTemplateInput
    queue?: NotificationQueueCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateUncheckedCreateWithoutHistoryInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    triggers?: NotificationTriggerUncheckedCreateNestedManyWithoutTemplateInput
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type NotificationTemplateCreateOrConnectWithoutHistoryInput = {
    where: NotificationTemplateWhereUniqueInput
    create: XOR<NotificationTemplateCreateWithoutHistoryInput, NotificationTemplateUncheckedCreateWithoutHistoryInput>
  }

  export type NotificationTriggerCreateWithoutHistoryInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: NotificationTemplateCreateNestedOneWithoutTriggersInput
    branch: BranchCreateNestedOneWithoutNotificationTriggersInput
    queue?: NotificationQueueCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerUncheckedCreateWithoutHistoryInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    templateId: string
    branchId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    queue?: NotificationQueueUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type NotificationTriggerCreateOrConnectWithoutHistoryInput = {
    where: NotificationTriggerWhereUniqueInput
    create: XOR<NotificationTriggerCreateWithoutHistoryInput, NotificationTriggerUncheckedCreateWithoutHistoryInput>
  }

  export type BranchCreateWithoutNotificationHistoryInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutNotificationHistoryInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutNotificationHistoryInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNotificationHistoryInput, BranchUncheckedCreateWithoutNotificationHistoryInput>
  }

  export type CustomerUpsertWithoutNotificationHistoryInput = {
    update: XOR<CustomerUpdateWithoutNotificationHistoryInput, CustomerUncheckedUpdateWithoutNotificationHistoryInput>
    create: XOR<CustomerCreateWithoutNotificationHistoryInput, CustomerUncheckedCreateWithoutNotificationHistoryInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutNotificationHistoryInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutNotificationHistoryInput, CustomerUncheckedUpdateWithoutNotificationHistoryInput>
  }

  export type CustomerUpdateWithoutNotificationHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCustomersNestedInput
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutNotificationHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type NotificationTemplateUpsertWithoutHistoryInput = {
    update: XOR<NotificationTemplateUpdateWithoutHistoryInput, NotificationTemplateUncheckedUpdateWithoutHistoryInput>
    create: XOR<NotificationTemplateCreateWithoutHistoryInput, NotificationTemplateUncheckedCreateWithoutHistoryInput>
    where?: NotificationTemplateWhereInput
  }

  export type NotificationTemplateUpdateToOneWithWhereWithoutHistoryInput = {
    where?: NotificationTemplateWhereInput
    data: XOR<NotificationTemplateUpdateWithoutHistoryInput, NotificationTemplateUncheckedUpdateWithoutHistoryInput>
  }

  export type NotificationTemplateUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationTemplatesNestedInput
    triggers?: NotificationTriggerUpdateManyWithoutTemplateNestedInput
    queue?: NotificationQueueUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triggers?: NotificationTriggerUncheckedUpdateManyWithoutTemplateNestedInput
    queue?: NotificationQueueUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTriggerUpsertWithoutHistoryInput = {
    update: XOR<NotificationTriggerUpdateWithoutHistoryInput, NotificationTriggerUncheckedUpdateWithoutHistoryInput>
    create: XOR<NotificationTriggerCreateWithoutHistoryInput, NotificationTriggerUncheckedCreateWithoutHistoryInput>
    where?: NotificationTriggerWhereInput
  }

  export type NotificationTriggerUpdateToOneWithWhereWithoutHistoryInput = {
    where?: NotificationTriggerWhereInput
    data: XOR<NotificationTriggerUpdateWithoutHistoryInput, NotificationTriggerUncheckedUpdateWithoutHistoryInput>
  }

  export type NotificationTriggerUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: NotificationTemplateUpdateOneRequiredWithoutTriggersNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationTriggersNestedInput
    queue?: NotificationQueueUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: NotificationQueueUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type BranchUpsertWithoutNotificationHistoryInput = {
    update: XOR<BranchUpdateWithoutNotificationHistoryInput, BranchUncheckedUpdateWithoutNotificationHistoryInput>
    create: XOR<BranchCreateWithoutNotificationHistoryInput, BranchUncheckedCreateWithoutNotificationHistoryInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNotificationHistoryInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNotificationHistoryInput, BranchUncheckedUpdateWithoutNotificationHistoryInput>
  }

  export type BranchUpdateWithoutNotificationHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNotificationHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type BranchCreateWithoutNotificationSettingsInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutBranchInput
    parentBranch?: BranchCreateNestedOneWithoutSubBranchesInput
    subBranches?: BranchCreateNestedManyWithoutParentBranchInput
    users?: UserCreateNestedManyWithoutBranchInput
    services?: ServiceCreateNestedManyWithoutBranchInput
    packages?: PackageCreateNestedManyWithoutBranchInput
    invoices?: InvoiceCreateNestedManyWithoutBranchInput
    customers?: CustomerCreateNestedManyWithoutBranchInput
    workHours?: WorkHourCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutNotificationSettingsInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    parentBranchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutBranchInput
    subBranches?: BranchUncheckedCreateNestedManyWithoutParentBranchInput
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    services?: ServiceUncheckedCreateNestedManyWithoutBranchInput
    packages?: PackageUncheckedCreateNestedManyWithoutBranchInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutBranchInput
    customers?: CustomerUncheckedCreateNestedManyWithoutBranchInput
    workHours?: WorkHourUncheckedCreateNestedManyWithoutBranchInput
    CashRegisterLog?: CashRegisterLogUncheckedCreateNestedManyWithoutBranchInput
    commissionRules?: CommissionRuleUncheckedCreateNestedManyWithoutBranchInput
    serviceCategories?: ServiceCategoryUncheckedCreateNestedManyWithoutBranchInput
    notificationProviders?: NotificationProviderUncheckedCreateNestedManyWithoutBranchInput
    notificationTemplates?: NotificationTemplateUncheckedCreateNestedManyWithoutBranchInput
    notificationTriggers?: NotificationTriggerUncheckedCreateNestedManyWithoutBranchInput
    notificationQueue?: NotificationQueueUncheckedCreateNestedManyWithoutBranchInput
    notificationHistory?: NotificationHistoryUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutNotificationSettingsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutNotificationSettingsInput, BranchUncheckedCreateWithoutNotificationSettingsInput>
  }

  export type BranchUpsertWithoutNotificationSettingsInput = {
    update: XOR<BranchUpdateWithoutNotificationSettingsInput, BranchUncheckedUpdateWithoutNotificationSettingsInput>
    create: XOR<BranchCreateWithoutNotificationSettingsInput, BranchUncheckedCreateWithoutNotificationSettingsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutNotificationSettingsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutNotificationSettingsInput, BranchUncheckedUpdateWithoutNotificationSettingsInput>
  }

  export type BranchUpdateWithoutNotificationSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    parentBranch?: BranchUpdateOneWithoutSubBranchesNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutNotificationSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentBranchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type AppointmentCreateManyStaffInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashRegisterLogCreateManyUserInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    branchId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
  }

  export type CommissionRuleCreateManyStaffInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    serviceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCommissionCreateManyStaffInput = {
    id?: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
    serviceId?: string | null
  }

  export type StaffServiceCreateManyUserInput = {
    serviceId: string
  }

  export type WorkHourCreateManyStaffInput = {
    id?: string
    branchId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    branch?: BranchUpdateOneRequiredWithoutAppointmentsNestedInput
    invoice?: InvoiceUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashRegisterLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    branch?: BranchUpdateOneRequiredWithoutCashRegisterLogNestedInput
    payments?: PaymentUpdateManyWithoutCashLogNestedInput
  }

  export type CashRegisterLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    payments?: PaymentUncheckedUpdateManyWithoutCashLogNestedInput
  }

  export type CashRegisterLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
  }

  export type CommissionRuleUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCommissionRulesNestedInput
    service?: ServiceUpdateOneWithoutCommissionRulesNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCommissionUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionItem?: CommissionItemUpdateOneRequiredWithoutCommissionsNestedInput
    invoice?: InvoiceUpdateOneRequiredWithoutStaffCommissionNestedInput
    service?: ServiceUpdateOneWithoutStaffCommissionNestedInput
  }

  export type StaffCommissionUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffCommissionUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffServiceUpdateWithoutUserInput = {
    service?: ServiceUpdateOneRequiredWithoutStaffNestedInput
  }

  export type StaffServiceUncheckedUpdateWithoutUserInput = {
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type StaffServiceUncheckedUpdateManyWithoutUserInput = {
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkHourUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutWorkHoursNestedInput
  }

  export type WorkHourUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHourUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyBranchInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    serviceId: string
    staffId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BranchCreateManyParentBranchInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyBranchInput = {
    id?: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCreateManyBranchInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    categoryId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageCreateManyBranchInput = {
    id?: string
    name: string
    price: number
    type: $Enums.PackageType
    totalSessions?: number | null
    totalMinutes?: number | null
    validityDays?: number | null
    description?: string | null
    commissionRate?: number | null
    commissionFixed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyBranchInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    customerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
  }

  export type CustomerCreateManyBranchInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    notes?: string | null
    discountRate?: number
    creditBalance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkHourCreateManyBranchInput = {
    id?: string
    staffId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    isOff?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashRegisterLogCreateManyBranchInput = {
    id?: string
    type: $Enums.CashLogType
    amount: number
    description?: string | null
    userId: string
    createdAt?: Date | string
    category?: $Enums.CashMovementCategory | null
  }

  export type CommissionRuleCreateManyBranchInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    serviceId?: string | null
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryCreateManyBranchInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationProviderCreateManyBranchInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    config: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationTemplateCreateManyBranchInput = {
    id?: string
    name: string
    type: $Enums.NotificationType
    subject?: string | null
    content: string
    variables: JsonNullValueInput | InputJsonValue
    language?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationTriggerCreateManyBranchInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    templateId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueCreateManyBranchInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationHistoryCreateManyBranchInput = {
    id?: string
    customerId: string
    templateId: string
    triggerId?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AppointmentUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    invoice?: InvoiceUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchUpdateWithoutParentBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUpdateManyWithoutParentBranchNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    services?: ServiceUpdateManyWithoutBranchNestedInput
    packages?: PackageUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUpdateManyWithoutBranchNestedInput
    customers?: CustomerUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutParentBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutBranchNestedInput
    subBranches?: BranchUncheckedUpdateManyWithoutParentBranchNestedInput
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutBranchNestedInput
    packages?: PackageUncheckedUpdateManyWithoutBranchNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutBranchNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutBranchNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutBranchNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutBranchNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutBranchNestedInput
    serviceCategories?: ServiceCategoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationProviders?: NotificationProviderUncheckedUpdateManyWithoutBranchNestedInput
    notificationTemplates?: NotificationTemplateUncheckedUpdateManyWithoutBranchNestedInput
    notificationTriggers?: NotificationTriggerUncheckedUpdateManyWithoutBranchNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutBranchNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutBranchNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateManyWithoutParentBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    CashRegisterLog?: CashRegisterLogUncheckedUpdateManyWithoutUserNestedInput
    staffCommissionRules?: CommissionRuleUncheckedUpdateManyWithoutStaffNestedInput
    commissions?: StaffCommissionUncheckedUpdateManyWithoutStaffNestedInput
    services?: StaffServiceUncheckedUpdateManyWithoutUserNestedInput
    workHours?: WorkHourUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: PackageServiceUpdateManyWithoutPackageNestedInput
    customerPackages?: CustomerPackageUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: PackageServiceUncheckedUpdateManyWithoutPackageNestedInput
    customerPackages?: CustomerPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumPackageTypeFieldUpdateOperationsInput | $Enums.PackageType
    totalSessions?: NullableIntFieldUpdateOperationsInput | number | null
    totalMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    validityDays?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    commissionFixed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    customerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    packages?: CustomerPackageUncheckedUpdateManyWithoutCustomerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCustomerNestedInput
    tags?: CustomerTagUncheckedUpdateManyWithoutCustomerNestedInput
    notificationQueue?: NotificationQueueUncheckedUpdateManyWithoutCustomerNestedInput
    notificationHistory?: NotificationHistoryUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    discountRate?: FloatFieldUpdateOperationsInput | number
    creditBalance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHourUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: UserUpdateOneRequiredWithoutWorkHoursNestedInput
  }

  export type WorkHourUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHourUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    isOff?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashRegisterLogUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    user?: UserUpdateOneRequiredWithoutCashRegisterLogNestedInput
    payments?: PaymentUpdateManyWithoutCashLogNestedInput
  }

  export type CashRegisterLogUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
    payments?: PaymentUncheckedUpdateManyWithoutCashLogNestedInput
  }

  export type CashRegisterLogUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCashLogTypeFieldUpdateOperationsInput | $Enums.CashLogType
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: NullableEnumCashMovementCategoryFieldUpdateOperationsInput | $Enums.CashMovementCategory | null
  }

  export type CommissionRuleUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneWithoutCommissionRulesNestedInput
    staff?: UserUpdateOneWithoutStaffCommissionRulesNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationProviderUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationProviderUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationProviderUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    config?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTemplateUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triggers?: NotificationTriggerUpdateManyWithoutTemplateNestedInput
    queue?: NotificationQueueUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triggers?: NotificationTriggerUncheckedUpdateManyWithoutTemplateNestedInput
    queue?: NotificationQueueUncheckedUpdateManyWithoutTemplateNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type NotificationTemplateUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    variables?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTriggerUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: NotificationTemplateUpdateOneRequiredWithoutTriggersNestedInput
    queue?: NotificationQueueUpdateManyWithoutTriggerNestedInput
    history?: NotificationHistoryUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    templateId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: NotificationQueueUncheckedUpdateManyWithoutTriggerNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    templateId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationQueueNestedInput
    template?: NotificationTemplateUpdateOneRequiredWithoutQueueNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutQueueNestedInput
  }

  export type NotificationQueueUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationHistoryNestedInput
    template?: NotificationTemplateUpdateOneRequiredWithoutHistoryNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutHistoryNestedInput
  }

  export type NotificationHistoryUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyCustomerInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    serviceId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerPackageCreateManyCustomerInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    packageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyCustomerInput = {
    id?: string
    totalAmount: number
    amountPaid: number
    debt: number
    status: $Enums.PaymentStatus
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointmentId?: string | null
    customerPackageId?: string | null
  }

  export type CustomerTagCreateManyCustomerInput = {
    tagId: string
  }

  export type NotificationQueueCreateManyCustomerInput = {
    id?: string
    templateId: string
    triggerId?: string | null
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationHistoryCreateManyCustomerInput = {
    id?: string
    templateId: string
    triggerId?: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AppointmentUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    branch?: BranchUpdateOneRequiredWithoutAppointmentsNestedInput
    invoice?: InvoiceUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPackageUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutCustomerPackagesNestedInput
    invoice?: InvoiceUpdateOneWithoutCustomerPackageNestedInput
  }

  export type CustomerPackageUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutCustomerPackageNestedInput
  }

  export type CustomerPackageUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutInvoicesNestedInput
    appointment?: AppointmentUpdateOneWithoutInvoiceNestedInput
    customerPackage?: CustomerPackageUpdateOneWithoutInvoiceNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutInvoiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    debt?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    customerPackageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerTagUpdateWithoutCustomerInput = {
    tag?: TagUpdateOneRequiredWithoutCustomersNestedInput
  }

  export type CustomerTagUncheckedUpdateWithoutCustomerInput = {
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerTagUncheckedUpdateManyWithoutCustomerInput = {
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationQueueUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: NotificationTemplateUpdateOneRequiredWithoutQueueNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutQueueNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationQueueNestedInput
  }

  export type NotificationQueueUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: NotificationTemplateUpdateOneRequiredWithoutHistoryNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutHistoryNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationHistoryNestedInput
  }

  export type NotificationHistoryUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerTagCreateManyTagInput = {
    customerId: string
  }

  export type CustomerTagUpdateWithoutTagInput = {
    customer?: CustomerUpdateOneRequiredWithoutTagsNestedInput
  }

  export type CustomerTagUncheckedUpdateWithoutTagInput = {
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerTagUncheckedUpdateManyWithoutTagInput = {
    customerId?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceCreateManyCategoryInput = {
    id?: string
    name: string
    price: number
    duration: number
    description?: string | null
    branchId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutServicesNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
    staff?: StaffServiceUncheckedUpdateManyWithoutServiceNestedInput
    packages?: PackageServiceUncheckedUpdateManyWithoutServiceNestedInput
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutServiceNestedInput
    StaffCommission?: StaffCommissionUncheckedUpdateManyWithoutServiceNestedInput
    commissionRules?: CommissionRuleUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyServiceInput = {
    id?: string
    startTime: Date | string
    endTime: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    customerId: string
    staffId: string
    branchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffServiceCreateManyServiceInput = {
    userId: string
  }

  export type PackageServiceCreateManyServiceInput = {
    packageId: string
    quantity: number
  }

  export type CommissionItemCreateManyServiceInput = {
    id?: string
    invoiceId: string
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCommissionCreateManyServiceInput = {
    id?: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
  }

  export type CommissionRuleCreateManyServiceInput = {
    id?: string
    name: string
    description?: string | null
    ruleType?: $Enums.CommissionRuleType
    type: $Enums.CommissionType
    rate?: number
    fixedAmount?: number
    startDate?: Date | string
    endDate?: Date | string | null
    branchId: string
    staffId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    branch?: BranchUpdateOneRequiredWithoutAppointmentsNestedInput
    invoice?: InvoiceUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffServiceUpdateWithoutServiceInput = {
    user?: UserUpdateOneRequiredWithoutServicesNestedInput
  }

  export type StaffServiceUncheckedUpdateWithoutServiceInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StaffServiceUncheckedUpdateManyWithoutServiceInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PackageServiceUpdateWithoutServiceInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    package?: PackageUpdateOneRequiredWithoutServicesNestedInput
  }

  export type PackageServiceUncheckedUpdateWithoutServiceInput = {
    packageId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PackageServiceUncheckedUpdateManyWithoutServiceInput = {
    packageId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CommissionItemUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutCommissionItemsNestedInput
    commissions?: StaffCommissionUpdateManyWithoutCommissionItemNestedInput
    appliedRule?: CommissionRuleUpdateOneWithoutCommissionItemsNestedInput
  }

  export type CommissionItemUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissions?: StaffCommissionUncheckedUpdateManyWithoutCommissionItemNestedInput
  }

  export type CommissionItemUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCommissionUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    staff?: UserUpdateOneRequiredWithoutCommissionsNestedInput
    commissionItem?: CommissionItemUpdateOneRequiredWithoutCommissionsNestedInput
    invoice?: InvoiceUpdateOneRequiredWithoutStaffCommissionNestedInput
  }

  export type StaffCommissionUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
  }

  export type StaffCommissionUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
  }

  export type CommissionRuleUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutCommissionRulesNestedInput
    staff?: UserUpdateOneWithoutStaffCommissionRulesNestedInput
    commissionItems?: CommissionItemUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissionItems?: CommissionItemUncheckedUpdateManyWithoutAppliedRuleNestedInput
  }

  export type CommissionRuleUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ruleType?: EnumCommissionRuleTypeFieldUpdateOperationsInput | $Enums.CommissionRuleType
    type?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageServiceCreateManyPackageInput = {
    serviceId: string
    quantity: number
  }

  export type CustomerPackageCreateManyPackageInput = {
    id?: string
    purchaseDate?: Date | string
    expiryDate?: Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    salesCode?: string | null
    customerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageServiceUpdateWithoutPackageInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    service?: ServiceUpdateOneRequiredWithoutPackagesNestedInput
  }

  export type PackageServiceUncheckedUpdateWithoutPackageInput = {
    serviceId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PackageServiceUncheckedUpdateManyWithoutPackageInput = {
    serviceId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerPackageUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutPackagesNestedInput
    invoice?: InvoiceUpdateOneWithoutCustomerPackageNestedInput
  }

  export type CustomerPackageUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUncheckedUpdateOneWithoutCustomerPackageNestedInput
  }

  export type CustomerPackageUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remainingSessions?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    salesCode?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInvoiceInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    cashRegisterLogId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommissionItemCreateManyInvoiceInput = {
    id?: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    appliedRuleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCommissionCreateManyInvoiceInput = {
    id?: string
    staffId: string
    commissionItemId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    serviceId?: string | null
  }

  export type PaymentUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cashLog?: CashRegisterLogUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cashRegisterLogId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cashRegisterLogId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommissionItemUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneWithoutCommissionItemsNestedInput
    commissions?: StaffCommissionUpdateManyWithoutCommissionItemNestedInput
    appliedRule?: CommissionRuleUpdateOneWithoutCommissionItemsNestedInput
  }

  export type CommissionItemUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissions?: StaffCommissionUncheckedUpdateManyWithoutCommissionItemNestedInput
  }

  export type CommissionItemUncheckedUpdateManyWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCommissionUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    staff?: UserUpdateOneRequiredWithoutCommissionsNestedInput
    commissionItem?: CommissionItemUpdateOneRequiredWithoutCommissionsNestedInput
    service?: ServiceUpdateOneWithoutStaffCommissionNestedInput
  }

  export type StaffCommissionUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffCommissionUncheckedUpdateManyWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    commissionItemId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommissionItemCreateManyAppliedRuleInput = {
    id?: string
    invoiceId: string
    serviceId?: string | null
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommissionItemUpdateWithoutAppliedRuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutCommissionItemsNestedInput
    service?: ServiceUpdateOneWithoutCommissionItemsNestedInput
    commissions?: StaffCommissionUpdateManyWithoutCommissionItemNestedInput
  }

  export type CommissionItemUncheckedUpdateWithoutAppliedRuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissions?: StaffCommissionUncheckedUpdateManyWithoutCommissionItemNestedInput
  }

  export type CommissionItemUncheckedUpdateManyWithoutAppliedRuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCommissionCreateManyCommissionItemInput = {
    id?: string
    staffId: string
    amount: number
    status: $Enums.CommissionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appliedRuleId?: string | null
    invoiceId: string
    serviceId?: string | null
  }

  export type StaffCommissionUpdateWithoutCommissionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    staff?: UserUpdateOneRequiredWithoutCommissionsNestedInput
    invoice?: InvoiceUpdateOneRequiredWithoutStaffCommissionNestedInput
    service?: ServiceUpdateOneWithoutStaffCommissionNestedInput
  }

  export type StaffCommissionUncheckedUpdateWithoutCommissionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffCommissionUncheckedUpdateManyWithoutCommissionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumCommissionStatusFieldUpdateOperationsInput | $Enums.CommissionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appliedRuleId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: StringFieldUpdateOperationsInput | string
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateManyCashLogInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    paymentDate?: Date | string
    invoiceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateWithoutCashLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCashLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutCashLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTriggerCreateManyTemplateInput = {
    id?: string
    name: string
    eventType: $Enums.NotificationEventType
    conditions: JsonNullValueInput | InputJsonValue
    branchId: string
    isActive?: boolean
    priority?: number
    schedule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationQueueCreateManyTemplateInput = {
    id?: string
    customerId: string
    triggerId?: string | null
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationHistoryCreateManyTemplateInput = {
    id?: string
    customerId: string
    triggerId?: string | null
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationTriggerUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutNotificationTriggersNestedInput
    queue?: NotificationQueueUpdateManyWithoutTriggerNestedInput
    history?: NotificationHistoryUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: NotificationQueueUncheckedUpdateManyWithoutTriggerNestedInput
    history?: NotificationHistoryUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type NotificationTriggerUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventType?: EnumNotificationEventTypeFieldUpdateOperationsInput | $Enums.NotificationEventType
    conditions?: JsonNullValueInput | InputJsonValue
    branchId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationQueueNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutQueueNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationQueueNestedInput
  }

  export type NotificationQueueUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationHistoryNestedInput
    trigger?: NotificationTriggerUpdateOneWithoutHistoryNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationHistoryNestedInput
  }

  export type NotificationHistoryUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    triggerId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueCreateManyTriggerInput = {
    id?: string
    customerId: string
    templateId: string
    branchId: string
    status?: $Enums.NotificationStatus
    data: JsonNullValueInput | InputJsonValue
    scheduledAt: Date | string
    sentAt?: Date | string | null
    errorMessage?: string | null
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationHistoryCreateManyTriggerInput = {
    id?: string
    customerId: string
    templateId: string
    branchId: string
    type: $Enums.NotificationType
    status: $Enums.NotificationDeliveryStatus
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: number | null
    sentAt: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationQueueUpdateWithoutTriggerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationQueueNestedInput
    template?: NotificationTemplateUpdateOneRequiredWithoutQueueNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationQueueNestedInput
  }

  export type NotificationQueueUncheckedUpdateWithoutTriggerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationQueueUncheckedUpdateManyWithoutTriggerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    data?: JsonNullValueInput | InputJsonValue
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUpdateWithoutTriggerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationHistoryNestedInput
    template?: NotificationTemplateUpdateOneRequiredWithoutHistoryNestedInput
    branch?: BranchUpdateOneRequiredWithoutNotificationHistoryNestedInput
  }

  export type NotificationHistoryUncheckedUpdateWithoutTriggerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationHistoryUncheckedUpdateManyWithoutTriggerInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationDeliveryStatusFieldUpdateOperationsInput | $Enums.NotificationDeliveryStatus
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}