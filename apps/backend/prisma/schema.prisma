generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "darwin-arm64", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

generator client_frontend {
  provider      = "prisma-client-js"
  output        = "../../../apps/frontend/src/lib/prisma-client"
  binaryTargets = ["native", "windows", "darwin-arm64", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  password              String
  name                  String
  role                  UserRole
  branchId              String?
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  appointments          Appointment[]     @relation("StaffAppointments")
  CashRegisterLog       CashRegisterLog[]
  staffCommissionRules  CommissionRule[]  @relation("StaffCommissionRules")
  commissions           StaffCommission[]
  services              StaffService[]
  branch                Branch?           @relation(fields: [branchId], references: [id], onDelete: Restrict)
  workHours             WorkHour[]
}

model WorkHour {
  id        String   @id @default(cuid())
  staffId   String
  branchId  String
  dayOfWeek Int
  startTime String
  endTime   String
  isOff     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  staff     User     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, branchId, dayOfWeek])
}

model Branch {
  id                    String                  @id @default(cuid())
  name                  String
  address               String?
  phone                 String?
  description           String?
  parentBranchId        String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  appointments          Appointment[]
  parentBranch          Branch?                 @relation("SubBranches", fields: [parentBranchId], references: [id], onDelete: Restrict)
  subBranches           Branch[]                @relation("SubBranches")
  users                 User[]
  services              Service[]
  packages              Package[]
  invoices              Invoice[]
  customers             Customer[]
  workHours             WorkHour[]
  CashRegisterLog       CashRegisterLog[]
  commissionRules       CommissionRule[]
  serviceCategories     ServiceCategory[]
  notificationProviders NotificationProvider[]
  notificationTemplates NotificationTemplate[]
  notificationTriggers  NotificationTrigger[]
  notificationQueue     NotificationQueue[]
  notificationHistory   NotificationHistory[]
  notificationSettings  NotificationSettings?
}

model Customer {
  id                  String                @id @default(cuid())
  name                String
  phone               String?               @unique
  email               String?               @unique
  notes               String?
  branchId            String
  discountRate        Float                 @default(0)
  creditBalance       Float                 @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  branch              Branch                @relation(fields: [branchId], references: [id])
  appointments        Appointment[]
  packages            CustomerPackage[]
  invoices            Invoice[]
  tags                CustomerTag[]
  notificationQueue   NotificationQueue[]
  notificationHistory NotificationHistory[]
}

model Tag {
  id        String        @id @default(cuid())
  name      String
  color     String        @default("#3b82f6")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  customers CustomerTag[]
}

model CustomerTag {
  customerId String
  tagId      String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([customerId, tagId])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  branchId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  branch      Branch?   @relation(fields: [branchId], references: [id], onDelete: Restrict)
  services    Service[]
}

model Service {
  id              String            @id @default(cuid())
  name            String
  price           Float
  duration        Int
  description     String?
  categoryId      String
  branchId        String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  category        ServiceCategory   @relation(fields: [categoryId], references: [id])
  branch          Branch            @relation(fields: [branchId], references: [id])
  appointments    Appointment[]
  staff           StaffService[]
  packages        PackageService[]
  commissionItems CommissionItem[]
  StaffCommission StaffCommission[]
  commissionRules CommissionRule[]
}

model StaffService {
  userId    String
  serviceId String
  user      User    @relation(fields: [userId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([userId, serviceId])
}

model Appointment {
  id         String            @id @default(cuid())
  startTime  DateTime
  endTime    DateTime
  status     AppointmentStatus
  notes      String?
  customerId String
  serviceId  String
  staffId    String
  branchId   String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  customer   Customer          @relation(fields: [customerId], references: [id])
  service    Service           @relation(fields: [serviceId], references: [id])
  staff      User              @relation("StaffAppointments", fields: [staffId], references: [id])
  branch     Branch            @relation(fields: [branchId], references: [id])
  invoice    Invoice?
}

model Package {
  id               String            @id @default(cuid())
  name             String
  price            Float
  type             PackageType
  totalSessions    Int?
  totalMinutes     Int?
  validityDays     Int?
  description      String?
  branchId         String
  commissionRate   Float? // Prim oranı
  commissionFixed  Float? // Sabit prim tutarı
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  branch           Branch            @relation(fields: [branchId], references: [id])
  services         PackageService[]
  customerPackages CustomerPackage[]
}

model PackageService {
  packageId String
  serviceId String
  quantity  Int
  package   Package @relation(fields: [packageId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([packageId, serviceId])
}

model CustomerPackage {
  id                String    @id @default(cuid())
  purchaseDate      DateTime  @default(now())
  expiryDate        DateTime?
  remainingSessions Json?
  notes             String?
  salesCode         String?   @unique
  customerId        String
  packageId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  customer          Customer  @relation(fields: [customerId], references: [id])
  package           Package   @relation(fields: [packageId], references: [id])
  invoice           Invoice?
}

model Invoice {
  id                String            @id @default(cuid())
  totalAmount       Float
  amountPaid        Float
  debt              Float
  status            PaymentStatus
  customerId        String
  branchId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  appointmentId     String?           @unique
  customerPackageId String?           @unique
  customer          Customer          @relation(fields: [customerId], references: [id])
  branch            Branch            @relation(fields: [branchId], references: [id])
  appointment       Appointment?      @relation(fields: [appointmentId], references: [id])
  customerPackage   CustomerPackage?  @relation(fields: [customerPackageId], references: [id])
  payments          Payment[]
  commissionItems   CommissionItem[]
  StaffCommission   StaffCommission[]
}

model Payment {
  id                String           @id @default(cuid())
  amount            Float
  method            PaymentMethod
  paymentDate       DateTime         @default(now())
  invoiceId         String
  cashRegisterLogId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  invoice           Invoice          @relation(fields: [invoiceId], references: [id])
  cashLog           CashRegisterLog? @relation(fields: [cashRegisterLogId], references: [id])
}

model CommissionRule {
  id              String              @id @default(cuid())
  name            String
  description     String?
  ruleType        CommissionRuleType  @default(GENERAL) // GENERAL, SERVICE_SPECIFIC, STAFF_SPECIFIC
  type            CommissionType      // PERCENTAGE, FIXED_AMOUNT
  rate            Float               @default(0)
  fixedAmount     Float               @default(0)
  startDate       DateTime            @default(now())
  endDate         DateTime?
  branchId        String
  // Hizmete özel kurallar için
  serviceId       String?
  // Personele özel kurallar için
  staffId         String?
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  branch          Branch              @relation(fields: [branchId], references: [id])
  service         Service?            @relation(fields: [serviceId], references: [id])
  staff           User?               @relation("StaffCommissionRules", fields: [staffId], references: [id])
  commissionItems CommissionItem[]

  @@index([ruleType, branchId, isActive])
  @@index([serviceId, isActive])
  @@index([staffId, isActive])
}

model CommissionItem {
  id            String            @id @default(cuid())
  invoiceId     String
  serviceId     String?
  amount        Float
  status        CommissionStatus
  appliedRuleId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  invoice       Invoice           @relation(fields: [invoiceId], references: [id])
  service       Service?          @relation(fields: [serviceId], references: [id])
  commissions   StaffCommission[]
  appliedRule   CommissionRule?   @relation(fields: [appliedRuleId], references: [id])
}

model StaffCommission {
  id               String           @id @default(cuid())
  staffId          String
  commissionItemId String
  amount           Float
  status           CommissionStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  appliedRuleId    String?
  invoiceId        String
  serviceId        String?
  staff            User             @relation(fields: [staffId], references: [id])
  commissionItem   CommissionItem   @relation(fields: [commissionItemId], references: [id])
  invoice          Invoice          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service          Service?         @relation(fields: [serviceId], references: [id])

  @@index([staffId, serviceId, status])
}

model CashRegisterLog {
  id          String                @id @default(cuid())
  type        CashLogType
  amount      Float
  description String?
  branchId    String
  userId      String
  createdAt   DateTime              @default(now())
  // referenceId   String? // Fatura, randevu vb. referans ID'si - DB senkronizasyon sorunu için geçici olarak kapatıldı
  // referenceType String? // 'INVOICE', 'APPOINTMENT' vb. - DB senkronizasyon sorunu için geçici olarak kapatıldı

  branch   Branch                @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user     User                  @relation(fields: [userId], references: [id])
  payments Payment[]             // Bu satır geri eklendi
  category CashMovementCategory? // Manuel hareketler için kategori

  // @@index([referenceId, referenceType]) // DB senkronizasyon sorunu için geçici olarak kapatıldı
  @@index([branchId, createdAt])
}

enum CommissionRuleType {
  GENERAL
  SERVICE_SPECIFIC
  STAFF_SPECIFIC
}

enum CommissionType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELED
}

enum PackageType {
  SESSION
  TIME
}

enum AppointmentStatus {
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
  SCHEDULED
  ARRIVED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIALLY_PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  CUSTOMER_CREDIT
}

enum UserRole {
  ADMIN
  SUPER_BRANCH_MANAGER
  BRANCH_MANAGER
  RECEPTION
  STAFF
  CUSTOMER
}

enum CashLogType {
  OPENING
  CLOSING
  INCOME
  OUTCOME
  MANUAL_IN
  MANUAL_OUT
  INVOICE_PAYMENT
}

enum CashMovementCategory {
  RENT
  UTILITIES
  SUPPLIES
  STAFF_ADVANCE
  MAINTENANCE
  MARKETING
  OTHER_EXPENSE
  OTHER_INCOME
}

// Bildirim Sistemi Modelleri
model NotificationProvider {
  id        String   @id @default(cuid())
  name      String
  type      NotificationType
  config    Json     // API anahtarları, endpoint'ler vb.
  branchId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, type, isActive])
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  type        NotificationType
  subject     String?  // Email için konu
  content     String   // Mesaj içeriği
  variables   Json     // Kullanılabilir değişkenler
  language    String   @default("tr")
  branchId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  triggers    NotificationTrigger[]
  queue       NotificationQueue[]
  history     NotificationHistory[]

  @@index([branchId, type, isActive])
}

model NotificationTrigger {
  id          String   @id @default(cuid())
  name        String
  eventType   NotificationEventType
  conditions  Json     // Tetiklenme koşulları
  templateId  String
  branchId    String
  isActive    Boolean  @default(true)
  priority    Int      @default(1)
  schedule    String?  // Cron expression
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  template    NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  queue       NotificationQueue[]
  history     NotificationHistory[]

  @@index([branchId, eventType, isActive])
}

model NotificationQueue {
  id          String   @id @default(cuid())
  customerId  String
  templateId  String
  triggerId   String?
  branchId    String
  status      NotificationStatus @default(PENDING)
  data        Json     // Kişiselleştirme verileri
  scheduledAt DateTime
  sentAt      DateTime?
  errorMessage String?
  retryCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  template    NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  trigger     NotificationTrigger? @relation(fields: [triggerId], references: [id], onDelete: SetNull)
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([status, scheduledAt])
  @@index([branchId, status])
}

model NotificationHistory {
  id          String   @id @default(cuid())
  customerId  String
  templateId  String
  triggerId   String?
  branchId    String
  type        NotificationType
  status      NotificationDeliveryStatus
  content     String
  metadata    Json?    // Delivery ID, cost vb.
  cost        Float?
  sentAt      DateTime
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  template    NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  trigger     NotificationTrigger? @relation(fields: [triggerId], references: [id], onDelete: SetNull)
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, sentAt])
  @@index([customerId, sentAt])
}

model NotificationSettings {
  id              String   @id @default(cuid())
  branchId        String   @unique
  smsConfig       Json?    // SMS sağlayıcı ayarları
  whatsappConfig  Json?    // WhatsApp API ayarları
  emailConfig     Json?    // Email SMTP ayarları
  generalSettings Json?    // Genel ayarlar
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  branch          Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  SMS
  WHATSAPP
  EMAIL
}

enum NotificationEventType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  BIRTHDAY
  PACKAGE_EXPIRY
  PAYMENT_REMINDER
  WELCOME_MESSAGE
  CUSTOM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum NotificationDeliveryStatus {
  SENT
  DELIVERED
  FAILED
  READ
}
